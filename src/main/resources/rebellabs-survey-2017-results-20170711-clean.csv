id;ide;ide_other;ide_reason;ide_reason_other;ide_rating;ide_moving_reason;ide_moving_reason_other;language;language_other;language_reason;language_reason_other;language_rating;language_moving_reason;language_moving_reason_other;appstack;appstack_other;appstack_reason;appstack_reason_other;appstack_rating;appstack_moving_reason;appstack_moving_reason_other;architecture;architecture_other;architecture_reason;architecture_reason_other;architecture_rating;architecture_moving_reason;architecture_moving_reason_other;database;database_other;database_reason;database_reason_other;database_rating;database_moving_reason;database_moving_reason_other;devops;devops_reason;devops_reason_other;performance;performance_reason;performance_reason_other;exciting_tech;tech_choices;productivity_boost;job_description;job_description_other;company;teamsize;experience_years;country
e3fdfecb842d4c0fbc83ad2870d0f9ff;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;;Historical reasons;6;;;We don't even have ops;;We don't have Ops :);We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;I'm not that excitable;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;;I: I am not sure, really;Small company (I work in a shared office space or small office);10-19;8;Estonia
b2967409a07c63f2b2aa799c6cfa44a2;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;;Don't want to tell;7;;;MySQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Poland
c2a6b3060e7b244a209afdb48d227985;IntelliJ IDEA;;Project requires it;;7;;;Groovy;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;OrientDB;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ratpack;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Small company (I work in a shared office space or small office);10-19;16;France
f7449a855f575be5f43548a280786e0f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;SOA;;Familiarity: we have the skills and know we can make it work;;6;;;MS SQL;;;Been using for long;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Yourkit;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;India
62ed464030157cdea8ab291a70bb3972;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Ecosystem: community, tools, libraries;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Developer friendliness;;7;;;The Dev team and the Ops team work together;;No DevOps;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;New Relic;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;5;Argentina
7a5a2bb7a1f1654ea2b1dda98ac9f3b0;;MyEclipse;Project requires it;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;;ERP;;IBM iSeries supports it;6;;;;DB2;;IBM iSeries is bundle with it;8;;;At least we talk to the Ops people;Happier team;;We react to the user complains;Performance has never been a requirement;;"SPRING;REACT";I wish we've chosen a different set of technologies;IDE;Team Lead;;Small company (I work in a shared office space or small office);3-9;8;Italy
a6dda639a70479fc7626b0a55da824fa;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;JEE and it's incompatibilities. ;4;Not enough time to migrate though I know it'll be better;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;;We are slowly moving away;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;"Spring boot; pattern fly;";It's the worst, we barely move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;18;Netherlands
524319c5c6bb91c883de0e06627d25d0;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Grails;Hype: they told us it's the next big thing;;10;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Familiarity: we know it the best;;8;;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;gradle;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;India
ec6405d1f15a6959b64aa02b8bfaf0d1;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;"Angular2;Typescript;Java EE 8";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;9;Bosnia & Herzegovina
6d4c8d222dd7a86ccdaebce01d199495;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Cassandra;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Kotlin; Spring Boot; Kafka ";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Sweden
9998d24bb150cd645a5a49dd183d93f7;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;5;The price of the migration is enormous;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Reactive Programming;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);100+;7;United States of America (USA)
5803ecbb6614524b7a1ca07e9f4e86ec;Eclipse ;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"scala;angular2";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);1-2;25;Italy
063f50f869e4eb2cbc342ab09097c344;IntelliJ IDEA;;Functionality: it's superior;;5;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;It's strongly encouraged by our application stack choice;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;kotlin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;9;Mexico
0bc2b0eec402c6b395ed06b0c1a5e6cd;Eclipse ;;Project requires it;;4;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;;Intershop;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Tensorflow;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Germany
67759db3354fa799290f90bce05f8a9f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Company policy: we have other projects using the same stack;;5;The team is large and inflexible;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 8;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;5;Norway
c17e951319dfd3b4fa4bf5fe3ef82e77;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;United States of America (USA)
9255defa6972259fdd609a0766d09f66;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;;Was chosen by developers that don't work in our company anymore;1;The price of the migration is enormous;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Spring5; Kotlin";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
b791f90330b3d6533bbaa98079f08c08;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Desktop app;;Our application stack encourages it;;7;;;;H2;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Boot, JavaFX;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Germany
1775e2c298099dbe268ca98bd31d7280;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;It's strongly encouraged by our application stack choice;;7;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Kotlin;spring boot;rxjava";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;12;Germany
e43209f0bfeacde4a59f2663d12368f7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance tooling / experts are expensive;;"vavr;jooq;kubernetes";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;17;Italy
f7e91999cc3e611b2e7cbcd775495c07;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;20;United States of America (USA)
94b8e06afd3c3f292ad5fa04deb7824b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Legacy code;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Hadoop; Java 8";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;1;Portugal
49f2b7a926fdd5bfe9cb1058f57629e5;;Jdeveloper;Project requires it;;2;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;5;It's a fixed project / company requirement;;;Oracle ADF;Hype: they told us it's the next big thing;;3;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;None;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Mexico
991ed98fb5e3145ce7c560a35d97b92e;Eclipse ;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"Java EE 8;Spring";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);20-49;9;Uzbekistan
9d2019c702bf98521a0ce6617c2043da;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin ;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;9;Argentina
4c3fdd6e6f3ff9e7ee85a6831868dad3;NetBeans;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;It's functionally superior;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;7;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Gradle;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;9;Spain
069f61c3e9608e91fbed88c44f970acf;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Microservice;openshift ";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);50-100;5;China
e7a0a1dfa84ef79f570bc84332af0a88;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;websocket;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Poland
f576cf2ad034f118e784956c00fef525;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;none;;no use for database;10;;;We don't even have ops;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;apache netbeans;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;France
ed7dc81158bcbff0419f83f6ccd106f1;Eclipse ;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;;internal;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Happier team;;We have professional perf engineers in the team;Performance directly affects our bottom line;;ee;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Czech Republic
2efb816d71f7d7bed02d2ebbb3e38034;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);3-9;16;Poland
31c1a5b7468ac7a89b9f7c6b6be9f723;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;MongoDB;;Developer friendliness;;8;;;We don't even have ops;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;java ee;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);1-2;1;Tanzania
cef03892e9fafae24cc08c6e7f8fa4bf;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;MySQL;;Familiarity: we know it the best;;10;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We don't care;We don't know how to properly address performance issues;;Blockchain;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;5;Tunisia
515c0c06b29f83d6f827ad48fac4f445;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"JavaEE;kotlin;docker;kubernetes";We're good, it feels productive, and we know how to move forward;Virtualization tools;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);1-2;15;United States of America (USA)
48f6656a4ed8f98b2cd6e3289b2ca977;Eclipse ;;Budget;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;JPMS;The tools are fine, the project is just too old;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;16;Spain
8e731d17cc3c0f07564d0e337acf3faf;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;React Native;We're good, it feels productive, and we know how to move forward;IDE;Director/VP/C-Level;;Midsized company (I work in an open plan office);20-49;17;United States of America (USA)
1619431336f5d008cdc7a33eeeffdf6f;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;It was an experiment;;9;;;Java EE;;;Due to standardization and affinity towards Java ecosystem :);9;;;Microservices;;Our application stack encourages it;;8;;;Couchbase;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;I want to use docker+Kub in prod. Though Kub irritated me till now. Websocket is next thing I am going to use. Angular 4. Worried about OAuth. Cognito vs Firebase vs self written.;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Startup (I work in a small cupboard at home);1-2;10;India
38153a862f09305210cca397eb753dbe;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Apache Meecrowave; ";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);100+;30;Austria
05cc9dc988ef85eb3a05806291d4e0b5;IntelliJ IDEA;;Project requires it;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Microservices;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
b76c0e1162ddcc22c4a7c194980b1f95;Eclipse ;;Project requires it;;5;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"GIT;";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;12;United States of America (USA)
5e73aaee978bd01df94206a523c5ae77;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;MS SQL;;It's strongly encouraged by our application stack choice;;10;;;Not interested, we like the wall where it is;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;France
be7cbeb9dea823ce9dd9662ec514895f;NetBeans;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;MicroProfile;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);10-19;20;United States of America (USA)
2102a6f81eb741d5ad9fc6472ab2228b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;9;;;SOA;;Our application stack encourages it;;6;;;Postgres;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Java 9;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;
b9cc6176ddcd252903c7c58dca7310a3;Eclipse ;;Project requires it;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Our application stack encourages it;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;15;
9e6bbe48da61047eb164045246f086ba;NetBeans;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Familiarity: we know it the best;;6;;;We don't even have ops;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"redash;deeplearning4j;tensorflow";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Japan
c3afc4c860d150b3fc0b55f9eab90764;NetBeans;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;6;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance tooling / experts are expensive;;JNativeHook;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;I'm actually out of work (How insensitive of you!);3-9;2;Egypt
d9cf1d9dfb34f0c13d84345c54274e60;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Happier team;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Java EE ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;
f9105e73326ae55fee44f46344f15c55;NetBeans;;Project requires it;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;;supportive guardian reza;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;reactive;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Canada
f60efca8cf7d622d8650e8fc12578d6e;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;
677e60934cf0a913e81c7910d3303b1a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Ops friendliness;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin ;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);10-19;31;United States of America (USA)
392de3c2168c34383df6ced75b6ced21;IntelliJ IDEA;;;Performance;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;;Estability and APIs like CDI and JaxRS;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;;It is part of out delivery pipeline in some applications;Docker, JavaEE8 and Java9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Brazil
7515abbf6b995036f4beb557f2666dc3;Eclipse ;;Budget;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Postgres;;Familiarity: we know it the best;;10;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Spring Cloud; Jenkins; Java 9; Reactive Programming; Java EE 8; Design Architecture";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;3;Uruguay
b8c290ee6082fe898ede01da81cfee7f;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;It was an experiment;;10;;;Spring ;;Familiarity: we know it the best;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Java 9,vaadin 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;3;India
51460c6e438942be76413737a2fb772a;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Company policy: all projects use it;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Better internal communication;;We don't care;Performance has never been a requirement;;Angular;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;
a57bb1c010663381e1f30067af3aaa25;Eclipse ;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;7;;;SOA;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB/2;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;We don't know how to properly address performance issues;;Java 9;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;United States of America (USA)
de0f009c8ca2fda386ada57476a80f73;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;MySQL;;Budget;;8;;;We are the DevOps ;Happier team;;We don't care;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;15;Colombia
812d1a8fa1b8e4a316600a1dcc252579;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;20;Australia
c73d60c498640ee1991340a51ce7496b;Eclipse ;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MS SQL;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Hazelcast;We're good, it feels productive, and we know how to move forward;Project architecture;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;14;Canada
d3470418742b4f74ced2ac5499af7849;Eclipse ;;Company policy;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;6;;;Java EE;;Familiarity: we know it the best;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 9;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;United States of America (USA)
4200b04d954c6fb5bb9b0af2a05468f4;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Company policy: we're a $LANG shop;;6;;;;Finagle, gRPC;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Cloud Spanner;It's strongly encouraged by our application stack choice;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;gRPC;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;United States of America (USA)
9bdd15017a9323d1662d726ab634ca42;Eclipse ;;Project requires it;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;;DB2;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Spring framework;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;18;India
539c1592245693bad44d6dcebc53e893;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Hadoop;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;Great Britain
8f088d3c8c25c0d6302965ad5281c083;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;8;;;Amazon RDS;;Ops friendliness;;7;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring boot;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
08aa32792209deea0b9be75574fee717;Eclipse ;;Company policy;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Our application stack encourages it;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Reactive;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;United States of America (USA)
42593c7bde97ba6a716dea14d8a64a09;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;It was an experiment;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Kotlin :);We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Poland
2d7d65f0a56a0bbc744dfcde9d9be678;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Ecosystem: community, tools, libraries;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Microservices;;Our application stack encourages it;;6;;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kubernettes;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;17;United States of America (USA)
c3dd5c78446740ff5ee360ba5ca3a64a;Eclipse ;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The team is large and inflexible;;Oracle DB;;Familiarity: we know it the best;;5;The price of the migration is enormous;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Vavr;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Sweden
b963fb691f1aa5bb0565ff798459f903;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MySQL;;Budget;;8;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Groovy; Gradle; Kotlin";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;25;United States of America (USA)
bea50c9def989726c105056f1434224e;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Docker;JavaEE8";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;India
e8cbe3357ed63d45374e6477d93d8845;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;Not interested, we like the wall where it is;;don't use devops;We react to the user complains;Performance has never been a requirement;;java ee;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;28;Australia
37b5819fd2b224b0920502dde3a6792f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;It was an experiment;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Gradle; Groovy; Geb; C++14;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
8cb7f523fce51d016f4d623643b9495e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Spring Boot Ecosystem ;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;10;Germany
07ef8b8a484fa431b2fde5df02c216ea;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Developer friendliness;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"nimbus-jose-jwt;oauth2-oidc-sdk";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Belgium
d2364f150d68f43939f74b7ac19dee49;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Groovy3;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;3;Ukraine
655058179c41efebfe1ac5446f4476d4;Eclipse ;;Budget;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;JaxRS;The tools are fine, the project is just too old;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;17;Italy
c5f499bf33f65c389496bcbf929b71c1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster resolution of problems;;We don't care;Performance directly affects our bottom line;;"Docker;Angular;React";I wish we've chosen a different set of technologies;Programming language;Architect;;Midsized company (I work in an open plan office);100+;20;Peru
6b7318bbf6ea9741d2fa54451273592a;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;10;;;SOA;;Our application stack encourages it;;6;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We don't care;We don't know how to properly address performance issues;;idea;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;17;Italy
c25aa43659a867d91127f18ab2aeb910;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;H2;Developer friendliness;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;JDK 9, JPMS;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;14;India
7c754199a563b60e57df80de14e958f0;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Netty:Reactor;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Finland
6281a8a7c6bddb805df3310e732ff604;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Spring Reactive;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Belgium
a549463e72bdc4a8251b7cf92f447761;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Vue.js;Dart;Ceylon;Apache DeltaSpike";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Poland
689665a82198f97555d72df740fdcaa7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Not part of repositories of installed ubuntu version;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Germany
24be4da8ac4dc159a1ae880cb4311635;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Spring Boot, Angular 4, React;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;1;Ukraine
7e9728dbf0c5f3270777c8236f19274c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Ops friendliness;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;RxJava;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Poland
9f1cb3943693e830da317e340d44fe34;Eclipse ;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;1;The price of the migration is enormous;;At least we talk to the Ops people;;We aren't going to adopt DevOps;We have professional perf engineers in the team;We don't know how to properly address performance issues;;Scala, Angular 2;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Italy
d03c94bd6a8fdbfa0060e661ca207f97;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);50-100;5;Germany
6f884291860dc6ab2792a5e2cc68d59c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;;we dont need no stack;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;None;;NONE;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);50-100;15;Germany
35f05782774829793adc6e2d422ef44d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Ops friendliness;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;docker;It feels unproductive, but the project is easy to maintain in production;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);3-9;7;Turkey
7ecadd0642a1320929e4e3b4cc6c5cc9;Eclipse ;;Project requires it;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;9;Morocco
f68e901f398d951e31f5513d7e4b53ac;;Visual Studio Code;;It is simple enough;8;;;JavaScript;;Ecosystem: community, tools, libraries;;10;;;;PHP;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;I don't know ;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);1-2;6;Germany
51a7c697b91ed6bb89b93f29ec2d933b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JRebel;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;3;Estonia
a92959898c86ede8a77cfeebf370dc5f;IntelliJ IDEA;;Functionality: it's superior;;7;;;;Python;Ecosystem: community, tools, libraries;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;LLVM;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;25;
c2308900ba840e303a75261a3655309f;IntelliJ IDEA;;Project requires it;;9;;;Java 8 (or newer);;It was an experiment;;7;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Our application stack encourages it;;8;;;MySQL;;Familiarity: we know it the best;;8;;;Not interested, we like the wall where it is;;iou;We react to the user complains;We don't know how to properly address performance issues;;uyiy;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;1;India
b58a8e35fd2d901eaca805081b24f481;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;None;;;;;;;;;;;;;;;;;;;;
fa8adfaac673d4c05dfe5f03867245e8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Vert.x;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Russian Federation
89b37138a15404389e7ebd59aeeeafa7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Company policy: all projects use it;;9;;;Postgres;;Developer friendliness;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;dropwizard;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Poland
43acaafd91a7310d3d871bc1595dbeec;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;5;We're tied to specific tooling for the platform;;Desktop app;;;desktop app;7;;;Postgres;;Familiarity: we know it the best;;10;;;We don't even have ops;;-;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;intellij;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Russian Federation
836bfd3a6e0f649885f5f8b8ea9e7416;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;5;;Don't want to moving away from microservices;Postgres;;;Free;10;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Docker;Liferay 7";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;14;Russian Federation
9a5684626d5788dd9f36a0c432a38351;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Budget;;10;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Streaming (spark and flink);We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Startup (I work in a small cupboard at home);10-19;15;Colombia
2b8038e6994bd08769628af5e3783276;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Russian Federation
5a25822a5c91b8a1729a8f46c6df91c6;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;in memory;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Ansible;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;12;France
5f7040d50778230fb32dab3a07216280;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;We are in the process of moving to microservices;Oracle DB;;Familiarity: we know it the best;;5;;We are in the process of migrating;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"spring boot;gradle;kanban;jenkins 2;mattermost bots";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;8;Germany
570bb4a202181046c0877392821c415b;Eclipse ;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;;DB2;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"WAS Liberty; XLdeploy";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);10-19;23;United States of America (USA)
5f789b5acbe122e0083ac560c0debb57;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;;It is the current version;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;;Clear separation of concerns + technologies;10;;;MySQL;;;Most widely used within the company;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Continuous Delivery;Jenkins BlueOcean;Ansible";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);1-2;13;Germany
a6c5e0945adbc97493578699fd730e32;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We don't care;Performance has never been a requirement;;Reactive Streams;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;14;Estonia
8cc130bab2138ff12d49aac58a61d8d6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Hype: they told us it's the next big thing;;10;;;Desktop app;;Suitability: it fits our requirements most effectively;;10;;;;None;;;;;;At least we talk to the Ops people;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"RxJava 2;";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);100+;10;France
a60633f9be8640ca2135d7deeebd3515;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;;Any available to JPA;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;23;Great Britain
000da6222e2914b8f3123700c50b0da6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;legacy, upgrade to Java 8 in a month;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Hashicorp Vault;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Poland
fbd19d37f83918bbcbead14c4792a688;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;3;It's a fixed project / company requirement;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;8;;;Postgres;;Developer friendliness;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Scala;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);20-49;8;Ukraine
2709bb6c2b5d2877964d9a1486c5c4c9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;;Because Standard > Framework.;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Developer friendliness;;6;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"JavaEE8;Kotlin;Wildfly-swarm;Gradle";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;France
da111b5923bd9abe236f03b044f54654;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;;Client requirement ;Spring boot;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;35;United States of America (USA)
39b0d3ff2810ffe8e20d6b12e60e603a;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;javaee;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);1-2;9;Italy
3955f04e63ed007b61ed687234f4e792;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Lagom;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Denmark
bc5c20cbe26945f1a43a5466a684b969;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Team skills: it was what we knew the best;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Midsized company (I work in an open plan office);10-19;18;United States of America (USA)
6e16aeb0d440fca19ee7de220d651ada;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Our application stack encourages it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin Coroutines;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);20-49;29;Russian Federation
a4a72710a403aab7ff4f7d9e51b5d2d1;Eclipse ;;Budget;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Angular 2;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;15;France
c476c128950ffff81a6c101dd17e10b1;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;liquibase;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);10-19;7;Russian Federation
950daef5fa896baec4c456e844f37754;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;reactjs,spring boot;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Belgium
6e7002cbcc962498baf9bc8cd51949af;NetBeans;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;It's functionally superior;;10;;;Library or framework;;Our application stack encourages it;;10;;;Postgres;;Familiarity: we know it the best;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Jeddict;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);10-19;5;India
8aeca88fc0f28ffa5b7ff327d1fdd762;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;SOA;;Familiarity: we have the skills and know we can make it work;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Happier team;;We don't care;We don't know how to properly address performance issues;;Deltaspike;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;9;India
fe72680bb45b4421fab28f39f1ead8b0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;SOA;;Suitability: it fits our requirements most effectively;;3;It's a fixed project / company requirement;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;Estonia
5b2c063a3bf9c103c9a5e7ec20d4de01;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Java 8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Spain
3ce5a43e4942fd395ba6c859700702eb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;MS SQL;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;;don`t use;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;9;Russian Federation
aeac9169c3e5b1be7211ea14f7e6d868;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;docker;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Italy
c5816edc5cb58ceeed615eb68efb7317;IntelliJ IDEA;;Company policy;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;.;The tools are fine, the project is just too old;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;4;Hungary
54c78b3eb9a9cc5dd89120542828ce34;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;6;;;SOA;;Suitability: it fits our requirements most effectively;;4;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Developer friendliness;;7;;;We don't even have ops;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"RabbitMQ;Docker;GitLab";It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Director/VP/C-Level;;Small company (I work in a shared office space or small office);10-19;12;Germany
685df14ff9aa692b8eb4770f407fd389;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;9;;;;Grails;It's functionally superior;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We don't care;Performance directly affects our bottom line;;Grails;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;14;Spain
35f09bd9970afcde8fb889d4ac654ac0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;MySQL;;Familiarity: we know it the best;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;kotlin;The tools are fine, the project is just too old;Programming language;Architect;;Midsized company (I work in an open plan office);50-100;20;Argentina
d423fc3c03b4ed9804fcb23df6c9f229;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;;Low latency fin tech;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;Disk persistence;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;flamegraphs, Shenandoah;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;United States of America (USA)
49d921fdf3ae730f452cbc3aad072c2e;Eclipse ;;Familiarity: it's what I know;;3;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Familiarity: we know it the best;;2;Not enough time / money to migrate the project though I know it'll be better;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Druid;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);10-19;10;Bhutan
d38277af63b84402d6f15e805c4bdd0b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;5;The price of the migration is enormous;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"elasticsearch;docker;";The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Greece
ad41ac4d94c97033577c78de2374693b;IntelliJ IDEA;;Functionality: it's superior;;9;;;;Go;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;It's strongly encouraged by our application stack choice;;6;;;We don't even have ops;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular 4;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Latvia
117db5c36ec5909d47cea9a72ab7aab8;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java EE; Swagger; Enunciate; Dredd; Jekyll;";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;5;Czech Republic
08ab8cf4ba83c7148f1b60d17c72bf2a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Our application stack encourages it;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;5;Poland
e1797b044387b2a6b8d93d4f2fe3c7a9;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;nothing;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;30;Germany
77fca9b41fb85ead29005bd1d1025d31;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Company policy: all projects use it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kotlin; Kubernetes; Docker;";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Russian Federation
72f11fa4fdde6caa37085a6203f7812d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;7;;;;Apache Wicket;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);100+;12;
63f2066ba36785e94ec684c1f1d9cda0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Midsized company (I work in an open plan office);1-2;2;Portugal
c636ff65a4b4c4828795282cf32f45ad;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;6;;;MySQL;;Budget;;3;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We don't care;Performance has never been a requirement;;"reactive;angular";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;13;Great Britain
e7939f29aecf44949bc336b1e0f89d14;Eclipse ;;Project requires it;;6;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 8;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;United States of America (USA)
546a3dc11f78be07d5cbcc7db9db4a1b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Familiarity: we know it the best;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Hibernate;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);3-9;13;Romania
869362f8978e4b40510efc63530aebee;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Hype: it was a modern approach;;1;The project kinda works, don't touch what's not completely broken;;MySQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Great Britain
c7962e6e512971474a1400faa42d02b5;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Version locked due to maintaining legacy Java EE 7 related libraries;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Our application stack encourages it;;9;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;Not interested, we like the wall where it is;;We don't do devops;We react to the user complains;Performance directly affects our bottom line;;"JSF;PrimeFaces;Portlets";We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Midsized company (I work in an open plan office);3-9;25;United States of America (USA)
95a086bfc81ed8538a5e875c13b1c81e;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Developer friendliness;;6;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;lambda;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;16;United States of America (USA)
ba680e6d397935a015d5c6f8c4f90c4c;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;;Web Application with Vaadin;;It's the best I know!;7;;;MySQL;;Developer friendliness;;8;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Vaadin;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Great Britain
25fd2af133c9c1978cd7ea6fb2c9a8b4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Ops friendliness;;3;The price of the migration is enormous;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Checkstyle;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Small company (I work in a shared office space or small office);3-9;19;Germany
dec1796fe96077bb1ce9457bf23fca8b;IntelliJ IDEA;;Functionality: it's superior;;8;;;JavaScript;;Team skills: it was what we knew the best;;4;Not enough time to migrate though I know it'll be better;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MongoDB;;Company policy: we have licenses already;;4;The price of the migration is enormous;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Scala;Typescript;GRPC;Rust";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;11;Russian Federation
e8120b599a5784888124bee2e8295e87;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;5;The price of the migration is enormous;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Netflix OSS;We're good, it feels productive, and we know how to move forward;Database;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;36;United States of America (USA)
b4ccb11013fa6ac91429de20a81e70df;IntelliJ IDEA;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;;No plan for adoption;We react to the user complains;Performance has never been a requirement;;x;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Switzerland
9ac124ee8c98e8c2c6ac3cd062f3120d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Developer friendliness;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;;Limited resources;Java EE 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;5;United States of America (USA)
a7e9f03ce36dfb4e9917337d62224dad;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;It's functionally superior;;10;;;Library or framework;;Our application stack encourages it;;9;;;MySQL;;Company policy: we have licenses already;;7;;;We are the DevOps ;Happier team;;We have professional perf engineers in the team;Performance directly affects our bottom line;;JSF 2.3;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;United States of America (USA)
18a951c844852f1fa651981b25b7b695;NetBeans;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Library or framework;;Our application stack encourages it;;7;;;;N/A;;N/A;10;;;We don't even have ops;;N/A;We react to the user complains;Performance has never been a requirement;;"Selenium;PrimeFaces";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;;Software Engineer;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;United States of America (USA)
f35d2ab990c46a754d03d67e0c10b3b8;Eclipse ;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Company policy: all projects use it;;5;The team is large and inflexible;;;Sybase ASE Server 12;Company policy: we have licenses already;;4;The data is too large to migrate;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;"VisualStudio Code;Node.js;Django";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Brazil
06b03ff72aa64806481094299a6eb2a1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;3;The team is large and inflexible;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;5;The team is large and inflexible;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;4;The price of the migration is enormous;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Kafka;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;1;Switzerland
70cef49e9d7a2ad05baf94c0b80f1809;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Budget;;8;;;The Dev team and the Ops team work together;Happier team;;We have professional perf engineers in the team;Performance directly affects our bottom line;;kotlin;The tools are fine, the project is just too old;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Greece
a534fd28400762ae1114c3475fcfbb39;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;5;Not enough time to migrate though I know it'll be better;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Our application stack encourages it;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Kotlin;Scala;Microservices";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;2;Estonia
96e8d6d306aaa8f53144144edcf62ba1;Eclipse ;;Project requires it;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Jrebel;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Romania
d0286958572b1cc984758a2f83b21f24;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;SOA;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Belgium
38cfffe13e6ede546d10d883a9254b8a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;"Java8; Mockito; TDD; ElasticSearch";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Cuba
3d35ad521ec01decf5838a9e6c36ea65;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Familiarity: we know it the best;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Spring;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;3;Russian Federation
20a10626d3a4f2a74a0056dadc2afdf7;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;1;Russian Federation
34cb8f6a712f0517592a57dcb685cc7f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Developer friendliness;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Spock;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;3;Ukraine
4c606cbd1d54d963ef2d1f4a13b1ce01;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Familiarity: we know it the best;;4;The team is large and inflexible;;Microservices;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Docker;I wish we've chosen a different set of technologies;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;1;Russian Federation
a1f6ef9f8218c0bfbab0ec1fb1be12fe;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;;Quite specific frameworks & tools (e.g. Apache nifi);Project requirements: it was the best fit for this particular project;;3;;It was kind of an experiment that showed the choice wasn't good, so we have some plans to migrate to something else;SOA;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;;We don't adopt it;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Data dog;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Great Britain
e71cf7ec7aebdb08e4b46253cb33dc9e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Budget;;5;;we're moving;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Spark;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Germany
5a3f624074b157d399f29a32462bfa2d;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;;Attempt to make a Spring-free project;7;;;Microservices;;Hype: it was a modern approach;;8;;;Postgres;;Budget;;9;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Plumbr;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;12;Estonia
87536b31019ec76cb1157ecb8800a0d6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Budget;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;cometD;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Slovak Republic (Slovakia)
6c37d930f91370920ef56919ecad69bd;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;;elasticsearch;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;apache kafka;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Russian Federation
303f416678ad4885f32cacafd718645f;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Microservices;;Our application stack encourages it;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Docker;We're good, it feels productive, and we know how to move forward;Database;Architect;;Contractor / Freelance (I work when, where and for whom I want!);10-19;17;Czech Republic
24652f62e934bdca7f61a73fe68ab8ce;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;ansible, chef, akka, mqtt, java 9;We're good, it feels productive, and we know how to move forward;Database;Architect;;Contractor / Freelance (I work when, where and for whom I want!);100+;12;Morocco
19d8ab9cb859688b8891c37fcc5fd835;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;15;Canada
f7eedf0c96bae5c69e094d60b1307dff;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Data virtualization;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);50-100;14;Brazil
030be10186166c24ec1c8f1cc1fea96a;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB/2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Angular 4;Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Singapore
1e46d42c7e3f694450f7a588d50c5a20;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;France
e9ccd95a426f7ea8bb40aeadc71e6297;Eclipse ;;Project requires it;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 8;It feels unproductive, but the project is easy to maintain in production;IDE;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;India
434a81f88cf4446e70724a8c50a771d6;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;6;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;AWS;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Mexico
6ee15c95ca2e6a1777f34f92ae7f1a58;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;WildFly Swarm;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Director/VP/C-Level;;Startup (I work in a small cupboard at home);1-2;15;Nigeria
47e14d9b60c05ca463bb38bec6a70f9a;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Developer friendliness;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;10;
abc0d55ceb8f0e331f7f4ea88ae655b9;Eclipse ;;Project requires it;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Happier team;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;France
84553226b68acdae4e3f2ac240b13326;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;15;United States of America (USA)
97bf0de5e7db43f432b21aaf519f9533;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;10;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Mexico
33d68b828f7c5aa5f0ac3c32dc3e4873;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Better internal communication;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"akka;neo4j";The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);10-19;5;Kazakhstan
5a7cd5cd1a9095b920fae4f3ae77fe73;NetBeans;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;MicroProfile;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;8;United States of America (USA)
3def67076045c459be9f322c34eb4a42;Eclipse ;;Budget;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;;No;;No need storage;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Lombok,controlsfx,Spring Boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;8;Malaysia
8d97e7eb407b899ba9efd7bf30a1c4cd;IntelliJ IDEA;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Java 8;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Canada
8435bcbab1613e6cc9546bd78abc9c47;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;React, Scala, Play!, Spring;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;6;Brazil
c70b6a8481b190bb2ed0ed7803ef2e36;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;9;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;
60257a29f8ec8c9744943d821fe2e3e8;Eclipse ;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Boot;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Great Britain
c4a83ed4f5070a3cbf4b604f9358625b;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Kubernetes;Nomad;Terraform";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United States of America (USA)
2ad10345b82365766c840816e9359863;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Java 8;I wish we've chosen a different set of technologies;Programming language;Architect;;Small company (I work in a shared office space or small office);3-9;15;Pakistan
80de373e5a911d7cea10841680bebf3e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Mesos;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Russian Federation
94734cca6803014895587845a00705eb;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;;atm we are not satisfied;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Lots of inner company technologies;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Russian Federation
5eed864acf861f7004ad85af2f2590c0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;;The application is rather small now;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Openshift; hazelcast";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;3;Russian Federation
fa35ebfd32ee6e41d6691ec7ea95d946;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Aerospike;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;n/a;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;8;Russian Federation
0726c18397da95c0388735df3a616e7c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Our application stack encourages it;;8;;;MySQL;;Developer friendliness;;5;;software lawyers do not help anyone;We are the DevOps ;;community needs it;Developers are equipped with profilers to monitor performance;;occasionally, performance is an issue;OSGi;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;20;United States of America (USA)
14925f47f3d3a6b59dd2761a6d870cf3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;10;;;;OSGi (Apachr Karaf);Project requirements: it was the best fit for this particular project;;4;;Tech lead passion;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;coroutines;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Russian Federation
bd0f8257d24ff4a23fd6905704718837;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Kotlin; F#; TypeScript; Fable; VSCode";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;7;Russian Federation
1c8fcd38c5aa7fb849577a44719c2b94;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;Functional superiority;;10;;;;Android;Project requirements: it was the best fit for this particular project;;7;;;;Mobile App;Company policy: all projects use it;;8;;;;sqlite;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;5;Russian Federation
4d2243391b5658fe4e283cc25d6cd985;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;java9;It feels unproductive, but the project is easy to maintain in production;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Russian Federation
dd302dfb7f79186518134775f36012bd;NetBeans;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"java-ee8;java-9;sonarqube";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Philippines
c2c54e12e44c8631b994dd759ba4a634;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Company policy: we're a $LANG shop;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;javaslang;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;8;Russian Federation
5cf55f418e6d201e7693230f51e01a69;NetBeans;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring boot;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;25;Great Britain
38ce4a6c59f64823abfc9e36eb8e08c1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;";";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;12;Russian Federation
da0737c278f8e659abe14116735dc9b6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;springboot;It's the worst, we barely move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;9;Russian Federation
270dfd82b749a33eb071d4d9aee2174a;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The team is large and inflexible;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Java 9;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;9;Belarus
a06221ec984da8bf968bfb5859e6a723;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;7;;;SOA;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 8;The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;11;Italy
aa0f924dd747c6c60ddc8e4467869069;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;;Customer requirement;2;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;-;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);1-2;4;Estonia
83a7f0613f777c07149fdc3573819bc5;IntelliJ IDEA;;Familiarity: it's what I know;;7;;;Clojure;;It was an experiment;;10;;;Spring ;;Familiarity: we know it the best;;8;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;10;;;MongoDB;;Familiarity: we know it the best;;10;;;We don't even have ops;;None ;We don't care;Performance has never been a requirement;;"Cursive;";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;I'm actually out of work (How insensitive of you!);1-2;2;Russian Federation
f0f4193299d9d77fcb265138f6220a50;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Spring 5; Java 9";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;1;Romania
68e2c9b7171ff30f33fb54d1e54fba9c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;8;;;Library or framework;;Our application stack encourages it;;8;;;Neo4J;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;;We don't use DevOps;We have professional perf engineers in the team;Performance directly affects our bottom line;;Neo4J;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;15;Germany
513e52d1951d3df36a5aae8235a03708;Eclipse ;;Functionality: it's superior;;9;;;JavaScript;;It was an experiment;;8;;;No stack, i.e. plain old Java;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;10;;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;i'm still thinking about it;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);1-2;2;Russian Federation
2e471a1a6362d63c7f52b132be08b8b6;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;7;;;;jboss seam;Hype: they told us it's the next big thing;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;migrating to javaee;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);1-2;17;New Zealand
38b66c4715ea11fd7f0d30e9668e12c9;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Developer friendliness;;6;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Spring Boot & PostgreSQL;We're good, it feels productive, and we know how to move forward;Application stack ;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);10-19;21;Malaysia
94d535b5087640dcfc5d4f836452f15e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;erlang;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;10;Russian Federation
09920cf36f9b3df6d5d03aa181679ced;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"React;Java 9;Kotlin";I wish we've chosen a different set of technologies;IDE;;System Analyst;Midsized company (I work in an open plan office);3-9;6;Brazil
6318e71aa26b1839b00980850ff30e67;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Amazon RDS;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);50-100;5;Australia
d21bc68dc348234c5f7b5b81e3128763;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;;Several projects from monolith - to small rest services;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Developer friendliness;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Latvia
ad78e2802474e22b552f0de25928e281;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Familiarity: we know it the best;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"JAVA EE8;";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;5;Brazil
ae4f9ed10ee39697696f5ea74f1d6878;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;;Don't practice it;We react to the user complains;Performance has never been a requirement;;Spring Boot;It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;United States of America (USA)
04eabb513291054bc36f645f6fb65ea1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Familiarity: we know it the best;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Spring Boot; Neo4J; Elasticsearch; MongoDB; Redis";It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Midsized company (I work in an open plan office);20-49;8;Brazil
26306fa37e279e39eac2703dbdcc1972;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;vert.x;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;5;Czech Republic
17ba45d3d2e715f4afbbb350eb6d33f0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Serverless;;Company policy: all projects use it;;9;;;;No database;;n/a;10;;;We don't even have ops;Happier team;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;javaslang;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;3;Poland
d7a8771529369d0b65c93632dd65be53;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Familiarity: we know it the best;;6;;;We don't even have ops;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;spring;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Startup (I work in a small cupboard at home);1-2;1;Ukraine
163da775800c2b3f87a7c8dc6024dc75;NetBeans;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;4;Not enough time to migrate though I know it'll be better;;;Struts;Company policy: we have other projects using the same stack;;2;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Company policy: all projects use it;;2;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;Happier team;;We react to the user complains;Performance tooling / experts are expensive;;AWS;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;United States of America (USA)
34b24dd4f84260cd864778df65e04d00;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Budget;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Scala;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);10-19;12;Estonia
cb9b1da030a34d560efeb281cc6e3c6b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;;Professor;Enterprise Company (I work in a cubicle or large open plan office);50-100;27;Germany
80da4253fd25af32793339d565609ec4;;STS;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;angularjs;We're good, it feels productive, and we know how to move forward;Virtualization tools;Management (People/Project);;Midsized company (I work in an open plan office);10-19;13;India
2b9219475fbf00412f92b4f0a57753cf;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Hype: it was a modern approach;;7;;;Postgres;;Developer friendliness;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;Spring Cloud;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;4;Russian Federation
ea18ea1339d3b2cbd66dcea46eaa8ffa;;ensime;Functionality: it's superior;;10;;;Scala;;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;5;It's a fixed project / company requirement;;Postgres;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"akka;flink;kubernetes";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;5;Czech Republic
0d471166037875a9b1afe5954e9b2b1c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;;STRUTS + Vaadin;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Vaadin v8.x, BitBucket;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Canada
4a7f20500d65589a5b187a15accbd343;Eclipse ;;Budget;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;1;The data is too large to migrate;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 8; REST";I wish we've chosen a different set of technologies;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Brazil
5fdd931111b749d12596633f0f657289;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;OpenJVM, Zing, YourKit;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;21;United States of America (USA)
c3a8e1700223c78e323c8a5efdc0b236;IntelliJ IDEA;;Company policy;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;;Multiple applications sharing common stuff;Legacy reasons: it was picked ages ago, must have made sense then;;3;;I was hired to refactor the project. This aspect is being improved too.;Oracle DB;;;Legacy. Moving to postgres next semester.;5;;We are moving away.;We are the DevOps ;Lowering complexity of the maintenance;;We have professional perf engineers in the team;;Been a performance engineer in a dedicated team for some years;Docker swarm;The tools are fine, the project is just too old;Project architecture;Consultant;;Small company (I work in a shared office space or small office);10-19;25;Belgium
22ac30d58a4a1b4d7d354b8384f2a9b5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Hadoop;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Brazil
2b55ecee98ff1ee9dca5114ac4c76be2;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We don't care;Performance has never been a requirement;;Angular;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
cbda037c8ec3c0b24724ffdf64eca265;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;
eeca2389d05254be6e204690eb1b3c30;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;3;It's a fixed project / company requirement;;MySQL;;It's strongly encouraged by our application stack choice;;6;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Kotlin;I wish we've chosen a different set of technologies;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Great Britain
873b4fb38e0591d3a3769ca9fbe889dc;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Gradle;Docker;AWS";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Great Britain
d99677ed97ac3c5944eed9647765f274;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;Not interested, we like the wall where it is;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"AWS; Apache Spark";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;15;Canada
59f265c4467bcfeae33f0b8aab37b0ba;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;30;France
4bd634a36a05aea0064ff5c58d0682c7;Eclipse ;;Company policy;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Postgres;;Familiarity: we know it the best;;10;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 9;It feels unproductive, but the project is easy to maintain in production;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Brazil
64d49fda019618fc44d8b60c889559f7;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Japan
934ef853f003b8ab1f47546233ebd525;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Company policy: we have licenses already;;9;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"AWS;Hadoop;Docker";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Brazil
1ab6fa41cac44f14dcd0c2d12013961a;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 8;It feels unproductive, but the project is easy to maintain in production;IDE;Software Developer;;Midsized company (I work in an open plan office);1-2;5;
7ca5e9a8a3c5b7e9811f58ea9df23497;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"RxJava;vert.x";The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;
b51f49a86e86a3d00dded01478445b6e;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;DB2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"Kotlin;Java 9";The tools are fine, the project is just too old;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;25;Russian Federation
130a055a8edce8e1c612933fb57a2b3e;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java EE 8;WildFly Swarm;MicroProfile";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Indonesia
5d958d25e990995bbbbaeef11203b235;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;spring roo;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;7;Malaysia
e47cdc05c8d9a3dbf5a9a5c33dbec164;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;;All older java are end of life;8;;;Java EE;;Hype: they told us it's the next big thing;;1;We're tied to specific tooling for the platform;;SOA;;Hype: it was a modern approach;;1;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;SparkJava;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;25;Sweden
f4c3af9857fbac549c95af02a84cd5a8;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;;it was here already when I joined;3;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We don't care;Performance directly affects our bottom line;;Kubernetes, Containers;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;India
5eb197dfef030a5c8c21302272fd4838;IntelliJ IDEA;;;GUI;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;10;;;SOA;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Budget;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Open shift;We're good, it feels productive, and we know how to move forward;Database;Architect;;Small company (I work in a shared office space or small office);3-9;10;Iran
f48f5b1ea4551b961e1f8ebb9d739f6f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;;java7 is officially deprecated;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;3;The project kinda works, don't touch what's not completely broken;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;"thymeleaf;spring scurity oauth2";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;7;Turkey
e37555f4068a66a0cdb27b9a02476cd7;Eclipse ;;Familiarity: it's what I know;;9;;;Java 7 (or older);;;Legacy project;8;;;Spring ;;It's functionally superior;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;spring boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;6;Czech Republic
9b2077253d7198c028b661b28634ac1e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;;n/a;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Java EE 7; JAX-RS 2.1; Apache Spark 2.x; AWS";The tools are fine, the project is just too old;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;9;Malta
e8a009f9841ca5c23a523ed72ae3a0cf;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Happier team;;We react to the user complains;Performance directly affects our bottom line;;reactive programming;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);10-19;7;Iran
2cde9f74ea8b8b0bc605c36eb9425312;Eclipse ;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Company policy: all projects use it;;7;;;;DB2;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 8, Angular;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Russian Federation
fdd9ed6e15af0a468005c19383745f31;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance has never been a requirement;;"Docker;OpenShift";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;United States of America (USA)
b79212b2a12542cd92bc0fe5ba077a27;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;;Legacy code;6;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;Budget;Oracle DB;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Java 9 REPL;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;8;Brazil
7f981f513034b6d03935f70ae6125139;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Custom in-house monstrocity;;Familiarity: we know it the best;;8;;;Monolith;;;Combination of legacy, familiarity and efficiency/effectiveness for a small team.;9;;;;Mainly DB2, but also a lot of even older stuff in Informix;;Legacy committment.  It's familiar and entrenched, but management increasingly hates the licensing for it..;6;;;We are the DevOps ;;If dev doesn't self-serve, it doesn't get done.  Ops has retreated mostly to the infrastructure realm.;We react to the user complains;;It's been good enough so far.;Hazelcast;The tools are fine, the project is just too old;Database;Software Developer;;Small company (I work in a shared office space or small office);1-2;19;United States of America (USA)
06959e9564f70c7006d9959332a0d257;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Java EE 8; Java 9";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);50-100;3;Spain
cad670cb0d08b54c8eb893263eed7253;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular 4, React;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;8;Colombia
a13dd01b8934fa4c5a80b2a8c453a918;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;;simpler to grasp;5;Not enough time to learn the new application stack;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;";";It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Estonia
21c181e0450d4acaa363d07d676c4b96;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Happier team;;We react to the user complains;Performance directly affects our bottom line;;MicroProfile;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Brazil
3df92b8ca1ffecd719175a414ba2876a;NetBeans;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;10;;;Monolith;;Company policy: all projects use it;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Docker;Kubernetes";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);10-19;20;Canada
1c31abf9a930c518ea8564b1e6945d0e;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Java 8;AWS";It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Japan
5bbaab6e6f7d5524f99691ebd593daf0;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Budget;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;"MongoDB;Kubernetes;Ansible";It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;16;Russian Federation
36f611fa1aa1f5283a32ad014e7551e0;Eclipse ;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;Russian Federation
6d562c2ebabb890e5ca28d770e50dafe;;JDeveloper;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;
790e495e62d70285f4c8cae807ce2f9b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Clojure;;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Machine learning ;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Russian Federation
1f919a05abd2c7dba8627fccd05b0ca1;IntelliJ IDEA;;Budget;;5;Not enough time to migrate though I know it'll be better;;Groovy;;Team skills: it was what we knew the best;;5;The team is large and inflexible;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Hype: it was a modern approach;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Couchbase;;Budget;;5;Everything else is worse;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;monko;I wish we've chosen a different set of technologies;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);100+;3;Pakistan
02daa5beb3a09f1811b01446b497e041;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;
67f8d3eb5c4eed9259f719c0490d1f72;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MS SQL;;Budget;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;reactive systems;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;India
bc3a487407a13b671cc8e5aed6be98c5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring Boot;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Switzerland
a2176d9dc1e40bdb904a983b1626398d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Kotlin;JRebel";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;4;Norway
978034297c01ffb39322bb352e7fe635;Eclipse ;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;;MariaDB;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;jShell and Eclipse January;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Estonia
2c982dc1657a9e676d69c569850909bd;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;;Small team;We react to the user complains;Performance tooling / experts are expensive;;ReactJS;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Startup (I work in a small cupboard at home);1-2;10;Czech Republic
929894111ddc99c3c4f26ce6dec573b0;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Jooq;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Germany
db9d589bfef93b45c1a82fc1ca8636a7;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Familiarity: we know it the best;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Apache Kafka, Apache Storm;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;5;Belarus
06284699b1af70c72c70c73858658c68;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;Oracle DB;;Familiarity: we know it the best;;6;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;"golang;docker";The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;10;
ebc6c11feb1b0feb07033428149af0d4;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;;NA;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Introscope;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;India
3075d185c43d785ac678a332745768db;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Tensorflow;It feels unproductive, but the project is easy to maintain in production;Project architecture;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;
aea057cab3423a828f05061be1b71ce8;Eclipse ;;Budget;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Familiarity: we know it the best;;6;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring 5 reactive support;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;7;Spain
31a408d846a9cc75d509bd0c9e5ba5da;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Mainframe & DB2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"CI;CD;build pipelines";The tools are fine, the project is just too old;I need more tools not changing the existing;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Belgium
9158952da23f7ebc1d54e638e2a78c15;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Elasticsearch;Suitability: it fits our architechture / requirements;;5;;We do.consider moving away;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Spring Webflux;React;Spring Cloud";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;12;Germany
bd2a5fa53f9405b505b5418fa3b01e77;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;MySQL;;Budget;;7;;;We don't even have ops;Faster delivery of features;;We don't care;Performance tooling / experts are expensive;;"angular;spring boot;";The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Korea, Republic of (South Korea)
dfec83e76456ddff9a70fee7db44af89;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Company policy: we have licenses already;;5;The data is too large to migrate;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Open Stack;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Spain
058b3d57bdfba4fb36c3b6275e1b54b6;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"SpringBoot;Kotlin;AngularJS";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;6;India
a50853739ad0c019087e7252b227dd6a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Jenkins 2;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;16;Luxembourg
0e4f34b17c2275d99bb316516668d4bb;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Ops friendliness;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;It feels unproductive, but the project is easy to maintain in production;Application stack ;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);3-9;20;Czech Republic
8692070cbdd442822f7c6594cd1e4b15;Eclipse ;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;;OSGi;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JBoss Fuse;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);3-9;13;Argentina
cb08cdf05cd38fa0cea65583397d2608;Eclipse ;;Project requires it;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;5;Not enough time to migrate though I know it'll be better;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Company policy: all projects use it;;1;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Kotlin; React";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);10-19;5;Brazil
019b1d81c1aa1dcb059148d6c7620cde;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;8;Czech Republic
a0676583156455ec9f835b736635c724;Eclipse ;;Budget;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;;Small team;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Spring boot;REST Assured;AssertJ;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Startup (I work in a small cupboard at home);3-9;13;Brazil
61b79c63495dda32be3492aa4e8f58f0;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;React Native;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;18;India
8ccae274a15b4025aeae0aaabd25058e;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Payara,OmniFaces,JavaEE8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;Netherlands
a3ac93d6b97ca947099bf5840491a2f1;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;;IBM DB2;Company policy: we have licenses already;;10;;;We are the DevOps ;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;MicroProfile;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;17;Canada
1eff8980cdf13a1e9d308ccf0d583ce5;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;GWT 1.8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;United States of America (USA)
3d010fc54cf460ce1fd790ed089cfd36;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;5;The team is large and inflexible;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;4;The price of the migration is enormous;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;";";The tools are fine, the project is just too old;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;15;United States of America (USA)
193903a270de5b4b4ef13c5e7c239f80;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;;Required by customer;1;It's a fixed project / company requirement;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Free time;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);3-9;7;Croatia
9127476ee2d0b8e710da91a4eaeacf94;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Familiarity: we have the skills and know we can make it work;;10;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Happier team;;We don't care;Performance has never been a requirement;;Blockchains;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Spain
0adac342d4ef82e99d2fe49fb764b033;Eclipse ;;Project requires it;;3;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Budget;;8;;;We are the DevOps ;;not enough people to separate;We react to the user complains;We don't know how to properly address performance issues;;"Angular2;javascript;typescript;npm;nodejs";It's the worst, we barely move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Uruguay
bc083456bd1cc0fc6308da6a37902d09;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;MySQL;;Developer friendliness;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"angular; gauge; ansible; docker; kubernetes";The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Hungary
0ccf2e4a361b8067de23e83a7d243c6d;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;5;Not enough time / money to migrate the project though I know it'll be better;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Redis;;Developer friendliness;;4;The price of the migration is enormous;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"scala;akka;kafka";It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Germany
cbb89a31a1583a9c34c366d5417e0cca;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;13;Germany
6e5c32f3a4da0d323d06cd14762247f6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Developer friendliness;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Belgium
9409171571e7155a1d6568b9c54e5dcf;IntelliJ IDEA;;Project requires it;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Budget;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;TypeScript;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Great Britain
16b931f7e53bcb94cac6e027ac95a8c4;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"AngularJS; Python; IntelliJ";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;Argentina
b5a096253d80f820416f6037a1f20199;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;3;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;Learning the ropes of a different architecture is too time-consuming / expensive;;;Oracle;;I don't know...;4;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;Spring Boot;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Germany
50dc9a7312b3469f9760116e7a04c78f;Eclipse ;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;BPMN;I wish we've chosen a different set of technologies;Project architecture;Architect;;Midsized company (I work in an open plan office);50-100;20;Canada
6cbb21a0f86af12a5b474a5033fd37d6;Eclipse ;;Project requires it;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;;Apache Felix;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Angular 2;Apache Felix;OSGi JAX-RS Whiteboard";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;19;Great Britain
32d31a3454767347d786379f3aaa0417;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;MySQL;;Suitability: it fits our architechture / requirements;;5;The data is too large to migrate;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;.;I wish we've chosen a different set of technologies;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;13;Ukraine
492cfeeb6941d995149de61a49aa8c27;IntelliJ IDEA;;Company policy;;5;It's a fixed project / company requirement;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;;gwt;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;;our work adds value to a NIST project;4;It's a fixed project / company requirement;;Postgres;;;boss chose it;8;;;Not interested, we like the wall where it is;;none;We react to the user complains;;our environment has low performance needs;FHIR;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;47;United States of America (USA)
bef5301c6c090a9232bfbc14c5512d0d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Spring Cloud Framework and Servcies;Spring 5.x;Spring 2.x";We're good, it feels productive, and we know how to move forward;Application stack ;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);100+;23;Canada
16d00a4efe82ecff8ab2d095410eb7c7;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Amazon Alexa, Amazon Lex (Basically some AI stuffs), voice commands prototypes;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);10-19;5;Netherlands
50a6ab6fb35080a7eb356cecc9a1f29a;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Spring;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;12;United States of America (USA)
2ceb5e443a36e969f68c95b64d0b34a0;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Stable operating environment;;We don't care;Performance directly affects our bottom line;;Not yet;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);3-9;2;Philippines
c43d6f8edacbd22272b1a1d7a3fed9dc;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Docker;WildFly";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;11;Brazil
f52417c2eaee55da725050d9730606ff;IntelliJ IDEA;;;Fashion;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Hype: they told us it's the next big thing;;5;The team is large and inflexible;;SOA;;Hype: it was a modern approach;;4;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Architect;;Contractor / Freelance (I work when, where and for whom I want!);50-100;12;France
d076d488dc92cace834c6bee3be1509c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We don't even have ops;;NA;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"spring boot; spring batch; react; redux";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Director/VP/C-Level;;Midsized company (I work in an open plan office);3-9;10;United States of America (USA)
cec45e816fcef7f6b2ceb81b7f4d48f9;IntelliJ IDEA;;Familiarity: it's what I know;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;5;It's a fixed project / company requirement;;Spring ;;Company policy: we have other projects using the same stack;;8;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;;None;We react to the user complains;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Greece
5a7c87c06e3dcfec33ba4987b40b93db;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Postgres;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;jenkins pipelines;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;300;Czech Republic
e0b59072dcdd2a9c825ac9408138a0ea;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Our application stack encourages it;;10;;;MS SQL;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;We don't even have ops;Faster resolution of problems;;We don't care;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Database;Architect;;Midsized company (I work in an open plan office);3-9;15;Brazil
d88046cd9e1e9ac8466446e073779eea;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;;Only option;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Kotlin; Apache Spark";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);1-2;19;United States of America (USA)
e9c0511f6c6579feecbf73c3b04cb06f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;angular 4;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Belgium
4467051a99fff645d4b9e587f5d429ce;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Serverless;;Hype: it was a modern approach;;4;It's a fixed project / company requirement;;;DynamoDB;Ops friendliness;;1;The price of the migration is enormous;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;I wish we've chosen a different set of technologies;Programming language;Team Lead;;Startup (I work in a small cupboard at home);10-19;21;Great Britain
d2609b67f09a1aa8e0bb794de9783ff3;Eclipse ;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Eclipse RCP;It's functionally superior;;10;;;Desktop app;;Our application stack encourages it;;10;;;;No database used;Developer friendliness;;10;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Meson build;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Bulgaria
2a1d6421cc649d026219eff1def20161;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
fe65240dd599f4bca821dca4622ef497;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Kotlin, Spring Boot, Docker;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Germany
2c016faec02aa42dac69e8bb3d892f03;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Desktop app;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;AWS;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Small company (I work in a shared office space or small office);10-19;3;Great Britain
7bf419601b1314a37647fa9c5b10c671;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;"Spring Boot; Maven; Git; Intellij IDEA ";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Russian Federation
b53d5c69331374e98d3c0d59d2074ce9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Serverless;;Suitability: it fits our requirements most effectively;;10;;;;no database at all;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Apache Spark with Hadoop;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Poland
45499e550a31aba037779d0a66781f29;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Better internal communication;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Spain
cd35c6dd73f78a7866b8cf11908b5e00;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Hopefully shifting to a new stack;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);3-9;25;Denmark
81aaf81e2ec755f42786cbf2bcf068b6;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;;Atlassian-SDK;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Our application stack encourages it;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;ReactJS, Java 8 lambdas;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Spain
5933078c8a84ee79f5755044776dbcec;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;MariaDB;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Spring 4, Angular 4;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;17;Germany
bc061874397493e8232c1e31d5231977;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;It was an experiment;;6;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Akka;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Great Britain
0e426ff84cbb00c9064f8bb69ef305e8;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Familiarity: we know it the best;;7;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Docker, Dropwizard Metrics;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Small company (I work in a shared office space or small office);3-9;7;Italy
eb2a28285271d297f1337c9614904bb3;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;;Vertica;;Scalability;9;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ReactiveSocket;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);10-19;4;Poland
d544ff309758113bcce95f805dab876e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Reactsjs;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Turkey
df097b90c0dbd18577e4c2a6c753546a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);3-9;4;Germany
c568c505069a33d1268e7ffc5a87a9c7;;VIM;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Budget;;7;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;gradle;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;United States of America (USA)
5e0ee9b1c2ac72d218383af345c25d40;Eclipse ;;Budget;;5;Not enough money in the budget;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Cloud computing Serverless;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);3-9;7;India
1612533cada4534e94a1a8c3a6da69e2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;;Historical application language;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Oracle DB;;;Reassure customers;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"vmware;github;gradle";The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);10-19;10;France
e94c24beae62015691acdc88a016d857;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;;MariaDB;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Docker;Spring 5 Project Reactor;Netty;Terraform;Ansible";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;12;Germany
1a727af1ab070c059aac497aa12be706;IntelliJ IDEA;;Functionality: it's superior;;8;;;JavaScript;;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Polymer;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;31;Netherlands
3d4cef4daa1e334779cdfd3320cccbda;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;;Legacy decision maintained for compatability;3;It's a fixed project / company requirement;;We don't even have ops;;Uh, from the previous answer, it should be seen that DevOps is not being adopted.;We react to the user complains;Performance has never been a requirement;;None. Sigh.;The tools are fine, the project is just too old;Database;Consultant;;Midsized company (I work in an open plan office);3-9;38;United States of America (USA)
52b7105aa40f2afb1a15ac7ce8733599;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Google Cloud;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;6;Finland
6ed06e3eefac3f2bc1baa15d3174a4e1;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Serverless ;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;14;Brazil
e4d4cdea2bed055e309e59286b7394a6;Eclipse ;;Familiarity: it's what I know;;4;Not enough time to learn the new IDE;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;It's functionally superior;;7;;;SOA;;Hype: it was a modern approach;;6;;;MS SQL;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;;I wish;We react to the user complains;;Very small team;Arsenic;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;United States of America (USA)
886e70d6fbef9fefdad2407e2cb01d87;Eclipse ;;Company policy;;1;It's a fixed project / company requirement;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;MySQL;;Budget;;5;The price of the migration is enormous;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Architect;;Small company (I work in a shared office space or small office);3-9;20;Germany
efb781ae40faf7ddbf82959bfdc509d5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MySQL;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Docker; Spring boot; Spring cloud";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;France
ca66c606774bf3b60f71c51ebda25d99;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Cloud;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;United States of America (USA)
8bebc3b3ba48358bdc75983ea94cd6b5;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Akka;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;7;Switzerland
c670be9b8a1f5fd042b6d24d33adfb32;Eclipse ;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;VAADIN;It feels unproductive, but the project is easy to maintain in production;Project architecture;Management (People/Project);;Midsized company (I work in an open plan office);50-100;15;Turkey
7aa858f74e39ab6ccf0d383bdf8a82bc;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Java9/Jigsaw;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;25;United States of America (USA)
1f3582a0c04680799f92819294c5e9e2;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Go;I wish we've chosen a different set of technologies;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);1-2;11;United States of America (USA)
27514f921ccf24143a50ca1410e044ec;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;microservices;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;20;Russian Federation
95f1d9968f2c906c8f10a8ad42cbe066;Eclipse ;;Project requires it;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;;legacy;3;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;spring, elasticsearch;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;
f2b01f30c81e3aebcc2bad1322d36798;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;SAP ASE;Familiarity: we know it the best;;9;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;vaadin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);10-19;30;Italy
29cfac8176a40f9c40185f6f9b408ef2;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"AngularJS2+;JRebel;Spring HATEOAS";The tools are fine, the project is just too old;Application stack ;Director/VP/C-Level;;Startup (I work in a small cupboard at home);3-9;14;Italy
8627627fefedb421ee4109efd0c7f8fa;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Budget;;8;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;PostgreSQL;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Director/VP/C-Level;;Midsized company (I work in an open plan office);3-9;22;Germany
00463f36259d8a61c72df5777fe8abf0;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;5;;Lack on architecture;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;SpringBoot,PivotalTC,Ruby,JHipster;I wish we've chosen a different set of technologies;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Argentina
d388753f57cab9bee5e56dac71d83cde;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Desktop app;;Our application stack encourages it;;8;;;Postgres;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We don't care;Performance directly affects our bottom line;;elasticsearch;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Director/VP/C-Level;;Startup (I work in a small cupboard at home);1-2;4;France
870767e6649dc7f38cb2399b90fbccb0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;It was an experiment;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;spring boot;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;United States of America (USA)
f7c268a0dd06801089b0ccdd9b28de66;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Spring;XRebel;JRebel;Spring Boot;IntelliJ";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;United States of America (USA)
c022f7402932aa39fda4f9f1ca251fe3;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Hype: they told us it's the next big thing;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;;NILL;Java 8 streams and functional API, ReactiveJava;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Startup (I work in a small cupboard at home);3-9;2;Nigeria
a95eaed154c322e4d4b4951768d00a22;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;;It is scientific framework, not a web application;9;;;;I do not use DB at all but intend to use Oak;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;;No ops there;Developers are equipped with profilers to monitor performance;;Project in development stage. Currently we address only critical performance issues.;Kotlin + tornadofx framework;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;5;Russian Federation
7199f6904ca20d90e4524385a9507fb6;IntelliJ IDEA;;Functionality: it's superior;;7;;;Clojure;;Functional superiority;;8;;;;Applications stack built around the clojure ecosystem;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Serverless Architectures;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Great Britain
75149b65528037511d46b0d346f91059;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;SOA;;Company policy: all projects use it;;7;;;Postgres;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);50-100;9;Spain
47b6dc5f70ae20c2023d36532d6e99db;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Germany
54479dda230f28c57098a5c0789dd185;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;It's strongly encouraged by our application stack choice;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Node.js;I wish we've chosen a different set of technologies;Application stack ;Architect;;Contractor / Freelance (I work when, where and for whom I want!);1-2;13;India
67a96523820fb6ae43f5e4feaae6ac06;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Our application stack encourages it;;7;;;;MarkLogic;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Spring;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
4c75fe685d3b12e918f6790d6b659bad;Eclipse ;;Company policy;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;It's functionally superior;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;elasticsearch;The tools are fine, the project is just too old;Project architecture;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;Croatia
8adfc70bd7e2dcbc53feb76307a3f387;Eclipse ;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Jenkins; Spring Boot; Google Material Design; Angular; Git";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);20-49;16;United States of America (USA)
0f3b5414a42c7b46cf079ded0052f4e2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;spring boot;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;9;Turkey
7b942a125d469d60e784cf4048d965fb;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;JDeferred;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);20-49;7;Poland
4cb01da6cda70b24f5154b105e2c1cc3;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;"reactive;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);10-19;20;Slovak Republic (Slovakia)
5d2f2ab8590f4b16a248b15500d2c7b8;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Company policy: we have other projects using the same stack;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;We don't care;Performance has never been a requirement;;Angular;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);3-9;35;United States of America (USA)
74249fb6bd61fca7f02e7c357462ae11;IntelliJ IDEA;;Project requires it;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"spring boot;react";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;1;Turkey
672c7c00e8d4a8a6e1e2a2f51512c757;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;;Grails;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;;We generally don't have performance issues;"ansible;webpack2;yarn;groovy";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Small company (I work in a shared office space or small office);3-9;17;Norway
ccb1c1f340cb18aa908e701bd259bf15;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;It's functionally superior;;5;We're tied to specific tooling for the platform;;Monolith;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Oracle DB;;It's strongly encouraged by our application stack choice;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;";";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Austria
3ef2d992849e0a24ed2de2bdeca47385;Eclipse ;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;It was an experiment;;5;Not enough time to learn the new language;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Budget;;1;Everything else is worse;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;active MQ, docker;It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;France
e0e9025be61b87a8751dcb9023b1aad4;Eclipse ;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;10;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;"functional programming; scala; clojure";We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Startup (I work in a small cupboard at home);1-2;10;Brazil
6902cfdb5b45ed7d649216bbf122a767;NetBeans;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Postgres;;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Spring;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Portugal
8dff29853deb7c03947903fbccbd73c7;NetBeans;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;3;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;;We don't have devops :(;We react to the user complains;Performance has never been a requirement;;";";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Sweden
d82dfb13996d88dee891dc0242e4704e;Eclipse ;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;;Guice + Guice Persist;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;DB2;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;Get good performance with less hardware;"Angular 2;JUnit 5;";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;30;Finland
bda79f1814a122d78b5e6475f8f2ff03;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;;Monolith and Microservices;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;WildFly Swarm;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;25;United States of America (USA)
6d09685b9ab182422f988af7100a81a4;Eclipse ;;Familiarity: it's what I know;;5;Not enough time to migrate though I know it'll be better;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Intellij Idea; Unit";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);50-100;10;Bolivia
0db35b0d65443db9b6c9495332d5cb61;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MS SQL;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"kotlin;spring boot;docker";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Belgium
0e8ffd351516ea2b7c23d6cc85991cf5;Eclipse ;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Groovy;Python";Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;2;Ecuador
042862fb0d73a8144acebee776e42cc7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Familiarity: we know it the best;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;7;;;We are the DevOps ;;Our team consists of 3 people, so we don't have separate dev from ops;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Eclipse MicroProfile;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;16;Bulgaria
c6c562e2773fd2cd3f4c9ab31ff9ce6f;Eclipse ;;Functionality: it's superior;;8;;;Java 7 (or older);;It was an experiment;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;AngularJs;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);20-49;7;Iran
62d290e859d933320dec915305a6ab4a;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Vertx;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;10;Serbia
1d4c932d2a32eb6f947becae129d27d5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Company policy: we have other projects using the same stack;;3;The team is large and inflexible;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Great Britain
580dbb18153f0b4efaf338d06785c1f5;;Rational Application Developer;Company policy;;1;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;;"Our business is satisfied with ""good enough"" performance";Angular 2, SASS, IntelliJ, JavaFX;I wish we've chosen a different set of technologies;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;United States of America (USA)
dbc6d5837c54a00f36831f80dc9b4012;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Serverless;I wish we've chosen a different set of technologies;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;10;Poland
5324803681eb40e6b0463a3d165d1a6e;IntelliJ IDEA;;Functionality: it's superior;;8;;;JavaScript;;Ecosystem: community, tools, libraries;;6;;;;Vue.js,Go,Node.js;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Go;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Startup (I work in a small cupboard at home);3-9;8;Germany
a712372fa04f825d887583e1e190daa7;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Brazil
05b282a8af0c657c2244e5c8cdd72765;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;United States of America (USA)
729b63ae12387598441af3e013bc0681;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Library or framework;;Our application stack encourages it;;7;;;;SAP HANA DB;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;HANA DB;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);20-49;13;Austria
de32cdefe188c1a975f39660edbaffe1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;5;The price of the migration is enormous;;We have a DevOps engineer;Faster delivery of features;;We don't care;Performance has never been a requirement;;Angular2;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Midsized company (I work in an open plan office);20-49;27;United States of America (USA)
e085ace7c8101b154616a366d429d24d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Go;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);3-9;17;United States of America (USA)
7fbacd81c734dbe81650cbf6df986edc;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;spring boot;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;9;Portugal
2332c306082d867b8c8ecbb863e9179a;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Sonarqube, very effective reporting of code quality; Java 8 new features, to make the best use of Java and new programming styles; Atlassian Crucible, to help code reviews";Typically, it's a lot of firefighting and bugfixing. Not much development.;Programming language;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);50-100;25;Great Britain
1bb19883a32fd6d319fdffc0c465732e;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;NetBeans API;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);50-100;7;United Arab Emirates
17b362c141d2154ed158842016b94f2d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;6;;;SOA;;Company policy: all projects use it;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Machine Learning;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;United States of America (USA)
357e6d00846323bece3a65fb528f7256;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Couchbase;;;Company wanted to try it;2;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Kotlin;Spring 5;RxJava";Typically, it's a lot of firefighting and bugfixing. Not much development.;Database;Architect;;Midsized company (I work in an open plan office);3-9;22;Spain
b5e34770ef7f3c577242d306eed2b63c;;Android Studio;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;;RxJava and Android Architecture Components;Project requirements: it was the best fit for this particular project;;8;;;;Mobile App;;Customers demand it;10;;;;SQLite;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;;You don't have classical ops with mobile apps (Google / Apple provide ops);Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Android Things;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;20;Germany
59c78f8e1d75f1fb44ac208af46456e0;NetBeans;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;;Tomcat, Struts, Tiles;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Budget;;7;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;none;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);1-2;20;United States of America (USA)
c2bd991346176c99dcda10cbddbf869c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Our application stack encourages it;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;Spark;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;9;France
c2cf460e203285de86857366290f883b;Eclipse ;;Company policy;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;4;It's a fixed project / company requirement;;Oracle DB;;;Choose by end customer;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Hystrix;";I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Italy
d59bfe0419186e688230d6941a493b62;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;ansible;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Poland
843e6503b78ad44232edaaa369a39533;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"spring boot;jaxrs";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Turkey
eebc12a63fa0f5ebc16993fe84f32c80;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Ops friendliness;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;;APM allows us to optimize what's needed when it's needed;JFrog Xray;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);50-100;16;United States of America (USA)
9d31cea6461c22e4fcbf394cb9446119;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Team skills: it was what we knew the best;;8;;;;Grails;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Node;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
fddb5e7330e87c765256e21f5d87c13b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;MySQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Spring boot;It's the worst, we barely move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;17;Great Britain
b0760cc5dcfa3211dc4d343b6c92348e;Eclipse ;;Company policy;;5;Not enough time to migrate though I know it'll be better;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;;DB2;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;28;United States of America (USA)
f28b895b839b01e593a1c60688dd90d8;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;6;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;"webpush;eia;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Greece
5aefb2ccc9d24dfb2382296d3ec72cbe;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;rxjava, jdeferred, grpc, javafx;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;20;Switzerland
6fbe30194a204a0f1d6f0a12e0d955a7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Budget;;7;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;docker;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Netherlands
99cc371b732e5c5e6afd1bdf2ce0da6b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;MySQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;ReactJS, More Javascript, Angular 2, Some front end, Android;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;India
cb7d3c2a6e6397167d7ce42a584577bc;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;Not interested, we like the wall where it is;Faster delivery of features;;We don't care;Performance has never been a requirement;;spring 5;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;13;Brazil
2e4adf15715ea27e5af238e79a4871cb;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Familiarity: we have the skills and know we can make it work;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;RxJava;We're good, it feels productive, and we know how to move forward;Project architecture;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;14;Canada
83716b7f7e8b14b83b015d9f52a7d49a;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin, Java EE 8;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Colombia
2bb7c38c1d68c68d0a0ca8eaa4177095;IntelliJ IDEA;;Functionality: it's superior;;8;;;;TypeScript;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;ReactiveX;We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Small company (I work in a shared office space or small office);20-49;12;Portugal
e9c3cb8a9041ba0e360a3107bc87c905;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"spring data; PostGIS";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Netherlands
e9de5181282381ccab4cb25c2e1bd808;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Developer friendliness;;7;;;We are the DevOps ;Happier team;;We react to the user complains;Performance has never been a requirement;;Kotlin ;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);20-49;6;Somalia
b0005bbfd210ce235729f4f1f8926268;Eclipse ;;Company policy;;8;;;;ABAP;Company policy: we're a $LANG shop;;6;;;;NetWeaver ABAP;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;;HANA;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Canada
18c80c8107725a2e0ee7efecd3ad05ff;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;10;;;MongoDB;;Developer friendliness;;9;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;"spring-boot;vaadin;";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;18;Cuba
de050fcefc2f4ff4a7747923612578ab;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;nope;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;Canada
d4ad82e527767529d92f1ff15e987a03;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Microservices;;Hype: it was a modern approach;;5;The project kinda works, don't touch what's not completely broken;;Neo4J;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Docker; npm; node";We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Netherlands
9429bd9c7915d651439b4cd755a08670;IntelliJ IDEA;;;want to try it out;8;;;Scala;;;Gatling Project;9;;;No stack, i.e. plain old Java;;;Gatling Framework;8;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;7;;;;InfluxDB Timeseries;Familiarity: we know it the best;;8;;;We are the DevOps ;Happier team;;We have professional perf engineers in the team;Performance directly affects our bottom line;;inspectIT;We're good, it feels productive, and we know how to move forward;Virtualization tools;;Performance Engineer;Midsized company (I work in an open plan office);3-9;10;Germany
75cbbb23f589215dc69da3df6eaa1fd2;Eclipse ;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;We're tied to specific tooling for the language;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;We're tied to specific tooling for the platform;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;;IBM Domino;It's strongly encouraged by our application stack choice;;6;;;We don't even have ops;;we do not have DevOps;We react to the user complains;Performance has never been a requirement;;Java 8;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;25;Czech Republic
9e39ebbb5961cc4e4452aa51555d42c4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;10;;;Postgres;;It's strongly encouraged by our application stack choice;;7;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Ratpack;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;5;Germany
2df02229c2bf303a1216b6ec9a7dd81f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Budget;;7;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance has never been a requirement;;...;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;18;Germany
0f369cdd0d8318c4937255153269a47c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);10-19;1;Ukraine
fe104922e42ae7b8d83f08c1b910145f;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Canada
dc026e4ac25bd8f7c31dfde6380bdd42;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;It was an experiment;;7;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The team is large and inflexible;;MS SQL;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Querydsl;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);20-49;17;Slovak Republic (Slovakia)
f6a58f4f987cc13e3d2dec37ff13a8cf;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"spring;spring-boot;docker;jenkins;maven";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Brazil
5b44f5f1ee24690882000890fe8078f0;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Happier team;;We react to the user complains;Performance has never been a requirement;;Spring boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;5;France
eab3642504b330f0527c3d1f323e4f41;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;Sybase;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Kotlin;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);20-49;14;Norway
218cc7ff039016cad8751431e911ddd9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;Custom in-house design;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kinesis/RedShift;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;38;United States of America (USA)
d8bc2b4bb7a4959718cf6b6d8726d573;Eclipse ;;Familiarity: it's what I know;;5;;Competitors have bugs as well, just different ones;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Small company (I work in a shared office space or small office);3-9;17;Germany
28a81c73ceec97306b8c2ab833e6c9f4;IntelliJ IDEA;;Company policy;;6;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;MySQL;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;We don't even have ops;Happier team;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Akka;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Iran
fa747b5415e9671ef4c318d505ef4d2b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"JDeferred;RX Java;Spring 5";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Startup (I work in a small cupboard at home);3-9;10;Romania
61f07f5abe3229c8d0daec4ba567ab47;Eclipse ;;Budget;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;Familiarity: we know it the best;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;Informix;;It is what was installed long before I came to work;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;odoo;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);1-2;22;Argentina
42563f1f92eb109f645700bdfac7fb24;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;ANGULAR;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Startup (I work in a small cupboard at home);1-2;12;Spain
64859411e228a89fba6e819c9256ab70;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;in-house high-speed in-memory;;performance;8;;;We are the DevOps ;;small team - we literally have no other chance than let devs do ops as well;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java 9; Unit 5; Mockito 2";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);20-49;25;Switzerland
a84c15b511057983c8355e93fe01a619;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);1-2;10;Turkey
952f79ee6fa225761eddce8cba035b30;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Hype: they told us it's the next big thing;;10;;;Microservices;;Hype: it was a modern approach;;10;;;Postgres;;Developer friendliness;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Czech Republic
c28a412df4082ab76c919bbf085595ed;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;7;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Scala;Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;6;Romania
111208d4cb028a7fcf0163904d05a982;IntelliJ IDEA;;;want to learn it;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB2;Suitability: it fits our architechture / requirements;;5;The price of the migration is enormous;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;Spring Boot;The tools are fine, the project is just too old;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;17;Switzerland
8f461d94819e4619fcb56c24c200df51;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Hype: it was a modern approach;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;;The architect (of the company ordering the product) doesn't care;Aurelia web framework - cleanest SPA code You've ever seen;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;8;Estonia
4396c5c878f8902ba9afa6b14b695ae0;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;;What is DevOps?  Kidding...;We react to the user complains;;Lack of staff.;Vaadin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;37;United States of America (USA)
07088347cc2dcda3fbe8187162e3320e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Kotlin; RxJava";The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);10-19;4;Brazil
c142fa7e2b801f98b6748dd9943e4053;IntelliJ IDEA;;;It's what the team uses;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;;none;;;;;;The Dev team and the Ops team work together;;Where is 'All of the above' in this list?;We benchmark or have performance tests to catch regressions;;Performance has never been a problem for us;The year is young...;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Management (People/Project);;Midsized company (I work in an open plan office);3-9;18;United States of America (USA)
7acfb98161220e1b5fbb887ec2384583;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;Faster delivery of features;;We don't care;Performance tooling / experts are expensive;;spring;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);100+;4;
660268c2deb01e4111091fecdb37ae51;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;9;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Kotlin; Java 9";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;United States of America (USA)
f9015d15fa90fe67c2c93ab415ce5bea;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Jenkins; docker; Selenium; arquilian";We're good, it feels productive, and we know how to move forward;Database;Architect;;Small company (I work in a shared office space or small office);1-2;6;Brazil
ce76996dc2019788d4f6c99ebd23a58b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Rxjava;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
99a0fa15e5b9dd1e241e653667d12f3c;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Sentry;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Poland
a60c7850d0e536bbbbc2aa4ed42ec960;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;9;;;MySQL;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;spring boot;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;16;Greece
8596246251cf1697acd32f31dd9e80e2;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;6;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Developer friendliness;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;laravel;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Small company (I work in a shared office space or small office);3-9;8;Syria
988b14ec01ae43dc2d197cb322eb6fbd;Eclipse ;;Project requires it;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Docker;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;10;Dominican Republic
c65e67ef3ae7969816bf9bf76725bace;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Neo4J;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;N/A;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Startup (I work in a small cupboard at home);3-9;10;Sweden
59317b6ae18b8990980e82b1b246baaa;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;"kotlin ; typescript";Typically, it's a lot of firefighting and bugfixing. Not much development.;Programming language;Software Developer;;Small company (I work in a shared office space or small office);50-100;9;Poland
6b5cbce6cba0e0da480b55348fcd49b6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;CQRS with custom read model and a log for persistence;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;None so far.;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Startup (I work in a small cupboard at home);3-9;18;Denmark
3a42ce38d3e335858fcf58180b21b80e;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Company policy: all projects use it;;3;It's a fixed project / company requirement;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;MongoDB;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;10;Ukraine
f62cfff289480e3304de848c4fe7c74d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Golang;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Italy
206666352683016400b6ca9479fd4465;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Familiarity: we know it the best;;9;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;3;Czech Republic
d153753803d0fad8acca6577039875c3;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Spring Boot;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Denmark
08092bdc5a35b927d2a3db39a1883a48;Eclipse ;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Spring Boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United States of America (USA)
21bdbf31164cb5de5612d7a5b78c1f4f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;MySQL;;Familiarity: we know it the best;;6;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Java 8;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Great Britain
b196d00a7cb796f28d92d6b576a062e9;Eclipse ;;Familiarity: it's what I know;;2;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;;Company policy: Java 7 not updated any more;10;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;;3 tier - server, (thick) client, db;Our application stack encourages it;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"docker;iot";It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;10;Poland
a17cf1bb166c88658c3283fb9d879324;Eclipse ;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;;It is not a issue;"Node JS;CouchDB;Arduino";We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);10-19;15;Australia
e07b2bede131c5b39128071567ea211a;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Java EE 8;We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);3-9;20;Sweden
ec109f90986c826ddc9d2837e9b772eb;Eclipse ;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;Postgres;;Budget;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Jenkins, SonarQube, Chef;It's the worst, we barely move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);100+;4;Jamaica
83a69baac77359c886eb7ea09b477975;Eclipse ;;Functionality: it's superior;;7;;;Java 8 (or newer);;It was an experiment;;7;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Python;We're good, it feels productive, and we know how to move forward;Application stack ;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);10-19;20;Poland
0b7f024dcef9fb97e4e0f7a020e79e6e;Eclipse ;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"elk;elasticsearch;machine learning";I wish we've chosen a different set of technologies;IDE;Architect;;Contractor / Freelance (I work when, where and for whom I want!);10-19;10;Luxembourg
77ff0e76f0bb93f817a72260e2317e10;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;;Legacy;7;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Boot;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Germany
b3bb16580f740621bf639efb92f99426;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MySQL;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"Docker Swarm; Spring Cloud";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);3-9;25;Germany
3d2476142a804eaf2bf68ac43e15e0a9;IntelliJ IDEA;;;It's what my team prefers;7;;;Kotlin;;It was an experiment;;7;;;No stack, i.e. plain old Java;;;Simplicity and control;8;;;Monolith;;;Simplicity;8;;;MongoDB;;Developer friendliness;;5;;Time constraints;We don't even have ops;;All of the above;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Clojure;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;12;Great Britain
17ad385564a78aae459f7609343069d6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;;Java EE is like Java even your oldest java ee app still runs on the new stuff.;8;;;Microservices;;Our application stack encourages it;;10;;;MySQL;;Budget;;7;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;;Our main product is too young. We are implementing best performance practices and we will wait until it actually becomes an issue.;"gradle; wildfly-swarm;java9;";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Startup (I work in a small cupboard at home);3-9;7;United States of America (USA)
6a5ccffebfce140859cc881b466d8364;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;;No DevOps planned;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"RxJava; Kotlin; Spring Boot";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;16;Switzerland
018a4c1b7ad372f73bb16848958c276a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;It was an experiment;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;9;;;We are the DevOps ;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;Kafka;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Estonia
0cc2a0a0e1a16de937747ff3fb149b31;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;It's functionally superior;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Scala;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Great Britain
5aceea285ee319fe57c882f3a9b6bf1a;Eclipse ;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);1-2;12;Switzerland
8c16675827787d091daacc6e2d700bab;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;;legacy;3;;we are moving away from it - slowly;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;we are slowly moving away from it;MySQL;;Familiarity: we know it the best;;5;The price of the migration is enormous;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"puppet;beaker;redis;aws";The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;16;Norway
fc3c9f175f6751758dca02a8febc1708;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Neo4J;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;sbt;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;Canada
be43cca3458a53c4a5486aa8a0a95a12;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Familiarity: we know it the best;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Hhhh;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;18;Germany
45e3e72afc5c7463ca792115f92ef7e3;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Our application stack encourages it;;10;;;Amazon RDS;;Ops friendliness;;10;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
5fe7249b2de92044bc81fc7a4af22f55;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Web server (jboss 7) requires it.;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Virtualization (apcera);I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Romania
96a007a2340d57cf828ed6abcd25c371;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;It's functionally superior;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;spring;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;11;Sweden
6d2b6c864813073d8d01bcbae2ffb858;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;Not interested, we like the wall where it is;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Spring;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;20;Italy
661459ab10fbc659c11f1e53de43b962;Eclipse ;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;10;;;;Amazon DynamoDB;;Tightly coupled, been there since beginning;8;;;We don't even have ops;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;"log4j2;java8;jfr;jersey2;s3;aws lambda;git;rdbms;slack;prodction mo";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);10-19;2;India
0a2531a1ca99ed97791a56b39ce956d5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;;Time to market;7;;;Postgres;;Budget;;7;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;New Relic;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Midsized company (I work in an open plan office);20-49;18;Ecuador
0f146183a14011e86a4547af67d7225d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;6;;;We have a DevOps engineer;Happier team;;We react to the user complains;Performance has never been a requirement;;LIquibase, Team City (CI), Bitbucket (Pull Requests), ;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;4;Estonia
ba9f1543f0fee1e16bbde094588dd15c;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Our application stack encourages it;;5;The project kinda works, don't touch what's not completely broken;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Docker;Spring 5, Akka";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;6;Czech Republic
9dc764b540d5d4d1055894aa1491afd1;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Docker;Angular;JEE7";It feels unproductive, but the project is easy to maintain in production;Programming language;Architect;;Midsized company (I work in an open plan office);50-100;10;Colombia
2ac03fb1f285057c5453dea1e4700676;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;6;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;SQLite;Suitability: it fits our architechture / requirements;;5;The price of the migration is enormous;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"c++17;Java8";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);10-19;10;Great Britain
c33d7831ac760c3bdcc57a3f3b5507d6;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;4;It's a fixed project / company requirement;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Kubernetes;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Bulgaria
9ad64f06d53b2cfa8324da4e39237ac0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;big data and cloud computing;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Turkey
b8b338429baf9d5eeccba5e3c60865f0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;microservices;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Startup (I work in a small cupboard at home);3-9;8;Canada
696938344c314c03a7f7d7b9e7592dcd;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;No stack, i.e. plain old Java;;;I'm building my own thing;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;Custom Persistence Layer;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin/Native;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;United States of America (USA)
74beb13a91073a614e354e70f5f9ef2b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Better internal communication;;We don't care;Performance directly affects our bottom line;;Spark, Hadoop, Kotlin, Scala, Camel ;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Germany
20e2537464c39123b1040dd81df3b7b6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Lombok;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;19;Netherlands
b7081fcd673778ef580b126486e867b1;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Cassandra;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"docker;python;pandas;scala;spark;java 9;ansible";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Australia
4d33cc05ad4f734ccc75a24bbde6b3dc;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;7;;;;Jooby;It's functionally superior;;9;;;Microservices;;Hype: it was a modern approach;;9;;;MySQL;;Developer friendliness;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;Jooby;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;17;Argentina
6e1082c17f757c18ca773eb0cbad3bf6;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Familiarity: we know it the best;;7;;;We don't even have ops;;Na;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;NodeJS;We're good, it feels productive, and we know how to move forward;Programming language;Consultant;;Small company (I work in a shared office space or small office);10-19;2;Lebanon
32ea8f8f15e3cb95b65ea94498f5a0f3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Happier team;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;WildFly Swarm;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;18;Italy
64a682f0f64ad5d6be1af4c79e283590;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;10;;;Postgres;;Developer friendliness;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin, Spring Cloud;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Turkey
eab778b70f7db30934a79010483ca69c;Eclipse ;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Budget;;8;;;We don't even have ops;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JHipster;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;France
d2f7dc4cb9105c8c423fa71933317602;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;6;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;AmazonWebServices;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;6;Russian Federation
b7d4d69e89c5b7e8a221b281fa49294a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;9;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Angular2;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Romania
b1b30e2cdb8212b1ba5efd386b4414ee;IntelliJ IDEA;;Functionality: it's superior;;7;;;Kotlin;;Functional superiority;;9;;;Java EE;;It's functionally superior;;8;;;Microservices;;Our application stack encourages it;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Docker; Kotlin; TestContainers";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;5;Estonia
c3f7cdc506dd5136830be4aac6624b8a;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Angular; Sonar; Wildly";We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Small company (I work in a shared office space or small office);20-49;30;South Africa
4c2a6d84a717d79091e58278f8e28f4c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Hype: they told us it's the next big thing;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Microservices; Containers; Kafka; Hadoop";I wish we've chosen a different set of technologies;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;13;Norway
8463706835b9b00fa28a680386a39f43;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Spain
6d8225fbdb9db0cccc776fbef32af813;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;java 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Startup (I work in a small cupboard at home);3-9;20;United States of America (USA)
3b71e568a606415bae358dc390226dde;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;MySQL;;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;angular;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;13;Great Britain
ef74e022c2f45678014b7f9556eb5d2c;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;We started making it a modular monolith as a first step ;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;;We're about to create a dedicated team for performance monitoring / improvements ;Apache Spark, Kafka, ELK Stack ;The tools are fine, the project is just too old;Project architecture;Architect;;Midsized company (I work in an open plan office);50-100;11;Belgium
66fde2f89eb3a5af2629c339db8fe74a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kubernetes;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
15a73971ad28cf9cd6c95783b4ad720d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;Not enough time to migrate though I know it'll be better;;Spring ;;Company policy: we have other projects using the same stack;;5;;No good alternative;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;;master-master replication;5;;no mature master-master replication in postgres;We don't even have ops;;N/A;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;React;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Netherlands
d9ab05812ccbf76372e85d91acfd6c1f;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Hype: it was a modern approach;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Symfony php;I wish we've chosen a different set of technologies;IDE;Software Developer;;Small company (I work in a shared office space or small office);50-100;14;Croatia
53716ccb6e7b70c5886afb13af7ca0d4;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Spring Boot;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;10;Great Britain
c990a1763744e880b8ef840b7d83b127;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Company policy: all projects use it;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;IntelliJ IDEA;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;United States of America (USA)
a7d8b7540b78057db2c63b7e46f3a1aa;Eclipse ;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Microservices;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;New Zealand
0db6a3dd6c21923daf45b3a6a67866d3;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Our application stack encourages it;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Belarus
bee8c90bd35fdc6cc8466bccaa3e4bec;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kafka;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;14;Lithuania
b9e25d2da3804256b7634ad93c797fdd;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;It's functionally superior;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;BerkeleyDB;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Quasar;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;Great Britain
47c549be620c282910f20eeb86e5b9d4;NetBeans;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;It was an experiment;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Developer friendliness;;10;;;Not interested, we like the wall where it is;Happier team;;We don't care;We don't know how to properly address performance issues;;can't remember;I wish we've chosen a different set of technologies;I need more tools not changing the existing;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);20-49;28;United States of America (USA)
c774af2bea12565fd6c344dee07805ac;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;;database managed by other system;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"react;angular;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;6;Brazil
f6dfedbe085e63ad4343d352630b160b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;Not enough time / money to migrate the project though I know it'll be better;;SOA;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;MS SQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Spring Boot;SQL Server 2016";Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Switzerland
a83b6f393ba54469f010bdd8794c7876;Eclipse ;;Familiarity: it's what I know;;6;;;;COBOL;Company policy: we're a $LANG shop;;4;Not enough time to migrate though I know it'll be better;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;3;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;;COBOL DATA FILES;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;We don't even have ops;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Spring;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Colombia
87b015cb107eac608b8108ef8459dd4a;Eclipse ;;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;SOA;;Company policy: all projects use it;;7;;;;DB2;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;United States of America (USA)
9d8cdbea029598ccc23e6938f80fca5b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Developer friendliness;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Reactive Streams;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Great Britain
f0a07a8eecfc15ffbe2478bd7c74f0b2;Eclipse ;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);10-19;16;Italy
37b9afbada4bb9d2c0186a0d1ca75759;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;;Distributed Replicated;Suitability: it fits our requirements most effectively;;8;;;;Prevayler;Suitability: it fits our architechture / requirements;;5;;Risk of data loss;The Dev team and the Ops team work together;;Easier Testing;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Websockets; ";We're good, it feels productive, and we know how to move forward;Database;Architect;;Midsized company (I work in an open plan office);10-19;15;Great Britain
7374ce77a6d8a1794a264f0d0035b9a9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Our application stack encourages it;;2;The project kinda works, don't touch what's not completely broken;;;custom in memory distributed datasets;It's strongly encouraged by our application stack choice;;3;The price of the migration is enormous;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;l;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;10;Great Britain
52c5cc2eb8718dd21ccff58b0b7f370c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;It was an experiment;;7;;;;Grails;Hype: they told us it's the next big thing;;4;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"React; Redux; Spring 5; Spring WebFlux; Reactive Streams; Kotlin";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;3;Croatia
4a6ba98cc3c7978ce6e4c5d40033ee51;Eclipse ;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;elide.io;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);10-19;12;Italy
7d31976273dfce2c2441695847f27fc4;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;SOA;;Company policy: all projects use it;;7;;;MySQL;;Budget;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ORACLE BPM;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;United States of America (USA)
8544a1fea6e7de545bec9fdcf9ae6f7d;Eclipse ;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;5;;Teams too small...;;Informix;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We don't even have ops;;...;We have professional perf engineers in the team;Performance has never been a requirement;;"Spring;Spring Boot;Angular 2;Wicket";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Germany
329a9ddb3d7ed607a146bb96652419f5;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Familiarity: we know it the best;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;elastic;I wish we've chosen a different set of technologies;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;24;Estonia
d80c438176eaceec1b9378e166dae947;Eclipse ;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;Whatever the client wants. ;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Na;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;3;Great Britain
7d209a7641ce6fa515cbb2e7eb6f061f;Eclipse ;;Budget;;2;;Company won't pay for it;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Using new Java 8 language features;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
f036d3b51e37709911ed4e214ecda78c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Custom in-house monstrocity;;;It was bad decision done long time ago, and now too expensive to replace massively.;2;;Owners, top management does not like If billing rate drops dramatically.;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;;Top management feels that no customer is willing to pay that.;;IBM DB2;;Legacy code and db2 specific procedures optimized for big customers.;2;The price of the migration is enormous;;We are the DevOps ;Happier team;;We react to the user complains;;Sometimes customers have exact performance requirements, then we do more to achieve that. But performance is not a value in our company.;"React;Typescript;Docker";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;11;Finland
d0fe7c2e01d79202749f089fdc6baf6a;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;MongoDb, HP Vertica.;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);10-19;10;Peru
beaa5f0a44dfd03d4291bbd925e531ab;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;conemu;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Russian Federation
365e57ba7ee95684b2ec3c4ac0efd234;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Hype: it was a modern approach;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;8;Poland
a87615e54cc7fe8b3cca6f265c038a0b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Company policy: all projects use it;;9;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;scala;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;1;Russian Federation
a0305e317007c368969d0bac255228d0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We don't care;Performance has never been a requirement;;junit 5;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Midsized company (I work in an open plan office);1-2;6;Russian Federation
09ce8c84b3dc7aeee7720efa8b549aa7;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring 5;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Romania
abf25757c317251c5c1c89bb0317b3d8;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;;D E F G;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;;Xrebel is not expensive but we need real floating licenses. We did not get it to work in environment with EJBS on different server than GUI. Is it even possible to see all the way through to the database in this case? If do we would appreciate a tutorial. Maybe you can provide docker image with example app for evaluation of this scenario.;Xrebel, wiremock.;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Germany
3657b6c53e192dce84d11c00481dee8e;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;JavaScript;;Company policy: we're a $LANG shop;;7;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;2;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;;host;;required by business domain;5;The data is too large to migrate;;We have a DevOps engineer;Happier team;;We react to the user complains;Performance has never been a requirement;;.Net;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;New Zealand
1ff5a0d912669a6cc8bbfbec337fe659;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;1;;shitload of legacy code written in .net/C#, Node.js and PHP;MS SQL;;;legacy;8;;;We are the DevOps ;;small team. Everybody does everything;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;nothing to be proud of;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;16;United States of America (USA)
e659f9988cb07400c6eadd7a1832bb6f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Akka streams, akka-http, Spark, Flink, Beam;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Small company (I work in a shared office space or small office);10-19;28;United States of America (USA)
af5889fec75b8ab1e90306d3dfd9f258;Eclipse ;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;;none;;;;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"Trace Modeler; Trace4J";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);1-2;20;Belgium
e99787ca7b70d21666a0380dd9852d81;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;It's functionally superior;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;QLRM;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);3-9;22;Switzerland
2235c2a1ef798718124c2dd38a45b84f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Hype: it was a modern approach;;9;;;MySQL;;It's strongly encouraged by our application stack choice;;10;;;We don't even have ops;Faster delivery of features;;We don't care;Performance directly affects our bottom line;;PrimeNG;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);1-2;7;Brazil
a06d75f7f5936bdf8d3970c1b7d12dd9;Eclipse ;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;angular 4;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Small company (I work in a shared office space or small office);3-9;15;Ecuador
8fba7949dcfedc1bd0b173af4ea3c43e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;Required for AWS Lambda;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Serverless;;Suitability: it fits our requirements most effectively;;7;;;;DynamoDB;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;GraphQL;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);10-19;6;Netherlands
4fdd0e9c798382bfd595a4801947da06;NetBeans;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;;None;;;;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;;Avoid premature optimization;"Jackson;Zulu";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);10-19;31;United States of America (USA)
4c747dee8d6a6034f296433ba847e4c3;Eclipse ;;Budget;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Hype: they told us it's the next big thing;;6;;;Microservices;;Hype: it was a modern approach;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"spring cloud;eureka";I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Midsized company (I work in an open plan office);10-19;8;Mauritius
bf2928f4938520414aa8f150a046cee0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;;Google Datastore;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;nothing;The tools are fine, the project is just too old;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;9;France
aeca6e6d167a32e8dae5cf0d1a3d30b7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Cassandra;;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"kubernetes; docker; prometheus; reactive";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Architect;;Small company (I work in a shared office space or small office);3-9;10;Germany
ae96585c547d4d6cc7dc0ca76eb2737e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;;Picked by previous developers;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Ansible;docker compose";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Sweden
97212d051bd4b9dbf5c68ba594e91bfb;Eclipse ;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;Not interested, we like the wall where it is;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;REST API;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;30;Poland
b9373829ed34b394b7bd98d0c0c836bf;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;;MariaDB;Budget;;8;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;16;Brazil
3b20f075356e5bc9c8a8e84171b950d2;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;java9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Great Britain
f8e8d038f04f8bae423db180a8331d22;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Gattling; kotlin; cucumber";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;
f187ec4dd0fb62ecb3dfe6abbc4e8b4c;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"Sonarqube;Maven;Gradle;Jenkins";The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);10-19;17;Germany
22d13b25249795e5564fd66eede1144a;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;;Requirement on project.;8;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;REST;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Great Britain
efb3fdad8dd216c11c429978b1e3210a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;graphQL;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Startup (I work in a small cupboard at home);3-9;25;Germany
125ffd2b7b8acf05b47ebcdf7a6cf18c;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;spring;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;Netherlands
cb468f6b012f540ba954904a77426c01;IntelliJ IDEA;;Familiarity: it's what I know;;5;Not enough time to migrate though I know it'll be better;;Scala;;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;9;;;Microservices;;Hype: it was a modern approach;;5;The team is large and inflexible;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We don't care;We don't know how to properly address performance issues;;Spark;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Great Britain
c80cc49fad4d9e9054c5bc3eeb03660a;Eclipse ;;Company policy;;3;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;3;It's a fixed project / company requirement;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;Oracle DB;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;reactjs;It's the worst, we barely move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;15;Hungary
ec74f64bd29b430a3d10fb28bffc296d;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;It was an experiment;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;SOA;;Company policy: all projects use it;;7;;;MySQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;Reactive Streams;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);10-19;5;Italy
089f0744a93f70ea8633d1d1ad7dfb3a;Eclipse ;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;;Monolith and split architecture;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Maven;I wish we've chosen a different set of technologies;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;16;Italy
bb4be4203f04136e6600a4f3e3a130c2;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;;No choice;We benchmark or have performance tests to catch regressions;;Time;kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);3-9;20;United States of America (USA)
fa380e26dcbbbed6d8fd729e387d1f46;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kafka;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Switzerland
f2c159e16d61d8e57015a2a0077fb227;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;10;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"RxJava 2.0; Visual Studio Code; H.265";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;;Software Engineer;Small company (I work in a shared office space or small office);3-9;22;United States of America (USA)
e11c5214955261107c1df7ecaea556a2;NetBeans;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Library or framework;;Company policy: all projects use it;;8;;;MS SQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"PrimeFaces;Our Application Framework;CDI";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Midsized company (I work in an open plan office);10-19;25;Turkey
2916099be262978ffaea976f655cdd35;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Akka; hazelcast; reactive streams";It's the worst, we barely move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;7;Estonia
a3aa0439da51e5331d2a9ef81fbd91e4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Spring Cloud;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Italy
60ddad68fe9e05cd0e84b9a59fa236a4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Json;It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;10;Lithuania
6f6146dee686adda0d7f40a782640f70;Eclipse ;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Small company (I work in a shared office space or small office);1-2;14;Estonia
0491a391391a9884745e89f20d47e8d2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;We're tied to specific tooling for the language;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;MySQL;;Ops friendliness;;8;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;20;Germany
ddc183f42232d3f16e8fab71bb1b6330;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;.;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;United States of America (USA)
c1fa3c72a011effdd512aa712710d2a8;Eclipse ;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;It was an experiment;;10;;;Java EE;;;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MongoDB;;Developer friendliness;;10;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;spring;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;I'm actually out of work (How insensitive of you!);10-19;1;Brazil
ecb68dcacb0528020a95aeef7e40ac2c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Our application stack encourages it;;2;It's a fixed project / company requirement;;;HANA;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Tensorflow; jhipster; Kubernetes; BDD-security";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;13;Ukraine
c780bc4a267bd255d76564effda14d9f;Eclipse ;;Budget;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"Kotlin;Wildfly Swarm";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);1-2;12;Germany
9dd92915bd5eeee2906ed91b0104d122;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Spring boot;Angular";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);3-9;10;Belgium
33ac6ec593ca0f993ebc5fa7906cf33d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Spring boot;vaadin";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;19;United States of America (USA)
9e96af228dfc00587b6255e9090fdea7;NetBeans;;;Supports latest Java and Java EE feature first;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;;Premature optimization is bad;Lombok;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);10-19;25;United States of America (USA)
49b67d76e00465022f1f950831d16462;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Debezium;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);10-19;25;Germany
687959009616a1e7f890a9545ef11ba3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;Best combination of ecosystem, functionality and simplicity for maximum productivity.;8;;;;Utterlyidle (I hate it);;It was created by the guy making the choice.;3;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Spring Boot;Prometheus;Grafana";I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Great Britain
9496730b7a6403c51ee0900437be4de3;Eclipse ;;Company policy;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Our application stack encourages it;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Better internal communication;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;Spring suite;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;
e90b963004fd7514060ac8e1f554de30;;RAD;Company policy;;5;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Severless web apps;It feels unproductive, but the project is easy to maintain in production;Project architecture;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;37;United States of America (USA)
f2c8355cf56a9df86a80039f23b3888f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;It was an experiment;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;No database;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JAXB;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
8ddf05869d4652f2a7e05f0b20a78311;IntelliJ IDEA;;;It's easier to use in some aspects as compared to Eclipse and uses less RAM (which was a real problem with Eclipse, it consumed 1.5gb ram from startup. Having only 8gb doesn't help);8;;;Java 8 (or newer);;;Being the main JVM language, it does not require any additional libraries.;8;;;No stack, i.e. plain old Java;;;No need to use a stack. If you can, disregard my vote on the next please.;6;;;Library or framework;;;It is a library designed for use in unit testing.;9;;;;None;;;;;;We don't even have ops;;Never heard of it, sorry.;We react to the user complains;;No issues occurred yet, and no knowledge in using profilers etc.;"Scala;Higher kinds";We're good, it feels productive, and we know how to move forward;Programming language;;Student and soon to be Software Dev;I'm actually out of work (How insensitive of you!);1-2;5;Switzerland
d93d3d3ee4c8e9ea24fe60c1ef818458;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;;Company said so;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;java 9;The tools are fine, the project is just too old;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;24;Great Britain
3495614fa7e2ca7f3e97f24a753244b4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;4;It's a fixed project / company requirement;;Monolith;;Our application stack encourages it;;2;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;spring boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Australia
a421969ee1384f75d1ecc9fe9732ec2d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;10;;;;akka;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;HBase;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;ML;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;15;Great Britain
96b2cdb27d2cb8af779c249d55b10e11;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;;We don't have strong perf needs, but do have access to good tools;Code pipeline;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;19;United States of America (USA)
da8e7ba24ea6f136491eee92d99e8efb;IntelliJ IDEA;;Project requires it;;8;;;Kotlin;;Ecosystem: community, tools, libraries;;9;;;;Multi platform stack, i.e. TornadoFX, Kotlinx.html, Vert.x, In-house lib/framework, etc;Project requirements: it was the best fit for this particular project;;9;;;;Multi Platform (mainly using a single language - e.g. Kotlin);;Flexibility: Be able to easily adapt to ongoing changes;8;;;MySQL;;Familiarity: we know it the best;;8;;;Not interested, we like the wall where it is;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"Kotlin;TornadoFX;Vert.x;Kotlin Native";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;6;New Zealand
7460dc47b83e134c0ed5f97764770af0;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Grafana;Scalyr";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Australia
08b4b2915cf35bf22a89b5fcab87090d;Eclipse ;;Familiarity: it's what I know;;1;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;It was an experiment;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Hype: it was a modern approach;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;api gateway;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;3;Singapore
e7ae71ac5690846d4c1dfb775b65d07b;Eclipse ;;Budget;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have professional perf engineers in the team;Performance tooling / experts are expensive;;Git;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;27;Australia
c2837416c3dfe046aaff4210cc8978aa;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Jenkins build pipeline;Grails;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;17;Canada
2952dffe7b8745d9892cbe9f776c1694;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;;it was decided before I entered.;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Argentina
1d627386cad52f2be6bf960f6ccb3187;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"gitlab;gitlab-runner;rancher;promethues;";I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);10-19;8;China
bc46897558ec7b231ea0b503123c6740;IntelliJ IDEA;;Company policy;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Java 9; Reactive programming;";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;7;India
144c3a1fec3f0d4dfdbe027c9089b971;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;microservices and Netflix OSS (Java);We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;19;United States of America (USA)
ccba05bc53fb61aaaa51ff601113307c;Eclipse ;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"springboot;angular;cdi 2.0";I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;United States of America (USA)
fa3f73bdbee49790d39a91d37af0d337;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;;I don't know;6;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Postgres;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"Linkerd;Kotlin";Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);20-49;20;Canada
32f575df2c4d1c5b7792c2ee7f4bbd94;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;10;India
2eefca2a76a2d54c4b358cd1382d1eee;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 8;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Brazil
0f06f9257e20226907fe51d33b8bc82a;Eclipse ;;Budget;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;React Native;It's the worst, we barely move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);1-2;12;New Zealand
1c0b5b7fdf437f88ed4d4963f4ad07eb;IntelliJ IDEA;;Company policy;;8;;;Java 7 (or older);;;Not updated to Java 8 yet;3;Not enough time to migrate though I know it'll be better;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Ops friendliness;;5;The data is too large to migrate;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Swift;Rx;React";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;France
421400c19bf7f5a2d72c42c94d1e2fda;Eclipse ;;Functionality: it's superior;;8;;;;AngularJS;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;We have a DevOps engineer;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;AngularJS, Bootstrap;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;India
0e0027f2c0bb63353f0acfa00e9449fe;NetBeans;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Budget;;8;;;At least we talk to the Ops people;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Docker; Kubernetes; OpenShift";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;France
f43c57b85a99c28816b801f354b29db9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Company policy: all projects use it;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;AWS Lambda;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;United States of America (USA)
e22f3897ba10155dcdac3cca9c6dfc4f;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;It was an experiment;;8;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;gradle, intellij, kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;Malaysia
12b422e770a884c255b245d9da7b2e32;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;DB2;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 8?;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Azerbaijan
008cb52ee5f5052c156a6f2b9bfdb541;Eclipse ;;Company policy;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Angular;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Indonesia
99bad17c392444f342096a017a4d6459;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;10;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;9;;;MySQL;;Developer friendliness;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;8;Thailand
dbea211f3c2dd95f5da72f8fc0fbf6e1;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"WildFly Swarm; Java EE 8";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Germany
9f8d093dccc2120f6e79bc79caa9b303;Eclipse ;;Budget;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;mongoDB;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;7;India
bf4afc23b05a7c5867db4238e50c2d78;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Budget;;10;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular 4;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Canada
cf3c1a263f97734037ed0da9e6774871;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Ops friendliness;;9;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;X We performance test before releases to catch regressions;Starting to use AngularJS 2/TypeScript on node.js w;It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;18;United States of America (USA)
2b58a71fd978302dc4bc7730dcc57778;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Russian Federation
ab53b29341cd5833e6385e1f64daca10;NetBeans;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;At least we talk to the Ops people;Faster delivery of features;;We don't care;Performance has never been a requirement;;MongoDB;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;10;United States of America (USA)
9ca19b19b53c173d1d21d0bdb1fca339;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;;We don't;We react to the user complains;Performance has never been a requirement;;Angular;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;10;United States of America (USA)
6c86c6e7e7b0d79e60d437a5522fae66;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;10;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Bangladesh
37fc489680ab1589305b0fdd8b9764cd;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;;Legacy code;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;Firebird;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;25;Bulgaria
c19b3ca822aa8789ca514b2bea158410;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Ops friendliness;;9;;;We have a DevOps engineer;Happier team;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Dont know;The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Brazil
59b6584e84359893a27051f923e8c918;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Stable operating environment;;We don't care;Performance directly affects our bottom line;;Spring Boot;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;7;Russian Federation
8dc27da7e6aa4b6948e9dd40e35caee2;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;2;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Developer friendliness;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Kotlin;Microservices ";The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);50-100;5;India
dad3cf26b16ab9bc9ff155da8384acbf;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Microservices Docker ;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;12;India
c9a222a53fbd97ce7a70cc7b8a352eac;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;8;;;Postgres;;Budget;;10;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Kotlin; Typescript; VSCODE";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);10-19;12;India
25e674a6903f968af0337d39b4c9d288;NetBeans;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Java EE;The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Indonesia
52e3aeae48dcf20852f28ca6f77ebb34;;Atom;Project requires it;;10;;;JavaScript;;Ecosystem: community, tools, libraries;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;It's strongly encouraged by our application stack choice;;10;;;We are the DevOps ;Faster delivery of features;;We don't care;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;20;Great Britain
749b0ffced1b13dc1b9f9da6a8673664;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Work on an Open source library, so for broadest compatibility with consumers;8;;;;Apache Isis;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Kotlin,Angular 2.0;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);3-9;28;Great Britain
5b53c34731352f5fcccf1b79218deb6b;Eclipse ;;Budget;;5;Not enough money in the budget;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;It's strongly encouraged by our application stack choice;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;AWS Beanstalk, Spring Boot, AngularJS;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);10-19;10;Thailand
15733d5541357e7662f2e89864291566;NetBeans;;;Simplicity;8;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;1;We're tied to specific tooling for the platform;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The project kinda works, don't touch what's not completely broken;;;C based trees that kinda work like a database;Suitability: it fits our architechture / requirements;;1;;It's tied into the etire application;We don't even have ops;Stable operating environment;;We react to the user complains;;Performance is not an issue in our application;MQTT;It's the worst, we barely move forward;Database;Consultant;;Small company (I work in a shared office space or small office);3-9;20;Netherlands
42f6caa0ce4c5b3cdd5dd706817b56ab;Eclipse ;;Budget;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Ionic 3;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Israel and the Occupied Territories
10bfe71f4f04c4ea719c45ee1cc53264;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;9;;;MySQL;;Ops friendliness;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;rx java;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);100+;2;India
66b2283038d9f734b83015f6e47c1b3f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Spring Boot; ElasticSearch; Docker; Looker;";We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Midsized company (I work in an open plan office);10-19;20;Australia
eea711ffd69f1ec5f9c9844f4584b35c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;FlexyPool;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);1-2;12;Romania
a26e7afd85128a9225507467e1b70768;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Familiarity: we know it the best;;4;It's a fixed project / company requirement;;Monolith;;Our application stack encourages it;;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;9;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Polymer;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Czech Republic
43ef84546f99d1c11a78780f4b64d355;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;;Osgi;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Hype: it was a modern approach;;8;;;;Db2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Apigee;Camel";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;Canada
d248d9693d41aa4a8f79c384cbef585b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;;Osgi;Project requirements: it was the best fit for this particular project;;7;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Russian Federation
20b809ae6ccd4db74f505acdcd4a2a9d;Eclipse ;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;SolidDB;;Legacy reasons;8;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);50-100;12;Finland
b6f3e6693c5986b2c5ffb15cb741c826;IntelliJ IDEA;;Functionality: it's superior;;4;;Its the best there is..;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;Db2;Company policy: we have licenses already;;1;The price of the migration is enormous;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;None;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;16;Belgium
9cb7f9f57e5e0cef0908454ff7c22e0f;Eclipse ;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Happier team;;We react to the user complains;Performance directly affects our bottom line;;"asciidoctor;typescript;angular;jenkins";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;7;Switzerland
dbfc4762721c55636a24fffe84f10314;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Docker;Jenkins;Azure";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Germany
c4573fcff9274c519cea3ba9ed6ecdf8;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Clojure;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);10-19;16;United States of America (USA)
570a6bd9b23edfeedf6a550079d57e05;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;Spark, kafka;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Turkey
9401efe576395f45c05fe4a23f73de97;NetBeans;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;6;;;We don't even have ops;;We do not have it;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Mexico
51847eab84f64ef759d5210c3106a3d5;NetBeans;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;;Java EE, MongoDb, Spark;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spark;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;28;United States of America (USA)
5964a9d18369916d772de7ef2c5daeec;Eclipse ;;Project requires it;;5;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;;Legacy;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;Philippines
2446a798028a24b472fcc4bd3686ec31;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Reactive Java;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;18;Lithuania
224c371ccdcdfeab97c61c7e64c8535e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Gradle;Groovy;Angular";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Romania
917b95bf8c5ddacfdd750302f43760c7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;microservices ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;12;Netherlands
797f57b90bf279107d755bc9c2096e30;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;5;Not enough time to learn the new application stack;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Deeplearning4j;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);3-9;15;France
ae8e117b396fde368f7d547097459e3c;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;It's functionally superior;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;aws xray;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Startup (I work in a small cupboard at home);1-2;20;United States of America (USA)
a41001f469a3e099f9c705e885fe844f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;;We use Google AppEngine;8;;;Custom in-house monstrocity;;;We use Google AppEngine;8;;;Serverless;;Suitability: it fits our requirements most effectively;;10;;;;Google Datastore;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;React;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;17;Australia
f093a2d22d8f618166a9c3b7a16a620d;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;None;;;;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Kotlin; Apache Flink";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;22;Germany
1561b7d08c3abf630393b874e3f6f8a2;Eclipse ;;Budget;;7;;;Java 7 (or older);;;Legacy JEE server;7;;;Java EE;;Hype: they told us it's the next big thing;;5;We're tied to specific tooling for the platform;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;Money and Time;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Happier team;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Docker;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;32;Great Britain
55e933dc2ec8be259a1b198788f153a0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Kotlin; RxJava; Microservices";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Poland
2264d5891479f2012e537fe40caa58fb;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;;Company with old mindset;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The team is large and inflexible;;MySQL;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We don't even have ops;Stable operating environment;;We don't care;Performance directly affects our bottom line;;Elasticsearch;It's the worst, we barely move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;7;Italy
0f0c27abeb4815e2fdf096cfd5af2da4;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Ops friendliness;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;React;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Spain
fe21c9bf728d8461cfeed4c70f850e44;Eclipse ;;Budget;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;Not enough time to learn the new language;;Spring ;;It's functionally superior;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;5;It's a fixed project / company requirement;;MySQL;;Budget;;8;;;We don't even have ops;Happier team;;We react to the user complains;Performance directly affects our bottom line;;angular, Node, React;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);50-100;2;Bangladesh
5bd9007223540cb16d819357fdcf5857;Eclipse ;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Our application stack encourages it;;4;It's a fixed project / company requirement;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Apache Karaf; Apache Camel; Apache Kafka";It feels unproductive, but the project is easy to maintain in production;Project architecture;Management (People/Project);;Midsized company (I work in an open plan office);20-49;20;Germany
fa4dd9e4fe4f9eb138f96ff0f5d65b83;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Reactor;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;25;Czech Republic
bb5138852a6060855c042ac8a72aff03;Eclipse ;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Serverless;;Suitability: it fits our requirements most effectively;;1;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We don't care;Performance directly affects our bottom line;;";";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Germany
48b3ecfe4ad13a3f97adf8a1f1984aea;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;6;;;Microservices;;Company policy: all projects use it;;6;;;;ElasticSearch;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Sweden
82ffdf63d9e28f693a3cf282a7d90141;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;reactive;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Small company (I work in a shared office space or small office);3-9;17;Switzerland
0101c50fc234d01d73fc8a227f3ed7dc;Eclipse ;;Familiarity: it's what I know;;7;;;Groovy;;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;camunda;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Italy
a825d4ec1332ccfc6e4dcf15ba6f69c1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Familiarity: we know it the best;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;lambda;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Small company (I work in a shared office space or small office);50-100;25;Belgium
7f5ca0cbe1c728930d8216d54bedee65;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Virtualization tools;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);50-100;15;Spain
11dce2c01d41d8e6b3fd211360b7a98d;Eclipse ;;Budget;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;AngularJS + Typescript, Java 8, IntelliJ, Jenkins, Gradle build;I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;India
94c7da2d9d30ba243bdc54563d1efc69;Eclipse ;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Our application stack encourages it;;3;;"The System / Framework ""SAP hybris"" requires it";MySQL;;Budget;;8;;;We don't even have ops;;No Budget for an separate Ops-Team;We react to the user complains;Performance tooling / experts are expensive;;Spring 5;I wish we've chosen a different set of technologies;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Germany
50a82cfa8b2254e4555cdb953d98802b;Eclipse ;;Budget;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;MS SQL;;Developer friendliness;;7;;;We don't even have ops;;We don't use it;We react to the user complains;Performance has never been a requirement;;Angular 2;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Spain
5ae445bce9bcdad041a17cc354591003;NetBeans;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Budget;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Visual Studio Code, ExtJS;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;23;Sweden
9440675ff6ba417fc29a6bef3df357c8;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;;Customers require long term support and security updates;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;;Customer requirements;7;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Automated multi branch build pipelines using docker, git and go.cd;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);50-100;13;Germany
da8523be09c2afd028151fbe74e7f7da;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;9;;;Microservices;;Company policy: all projects use it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kotlin; Spring Boot; Docker; Kubernetes";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Russian Federation
54f7d34563a8ccb0eb26cc2d718ff796;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Finagle;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;Poland
2c135bb55bd46ce82362a3e6e10bdd7d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;;At the time of that decision, it was on the top of our shortlist: the stack that provided us with most of the functionality we needed;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;;The ability to 'be in charge' of most of the operational matters, as a development team;We have APMs and monitor health of the deployments;;Performance is 'a' requirement, but no more important than any of the functional ones or the other non-functional ones;Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;Netherlands
a3b55241af71aa716ceb06d3786a4737;IntelliJ IDEA;;Project requires it;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;MySQL;;;I think was chosen ages ago. It must have made sense then. ;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Rust language, Reactor (Java), JUnit 5 (Jupiter),;I wish we've chosen a different set of technologies;Project architecture;Consultant;;Midsized company (I work in an open plan office);3-9;15;Estonia
a2dfab9fd4456c364310f278da32e44e;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;5;Not enough time to learn the new application stack;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;;Derby;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;;We do not have DevOPs;We react to the user complains;Performance has never been a requirement;;none;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;Switzerland
01895f28dcb1cf25c4940b2aeb85175f;Eclipse ;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;hybris;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Romania
b509aca386d7d062680a52b2398a723a;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Management (People/Project);;Startup (I work in a small cupboard at home);3-9;20;Spain
540135342893143e09d07534cdb73cd0;Eclipse ;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;;Db2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Microservices;It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Australia
455188642ba2d5f524261edbd8f94531;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kotlin; Kubernetes; Postgres";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Startup (I work in a small cupboard at home);3-9;15;United States of America (USA)
acc92347165291ba17ef7c14057e59dd;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;;Customer demand;7;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;n.a.;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);3-9;15;Netherlands
68bea818cc27adff941b75d7f6609267;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;all;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;7;Netherlands
32930791c13921854b64041dc6bdb341;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Ops friendliness;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;None;The tools are fine, the project is just too old;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);50-100;15;Serbia
acb858fb5cbc3be1a96bf8c2fbd28d9c;Eclipse ;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Jdk 9;We're good, it feels productive, and we know how to move forward;Database;Architect;;Midsized company (I work in an open plan office);3-9;7;Chile
0365df3368bcc83310a923969fd8e389;NetBeans;;Company policy;;5;Not enough money in the budget;;Java 8 (or newer);;Functional superiority;;5;;nothing;Java EE;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Angular;I wish we've chosen a different set of technologies;Application stack ;Architect;;Small company (I work in a shared office space or small office);3-9;10;Croatia
ba823062915909b1e7612ace4988cc9a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;;Legacy;6;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;jOOQ;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Switzerland
c2d506f2faa116718f60c8c54b903771;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Hype: they told us it's the next big thing;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Angular;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Spain
a449ae98a068dfad8ffe385baf753f36;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;10;;;Microservices;;Our application stack encourages it;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;;Not been much a problem so far;"Kotlin;Spring Webflux;Apache Spark";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Greece
fc683e4b8b3f5d88a2e95575a0b0da6d;Eclipse ;;Company policy;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Budget;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;none;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Italy
48d8abda0bcb90383f69cedaae5a1729;Eclipse ;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Company policy: we have other projects using the same stack;;10;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;We already started to move away.;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);3-9;11;Germany
c980f251adb0c6e0dcbfbdfedf238c52;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"AWS; Spring Cloud; Pact; ";The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;18;Norway
2f83f58736713048a87fa4dc264d0137;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;;DB2;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Angular;Vue.js";I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Australia
59b42bb0a58a2b34f1768764ae997348;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Developer friendliness;;7;;;We are the DevOps ;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;jClarity's Illuminate;We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Startup (I work in a small cupboard at home);3-9;20;Great Britain
a78906f61677cedf45dbba2b353102ce;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Developer friendliness;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Estonia
1afad915346632a26e5b3dd8b27c1fe6;Eclipse ;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Neo4J;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;;we do not have devops...;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"monitoring & analysis framework Kieker;P&F framework Teetime";We're good, it feels productive, and we know how to move forward;IDE;;Researcher;Small company (I work in a shared office space or small office);1-2;5;Germany
7dbb627e351d1e3d7949e482e8b39c14;Eclipse ;;Project requires it;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Library or framework;;Company policy: all projects use it;;8;;;MySQL;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;n/a;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Sweden
727e78b89a7485fc7b5f076b7d6add6f;Eclipse ;;Company policy;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Dynatrace;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;13;Belgium
67b80b930ffe1abc8be0513e4c533d19;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;;Legacy Project;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;"RxJava;AngularJS";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;Great Britain
956c1bb731dd272a979eba892f1ac69d;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Russian Federation
8d929a3b446d3be6f9c31f2fec9eec90;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;MySQL;;Budget;;10;;;Not interested, we like the wall where it is;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Hoping to move to Intellij;It feels unproductive, but the project is easy to maintain in production;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;13;Great Britain
ad4b4dc53735d2c840dee03b3b7a0ea9;;Visual Studio Code;;simple and effective;7;;;Groovy;;Functional superiority;;7;;;;Grails;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;7;;;MongoDB;;Ops friendliness;;7;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Elixir, Erlang, OCaml;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Italy
c889b6b77445f90c76391d500bb75daa;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Spring boot;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);3-9;13;Croatia
f0bed21d32a79d33abc24634e7beca53;IntelliJ IDEA;;Project requires it;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Sybase;Familiarity: we know it the best;;7;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;xx;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;35;
6f5dd7efef42875d956806264849d54f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;;We don't have DevOps;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Midsized company (I work in an open plan office);10-19;14;Bulgaria
cc88fa27d0386e4ff91c45675f562a22;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;AWS;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Sweden
745a3fb33370b93c55a94192d5816654;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Hype: they told us it's the next big thing;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Neo4J;;Suitability: it fits our architechture / requirements;;6;;;Not interested, we like the wall where it is;Happier team;;We don't care;Performance has never been a requirement;;javafx;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;21;Netherlands
728a928a63b37a4a6095a9e80d2cbfea;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Functional superiority;;8;;;;Eclipse RCP;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;None;;;;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Docker;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Sweden
8ef89344c95d05c720da35df3739098a;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Vuejs;We're good, it feels productive, and we know how to move forward;Virtualization tools;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;10;Romania
bff4b40d2c2b789ac47bcea92b395339;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;H2;Familiarity: we know it the best;;8;;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Google Protocol Buffers;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Startup (I work in a small cupboard at home);3-9;7;Belgium
d0d3fc7ea940d12f54439bc9398b870e;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Docker; Portworx; Apache Camel";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);20-49;12;Germany
1182105fe69b946a8d9364d9661c4b91;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Our application stack encourages it;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;Project Reactor;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Ukraine
c2184d2b54f5e65dc979e7717042854b;Eclipse ;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;serverless;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;India
70f3478bd30040037ffa6d0cacf34cfa;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;;Modularity;Suitability: it fits our requirements most effectively;;9;;;Postgres;;;Legacy;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;None;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;;Software eng. and release manager;Small company (I work in a shared office space or small office);3-9;3;Belgium
ac0ca02293ef9c77a5f02971ce4dca10;Eclipse ;;Budget;;5;Not enough money in the budget;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;java mission control, jrebel;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;India
48e3ffc63599c3f8aad02ba676686df0;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"microservices;docker;kubernetes";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Switzerland
dedf9ad895102131e8b04cfcc9f2d85d;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"speedment; vert.x; Spring Data JPA; Spring Data Gemfire; Hibernate Search";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;9;Jordan
16f9bcf1e2e4eae3ebb0ca1a9115887f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;17;Spain
cfd9bcb6659d28f5aa568a010f6c0a16;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;;legacy project;5;It's a fixed project / company requirement;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;kotlin;The tools are fine, the project is just too old;Virtualization tools;Architect;;Midsized company (I work in an open plan office);3-9;10;Russian Federation
bb51ee9779b68999988b5527d86e2ede;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Kotlin; Kinesis";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;19;Great Britain
ee0b7329f5f02086ad95425bcb511be4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;;Event sourced architecture;Suitability: it fits our requirements most effectively;;8;;;Neo4J;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;pitest;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Great Britain
57fddb7da1d05f791f6694927b680ae6;;Oracle JDeveloper;Project requires it;;3;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;;Oracle ADF;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Vaadin 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Greece
80ee51c0a07cb8fadec66a9ffc73537e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;8;;;;Grails;It's functionally superior;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;MySQL;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;We are the DevOps ;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Vue.js;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Spain
a1cb3dc160f436827747e280dee58964;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;No database;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;N/A;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;11;Sweden
30a1dbedd1268b03ed4d81bede49deb9;Eclipse IDE;;Familiarity: it's what I know;;5;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Familiarity: we know it the best;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"vertx;eureka;guice";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);20-49;4;Serbia
b51292267f58ea496af1881929f5f067;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;"vert.x; spring boot; jenkins; gitlab; git; sonarlint; angular 2; jwt";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Algeria
2d80a9931d43b15583abc194cc4de982;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Serverless;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;4;The data is too large to migrate;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Reactor;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);50-100;17;Spain
07ea4ff589ac67a037c73865b55b1fec;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;5;Not enough time to migrate though I know it'll be better;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;;DB2;Company policy: we have licenses already;;10;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Ruby;Ruby on Rails;";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Poland
b3b995ec67b0e9a29852df4b8cf56959;NetBeans IDE;;Familiarity: it's what I know;;5;Not enough time to migrate though I know it'll be better;;JavaScript;;Team skills: it was what we knew the best;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;5;;experimenting;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Angular4, TypeScript, Rust;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Germany
f913a48b64ffade0dafaf17cb607eb74;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;Great Britain
c3282c3f469c31c2b6de974ab53049ba;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;;inherited;6;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Hazelcast;Kafka;Angular4";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Great Britain
5ee21dc0ad1f4b55dd41299becb466b6;Eclipse IDE;;Company policy;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Budget;;10;;;We are the DevOps ;Happier team;;We react to the user complains;Performance directly affects our bottom line;;sorry, I have no answer to this question;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;14;Romania
32c036b2c4331a05f4456c70878fcf76;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Budget;;7;;;We are the DevOps ;Stable operating environment;;We don't care;Performance has never been a requirement;;Spring WebFlow;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;11;Senegal
831b595ac62b9e18c0702e1c631c6f99;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Hype: it was a modern approach;;7;;;Postgres;;Budget;;6;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Germany
315c4d77a1783b2a846402074ab42960;IntelliJ IDEA;;Project requires it;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;MS SQL;;Company policy: we have licenses already;;6;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Docker, OpenShift;We're good, it feels productive, and we know how to move forward;Application stack ;Operations;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;Denmark
1472b9ca7f6d97867ce2bb88e2e1c39a;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;;Go with the flow.;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;;It's a web application.;8;;;MS SQL;;;It's what the first customer wanted.;7;;;Not interested, we like the wall where it is;;We didn't.;We have APMs and monitor health of the deployments;;Performance is important;Possibly MongoDB in the future.;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);1-2;25;Netherlands
dbfecbe12b2447b807aba34be79ad5ec;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;It's functionally superior;;10;;;Monolith;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;9;;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;MS SQL server running in linux, I have to try it.;The tools are fine, the project is just too old;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;France
929f9a3ca173db89971a01564ae0ae39;IntelliJ IDEA;;Functionality: it's superior;;8;;;JavaScript;;It was an experiment;;8;;;Java EE;;;Portability;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Familiarity: we know it the best;;7;;;We don't even have ops;;We don't embrace DevOps culture :/;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Angular 4; Firebase";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Czech Republic
c23463a40d472c10910b30d97f094d2e;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We don't care;Performance directly affects our bottom line;;Spring;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;5;Ukraine
9f6a7368bd499aabe6f046dc46b197d8;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;;The Ops team won't talk to us.;We react to the user complains;Performance has never been a requirement;;Git;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Great Britain
8b4d703795da2ce91a7ab3992a2f5ec1;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;;Informix;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java EE;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);10-19;21;United States of America (USA)
0f408829875ce7c223c7ebb6d86af6ca;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;We are moving.. just slowly;;DB2;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Swift;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;United States of America (USA)
84a3c55cdbd14fcaa46bc3a9a3c6f16e;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;30;Italy
8ee2ae9cc8052011599815f1c400f15a;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;;Minimal requirement to appease our industrial partners and clients.;6;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;5;;We are not building web applications.;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;No database used;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Sirius,Plotly;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);20-49;8;Hungary
2d2f99c388733b558091d625f8db6a47;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;;Working with legacy systems;7;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;4;;Management and older developers/architects who have been around forever!;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;;Don't know;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Angular 4;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);20-49;5;South Africa
0f2c5c0472d7aa5c5c525e1276ff7c4f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Docker;Rancher;Kubernetes;Spring Boot;Spring 5;GitLab;Prometheus;Grafana;InfluxDB;gRPC;CockroachDB";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);3-9;5;Serbia
193e23eaed13437fb2dda5f306314603;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;DynamoDB;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"AWS;Java 9;Spring 5";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;16;United States of America (USA)
3e87f0e6bfa85cf7738c740f88e7f4b8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Oracle DB;;Familiarity: we know it the best;;9;;;We don't even have ops;;N/A;We react to the user complains;Performance has never been a requirement;;IntelliJ IDEA;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Slovak Republic (Slovakia)
a7cbd880fed02a588c5ae4e072ed33f4;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;3;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Ops friendliness;;7;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Spring boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Switzerland
64cfb5a4bde270f8eab437d745373b3b;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;7;;;;MariaDB;Budget;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Microprofile and Java EE 8 and Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;
073235c25b7bd6cc169ee4344250561b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;React;It's the worst, we barely move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Bosnia & Herzegovina
499e43d840212af741936973524c2a01;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Zap;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Midsized company (I work in an open plan office);10-19;15;New Zealand
1566312c5db7c9aec2e0fa1dbdc763f5;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Familiarity: we know it the best;;10;;;At least we talk to the Ops people;Faster delivery of features;;We don't care;Performance directly affects our bottom line;;angular 2;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;Brazil
feff86cbdc422cdc4047d83880b18cea;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Arquillian;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;17;United States of America (USA)
2005f322810d62d28fff34393217eae5;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;;GWT;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;;LDAP;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Gradle;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Midsized company (I work in an open plan office);10-19;10;Sweden
bd5897c1c99f00d51301b99667483107;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;;No time to update.;1;Not enough time to migrate though I know it'll be better;;;Struts2;It's functionally superior;;2;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;No time to migrate off of it.;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;;Again, time ...;"Spring Boot;Angular;TypeScript";It's the worst, we barely move forward;Application stack ;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;United States of America (USA)
cab9bc0f032e3db572a569de41ae3a2a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;grafana, kafka, openstack;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);50-100;18;India
d8f124d0d520547da56d5787b139cb92;Eclipse IDE;;Company policy;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;3;We're tied to specific tooling for the language;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;eclipse;I wish we've chosen a different set of technologies;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);50-100;3;Spain
e6d5a21bbcc517201eaf5f611375b426;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
96c91735875cd41b3773ed27199edc9f;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;jmeter;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;11;Ukraine
68bc1da5f88cb2118af27000ee57fcd4;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;;none;;;;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;groovy;We're good, it feels productive, and we know how to move forward;IDE;Team Lead;;Small company (I work in a shared office space or small office);1-2;40;United States of America (USA)
334fc234bceb92c96f8053310a282fab;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;cockroachdb;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);10-19;5;Serbia
c3bf9b4d1ec16bd242a1be24413461d1;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Clojure;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);10-19;17;Great Britain
7326d927e256e97bfba2120b367425e3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;5;Not enough time / money to migrate the project though I know it'll be better;;SOA;;Familiarity: we have the skills and know we can make it work;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;;datastore;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;play 2;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;5;France
648b3472b2ca60ce626085809744c298;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;;Customer choice;8;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;IntelliJ;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
68621bf9cc974965245539837df87df6;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;6;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;;Code cleaning/tests/Adjust if performance is poor;"Java 9;Docker;Docker swarm";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;France
78224903b4ee77ac7346f349be1c1a92;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"spring-boot;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;15;Hungary
a08c36b8077b32613e3bacf778d1c867;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Our application stack encourages it;;6;;;MongoDB;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Vaadin; Spring Boot;";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Thailand
ff687ff3d3103893ccd8969a5e9bfaeb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;;Backward compatibility( older versions was written in Java);9;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Spring Boot;Scala;RxJava2";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Ukraine
eb94ff3fbb2fd7181ec765883b091dbf;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance has never been a requirement;;scala;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Small company (I work in a shared office space or small office);3-9;30;United States of America (USA)
d92d2aed79b880bdce5a8f354d09b1a0;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Microservices;;Our application stack encourages it;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;spring boot;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Brazil
0e434bed24aa01e2021296559d8a01eb;NetBeans IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Angular;The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Argentina
7a99e3763f7ecdecd2311eb0c69b151b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);20-49;25;Germany
bf03a65583f7aec93b555edd48d7a776;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;China
357dd922cae71040118937db0719ed0f;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;The tools are fine, the project is just too old;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Hungary
a511020250d75f301e6ec3c36a718c6d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Familiarity: we know it the best;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Go;We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Switzerland
c6a6c0780d7af9fa1f8a2b2be9075407;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;33;United States of America (USA)
c9362a43da5e7fa9a3481f5a345f5f63;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Company policy: all projects use it;;6;;;;IBM DB2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;java 8;The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United States of America (USA)
cfc0d4ee31e1ad7e180d1948e9687853;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Developer friendliness;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;.;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Netherlands
db9c5f272bab4d72f16b73e5127b7abf;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;vert.x;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);10-19;3;Estonia
95c4ac3a6c2afd778488f1362e4d4da1;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;;swarm of portlets;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We don't even have ops;;dont know;We don't care;Performance has never been a requirement;;"reactJS; angular4;";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;12;Ukraine
8c7ccfe5dd649a991061fbb043314a71;Eclipse ;;Familiarity: it's what I know;;7;;;Java 7 (or older);;;Old project;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;-;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Finland
5932bd36bcc076186a6d371c492b01d4;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Our application stack encourages it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;JavaEE 7;I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Luxembourg
82175dadaf149ce1da327552541110ce;Eclipse ;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kotlin;Google Functions;AWS Lambda;";The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Mexico
81df240d2bce1deb80210772036bb698;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Spring Boot;I wish we've chosen a different set of technologies;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);20-49;18;Netherlands
4ef615a0c21f1e97504ce930725b0c3c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;HBase;It's strongly encouraged by our application stack choice;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"spark;scala";Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Great Britain
188a46392d9e3c47cfb95520abd0edf0;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;;No DevOps;We don't care;Performance has never been a requirement;;"Jeddict; reactive programing java ee; adminfaces";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;10;Sudan
7f6c8c3da3eb458aecfaa5b72c7d1e91;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;5;The team is large and inflexible;;Library or framework;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;docker;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;United States of America (USA)
ab546d5c6b6f170ab2767ee1f02d8522;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Company policy: all projects use it;;8;;;MySQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Javaee 8, Java 9 and Microprofile;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;Australia
a146b8d2db4439626cf5d888ea2e65eb;Eclipse IDE;;Project requires it;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Docker, Jenkins, Java 9;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;8;Brazil
57164675fa182e4ea3a458fadc89c893;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;MS SQL;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Docker;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;United States of America (USA)
a02e3de1cfd0903ce1c1adb2d395c55c;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;It was an experiment;;7;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Microservices;;Company policy: all projects use it;;6;;;Couchbase;;Suitability: it fits our architechture / requirements;;5;The price of the migration is enormous;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"APPD;splunk;runscope;couchbase;java";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;India
a78bbbcf0572676eed649b0742560a45;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Hype: it was a modern approach;;6;;;Cassandra;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Spring Boot;Spring Cloud;jOOQ";The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Russian Federation
e09168c9f10ddd0c5e8376ea6aeba1fa;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Cassandra;;Suitability: it fits our architechture / requirements;;5;Everything else is worse;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;micorservices;The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;35;Canada
85873bcb95fe36b57801536648755ce9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;It's functionally superior;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Russian Federation
c3230fd6d7004134991153ce44f29a44;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Spring MVC;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Midsized company (I work in an open plan office);3-9;6;United States of America (USA)
8ec0b0ade45679d9eb1069902f864d76;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Elasticsearch;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;;Try to improve when needed;"Kotlin; vavr";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Norway
22285a9269ab4e82f7e00ad9284601a2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;kotlin;The tools are fine, the project is just too old;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);10-19;3;Nigeria
5050f3c990b9acb904d082c126ca31f2;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Familiarity: we know it the best;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;CouchDB;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Istio;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;United States of America (USA)
b9c0e4aae2317fac5aed038f495bf112;Eclipse IDE;;Company policy;;5;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;SOA;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Dynatrace; YourKit; IntelliJ; Oracle 12c;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);20-49;7;Germany
5ec299730c2e69acdad43c625b6da09b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;not any specific tool, interested in all performance monitoring tools;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;7;India
7aceff37b6aeb3fecf5fd00e2693e146;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Can't think of anyhting;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Canada
d33bca41ca230cc0e9d803b21aa11429;Eclipse IDE;;Familiarity: it's what I know;;9;;;Scala;;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;None;;;;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Scala/Spark;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;16;United States of America (USA)
c8b356a772bd736460f55d7eef14acc6;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;It's functionally superior;;7;;;SOA;;Our application stack encourages it;;6;;;Oracle DB;;Developer friendliness;;7;;;We have a DevOps engineer;Happier team;;We don't care;Performance has never been a requirement;;a;I wish we've chosen a different set of technologies;IDE;Developer Advocate/Technical Evangelist;;Startup (I work in a small cupboard at home);10-19;2;Brazil
81f3d1de1568d5fa452a4cc366cf5368;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;;DB2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;OpenShift;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Netherlands
5f8763e308651bc65108e5d8f5af9f24;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Better internal communication;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;1;Brazil
600031da876906ed0d94c4365c4481c2;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;Virtualization tools;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);20-49;8;Colombia
c46b24f75dda0d8389ce7c3c1c18da1a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;JDK9,Kotlin,Spring 5,Akka;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;4;Serbia
27a49d05e24d1917d9aa71e0b53879af;NetBeans IDE;;Budget;;5;Not enough money in the budget;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Java 9;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;1;Romania
ecf002b2e43c9e93b61fbc36c560e18c;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;;Performance requirements of our customers are satisfied;GitLab, IntellJ IDEA Ultimate;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;Germany
7b57a91d2ad6881344f73bda2a66ea0b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;5;The team is large and inflexible;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Monolith;;Our application stack encourages it;;1;The team is large and inflexible;;Cassandra;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;,;It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Germany
b81f07c31f20b8acacc00de7b2c584ca;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;9;;;We are the DevOps ;Better internal communication;;We benchmark or have performance tests to catch regressions;;We're doing great;"Hibernate ORM 5; JBoss Modules; Java 9";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Great Britain
ecbf900c044a54b7c43210e08c244887;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;;Filesystem;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;;Management is pushing half harsed DevOps;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;10;France
4c3c3389b8c904768f9bff950779df68;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Serverless;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Budget;;10;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;AWS plugin;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;3;India
06d95eda2c84669398348f2aed3b0bf0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;;customer requirement;5;;it's a customer requirement;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Angular (4);We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
0815fdcbbfac4c3b40d03acbe6fb43f7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;;Lots of our customers still use Java 7 or older.;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;None;;;;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;AWS Lambda, Pivotal Cloud Foundry, Docker;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);50-100;9;Turkey
b0f28ed587e7dd6345c93ee5d851cc86;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;Android ;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"React.js; Aurelia";It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Germany
f12af3bee3788380fff70d39bf75004f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;H2;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;None right now;The tools are fine, the project is just too old;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;10;Argentina
43de61c684f62136832a80e8de9896b5;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Our application stack encourages it;;6;;;;DB2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Docker;The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
8b71450faef89064ae283e29de8b393d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Company policy: all projects use it;;7;;;MySQL;;Developer friendliness;;9;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Swagger;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Ukraine
7dd6ebed6516221ab7811dbc65ed5535;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"MicroProfile;Java EE 8; Vert.x; JCache";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Czech Republic
9deff3882b2b4b0f3cf87b11e40327e3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;Familiarity: we know it the best;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);1-2;15;France
6adfe6303d8cbf02fc4588df95153eba;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;H2;Developer friendliness;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;iText 7;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);1-2;15;United States of America (USA)
4dd34afa4d28d2c3fec6ef54d5870d00;NetBeans IDE;;Budget;;6;;;Java 7 (or older);;;Had no time to learn Java 8 yet;5;Not enough time to learn the new language;;No stack, i.e. plain old Java;;;I write only pet projects, there's no need for frameworks;6;;;Desktop app;;;no team, just me;7;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;We don't know how to properly address performance issues;;Android Studio, Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;IDE;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;4;Hungary
15536b7647c245e0707342a32917ff45;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Happier team;;We react to the user complains;;Performance is a feature ;reactor, vuejs, react native, kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;Great Britain
8762a69a4f18da14befb9c0fc2c93686;IntelliJ IDEA;;;Less work to get all the functionality I want;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Google Cloud Platform;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Great Britain
31c136a96e6adb61c50601084b91374f;IntelliJ IDEA;;Functionality: it's superior;;9;;;JavaScript;;;The browsers only understand JavaScript;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;14;Spain
6d23c4dc9204286ea0c1fe760bbd1c21;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Lagom; Akka; Apache Flink; Apache Beam";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Small company (I work in a shared office space or small office);10-19;4;
72df2912b396657bbb9e132bddd0d539;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Spring Boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
d11754b135aeb402fc2df22bd6eb21d1;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MS SQL;;Company policy: we have licenses already;;10;;;Not interested, we like the wall where it is;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kotlin;Spring Framework 5;ReactJS";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Midsized company (I work in an open plan office);100+;8;Brazil
04608cd99305653133af7656f50d721a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Our application stack encourages it;;8;;;;in house;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"hazelcast;";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;Great Britain
2df9e53318157fde1d2e67a73aa609ac;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;6;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MongoDB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We don't care;Performance tooling / experts are expensive;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Programming language;Software Developer;;Small company (I work in a shared office space or small office);1-2;20;Great Britain
619eb75eb1a31337d8d84ad5aedce2e8;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;SOA;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Git;BitBucket;SonarQube";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Switzerland
3cb1836cccde6db87487498cf8219a73;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;4;The team is large and inflexible;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;A;It feels unproductive, but the project is easy to maintain in production;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;-1;Afghanistan
a6b76b4644c3da44e9b1e6d0c9830ec8;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Functional superiority;;9;;;Java EE;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;10;;;;DB2;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Liberty from IBM;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);20-49;15;United States of America (USA)
ef4fb4ce76bccc8e8acda6bdf9d6d0fc;IntelliJ IDEA;;Functionality: it's superior;;9;;;JavaScript;;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;React Fiber;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);3-9;5;Mexico
65ef6c32025e152e22b729df211ca3fe;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Cassandra;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kubernetes;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Midsized company (I work in an open plan office);20-49;30;United States of America (USA)
5cbb1d622842903a047f6c07215f0ec1;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java EE 8;WildFly Swarm;MicroProfile";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);3-9;20;Albania
49c6e94c178434348a2621f5833a4a75;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;;Grails;9;;;;Grails 2.5.4 and React on JDK 7;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;;code base is grails 2, react was chosen for this and another proj.;9;;;Oracle DB;;Familiarity: we know it the best;;8;;;We are the DevOps ;;c, d, and e;We have APMs and monitor health of the deployments;;careful coding to prevent performance problems, load balancers;In the last few years, react was the most fun, but everything moves so fast, it's hard to get attached;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;39;Canada
15bec347a5567af405887c6466f052d8;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;8;Malaysia
99e161d70788ea3f0dde0c1b95984c19;NetBeans IDE;;;I18N by default, and compat with  Java EE;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Payara;It feels unproductive, but the project is easy to maintain in production;Project architecture;;Technical support;Enterprise Company (I work in a cubicle or large open plan office);100+;15;Japan
63a34dfc02796386da59df1dba8c83e6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Familiarity: we know it the best;;10;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;;mariadb;Budget;;10;;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;vert.x ;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Switzerland
09a8bf1fc8f1777db440b33bd24d51ba;Eclipse IDE;;;The framework we use has its own plugins, that are only available for Eclipse.;3;It's a fixed project / company requirement;;Java 8 (or newer);;;It's given by the framework.;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;It's a fixed project / company requirement;;MS SQL;;;Given by the project;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Docker;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;3;Switzerland
c23311abfeb9eeeed2a33911e0b9a3b6;IntelliJ IDEA;;Company policy;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring 5;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;19;Belgium
a1a8ef50f516ad7325069e4733dfc60c;Eclipse IDE;;;It was the best a couple of years ago and have not done enough research in a while;5;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;It was an experiment;;8;;;;compact profile 1 for embedded application purposes;;small footprint, high level, extensible with good access to 3pp libraries;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;No good news on the horizon. Mostly look forward to IoT Industry maturing.;I wish we've chosen a different set of technologies;Programming language;;Software Developer, Software Architect, DevOps, Systems Architect ;Midsized company (I work in an open plan office);3-9;11;Sweden
a737f30b3d46a3e698fadb62a94b253d;IntelliJ IDEA;;Company policy;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;InfluxDB, docker, mesos, elastic search stack, R ;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Germany
14ca9a16f44b95861d7bd70b57247e41;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;5;We're tied to specific tooling for the platform;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Reactive Streams;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Lithuania
60ba0e460bbaad0a096bc0d2eb69d481;NetBeans IDE;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"ReactJS;Java9";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Italy
2f69137c541ba3f16bba6e569190584e;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Intellij Idea; Spring Boot; AWS; Android Studio";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;9;India
fa482965ecf52103f7607e71b94fa7a9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;It's functionally superior;;9;;;;something normal between microservice and monolith?;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;some config as code thinggie (helm);Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);20-49;15;Switzerland
0a33ef386e642b873228bbc7a0e87eb9;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"kotlin;sparkjava";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);20-49;5;China
a1aee25d2c8734fa526e5dd28a326894;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Happier team;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Aws;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;6;France
58d4bd4e2f0292372feac7f984c95a7c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"bigdata;scala";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;23;Spain
0804b8b59b6ca9e6a6f3724a48f8cc30;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;4;We're tied to specific tooling for the language;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;;IBM DB2;;Client Constraints;4;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;docker;I wish we've chosen a different set of technologies;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;2;Portugal
f702ad6dffbbe349e4cc52a8e288fbd6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Postgres;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;microservices;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;14;Belgium
c73427171696d5b170cfc7bfcc00edff;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Familiarity: we know it the best;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;5;;Are moving away;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ember;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Germany
4ab625cceae552319aad93cccbdbe6f5;;Rational Application Developer;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;;JSF;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Agile; Git; Gradle; Jenkins ";It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Belgium
16f8dd45192d1bb69a31d97edd93e2ff;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Ansible;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Canada
277f8336263f0f6f2f468eb15d7d8cd1;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Our application stack encourages it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;pitest (mutation testing);We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Austria
8f1e07967558ec24e41894436cfa9342;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Custom in-house monstrocity;;;Incompetence;1;The team is large and inflexible;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Oracle DB;;Familiarity: we know it the best;;5;The price of the migration is enormous;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Spring Boot;It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;3;Czech Republic
de389442f7898dbff3ac834e1b879075;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;9;;;Library or framework;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;111;We're good, it feels productive, and we know how to move forward;Programming language;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Afghanistan
72003cb8fce1120e02108762fb1b234d;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;DB2;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"AWS;Serverless";The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;United States of America (USA)
773a3a2df217f8a9713e955d072a7ae2;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;There is no such tool, maybe java ee 8?;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;8;Poland
8d55d59ba608e963d7650afd98be5005;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Gradle;Microservices;";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Turkey
ca34fc457a5cbeb9ac7178e887a3cd21;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java EE 8;Java 9";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;22;United States of America (USA)
4523fafae50a77ec030707d55f54db37;NetBeans IDE;;Company policy;;5;It's a fixed project / company requirement;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;MySQL;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;CDI;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Iran
31d3f42db36c797b92ca1306653d0d8e;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 8;Kotlin";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Korea, Republic of (South Korea)
b9fab6851d7939a78618b592f0350a6a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Budget;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Spring Boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;14;Greece
60f5f2d4a37f12f1a5ee06335610ba99;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;sqlite;Developer friendliness;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;SparkJava;It's the worst, we barely move forward;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);100+;7;France
32f15f93da9b54ea5b4a0de2f4b2b061;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);3-9;18;Netherlands
df3755eeaae25fd0dc75c0c7fc40b3af;IntelliJ IDEA;;Project requires it;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;H2;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"Jenkins;AWS";The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;United States of America (USA)
250946749e9bb90d7bfdb823c8066a50;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;"PMD; maven site; generjee; JHipster";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Germany
584cbb1d0a588958d5cc09069b3b4a1d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;end-of-line in couple of years;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Lagom;I wish we've chosen a different set of technologies;Application stack ;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Belgium
625c7771e3ed6032fe38b0549d241c4e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JHipster;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Contractor / Freelance (I work when, where and for whom I want!);20-49;20;France
25b91bbd99793232b1033e7dfa524de0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Developer friendliness;;8;;;We are the DevOps ;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;Micro service;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;France
054ce7aa305bded459930aa455a49c6b;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;3;The team is large and inflexible;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;SAP HANA;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Kubernetes;SAPJVM";We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Germany
6be5af36ada5182e6b713135dc57e641;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;"spring;cassandra;spock";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Greece
c5fa7adfaa3e1b1c53ea747fe4546a4e;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;JEE7;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;17;Ecuador
c96c3ca32e666c0c91ced5fcce3002b9;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Clojure;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;Egypt
7e11c7575ad6fbac894f741ff822f366;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Budget;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Ireland
68bf924b5b4e64354f730a0d54422998;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Startup (I work in a small cupboard at home);3-9;5;
ebf06b9adb73b035c5c0742ec05eee3b;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 8;Spring 4";The tools are fine, the project is just too old;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;30;
0f82b5363180fe38a3b2f59e134cc7e4;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"Hadoop;Hbase";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;4;
5c00891a78fdf535a49b66ee672960e0;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9;Java EE 8";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;United States of America (USA)
e5ba58205104fc3dda5aa9f616c550d7;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;;DB2;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
5c1128a7a379f5662af7caf4d79a2665;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;JavaScript;;Ecosystem: community, tools, libraries;;9;;;;nodejs;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Amazon RDS;;Company policy: we have licenses already;;9;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"angular;elasticsearch";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;17;United States of America (USA)
bb567564b8d26532fff2cb24ebc13b78;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;;Universe;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Angular 4;It feels unproductive, but the project is easy to maintain in production;Database;Team Lead;;Midsized company (I work in an open plan office);50-100;20;United States of America (USA)
637a28a6f90db79a8bc7ae621d49d7b9;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java EE 8;Java 9";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Korea, Republic of (South Korea)
17a0f35bd0382c25afdbbde2505b9908;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;IOT, AI;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);3-9;12;Singapore
f17e17aab0c272aa1480040bbcace047;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;AWS;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Brazil
6021b0872be26c8a0710397977c5df68;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Familiarity: we know it the best;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;MicroProfile;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;25;Egypt
19db47b592a4d4a45836a1bbded79406;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;
b7fa9ec25cf1b91910a084f9bb588b68;;RAD;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Intellij IDEA;angular2";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
ac4960ae8cb042904d134119580bff63;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Angularjs, Spring Framework All modules, Spring boot, Microservices, Java 8, Hibernate, NoSql,Tomcat,Jetty,Spark,HTML5, CSS3,JMS, ESB,BPM,BRMS,Machine Learning,AI;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;9;India
3e1edeb6dbfb144f971a30fc039885dc;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;proprietary;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"react; redux;reactive;";The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;22;China
207325a468a8193b9c05ba5844dda957;;Rational Application Developer;Company policy;;3;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;3;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;2;It's a fixed project / company requirement;;;DB2;Suitability: it fits our architechture / requirements;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"jee7;angular;atlassian stack";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;17;Belgium
eb0f18fbe91bd68d11e8a1985d49c663;Eclipse IDE;;Budget;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;SOA;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;MySQL;;Budget;;7;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;Angular2;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);3-9;22;Germany
973d735310e1653da484e8696fe951ee;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Spring Boot; Mongo DB";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Poland
4a14f84e9a3076f807e8dc8a07ccfdbc;NetBeans IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;spock;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Sweden
ed055f8eb98027b20ddccaef9b4f4d20;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Xrebel;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Estonia
25fec55bc23975afecd997c55eb6857d;Eclipse IDE;;Company policy;;4;It's a fixed project / company requirement;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;jOOQ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;8;France
d67b182c77b2e036867c28dbabbe4858;Eclipse IDE;;Company policy;;5;Not enough money in the budget;;Java 8 (or newer);;;Security;9;;;Spring ;;It's functionally superior;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Budget;;7;;;At least we talk to the Ops people;;Hype;We react to the user complains;We don't know how to properly address performance issues;;DevOps;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;12;India
2527b93cfab367582954a647924e6c3b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;yourkit;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Germany
b97a32a4cc14b14fed7f6b4f9fd014af;Eclipse IDE;;Budget;;4;Not enough money in the budget;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Postgres;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Happier team;;We react to the user complains;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);100+;18;France
7a5a8b70b80de0dc57242b4b3b65bba0;Eclipse IDE;;Company policy;;7;;;JavaScript;;Ecosystem: community, tools, libraries;;7;;;Java EE;;It's functionally superior;;3;The team is large and inflexible;;Desktop app;;Company policy: all projects use it;;7;;;Neo4J;;Ops friendliness;;2;Everything else is worse;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;ide;We're good, it feels productive, and we know how to move forward;Database;Director/VP/C-Level;;Small company (I work in a shared office space or small office);50-100;3;
2ed5c28f12bb252fecf5a3304157e66f;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Developer friendliness;;9;;;At least we talk to the Ops people;;Na;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Startup (I work in a small cupboard at home);1-2;30;United States of America (USA)
b08c0a8543b15071877378da38e055b2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Kafka; Elasticsearch; Java EE 8";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);3-9;13;Germany
5bafc138ecdecaafdb8de144f48b8c54;Eclipse IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Developer friendliness;;9;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Hadoop;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Midsized company (I work in an open plan office);3-9;17;United States of America (USA)
c87f7fd690a598dadbf2a56602d6ca93;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;Not interested, we like the wall where it is;;n/a;We react to the user complains;Performance directly affects our bottom line;;apache lucene;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Chile
77be3ad4a5553b73a05ca8d6335813dc;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Swift;Kotlin";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;16;United States of America (USA)
74e4e1c180d978201854a74680bd5b4d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Our application stack encourages it;;8;;;MySQL;;Developer friendliness;;8;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;hipster;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;Ukraine
2e5cdede41ed250bd3442925ad03134c;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;;It does not depend on me;7;;;Spring ;;;I don't know. It does not depend on me.;9;;;Monolith;;;I don't know. It does not depend on me.;6;;;Oracle DB;;;I don't know. It does not depend on me.;7;;;Not interested, we like the wall where it is;;I don't know. It does not depend on me.;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Microservices;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Spain
8a8396d9506e9dc3a1404f4333d235c8;IntelliJ IDEA;;;Eclipse doesn't have enough juice to build this project;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;Budget;;9;;;We are the DevOps ;;-;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Angular; Java 8";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Estonia
818ab178bf8586115fc7f6ac9bfc545d;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;java9;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);3-9;6;France
a011da14a7193c724c16c0514b0d86d5;IntelliJ IDEA;;;Scala Plugin;6;;;Scala;;Functional superiority;;9;;;;Akka;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Sybase;Company policy: we have licenses already;;5;The price of the migration is enormous;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Scala Cats;We're good, it feels productive, and we know how to move forward;Database;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;Great Britain
4af74badd8ea1d3e62157bb256d6ae04;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;IntelliJ IDEA;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;United States of America (USA)
c4576e581bc9158ccf8da2e889f2a916;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;9;;;Oracle DB;;It's strongly encouraged by our application stack choice;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Hibernate, Icefaces;I wish we've chosen a different set of technologies;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Colombia
26c6b79e2a07c24e1271b652a68218a7;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;;Swing application;Project requirements: it was the best fit for this particular project;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;10;;;;none !;Familiarity: we know it the best;;6;;;We don't even have ops;;Huh?;We react to the user complains;;Management rewards functionality not performance;FreshDesk.com;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;39;United States of America (USA)
c23efb1d55323a2b153b14d2d0adc5b2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;;Elasticsearch;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Better internal communication;;We don't care;Performance has never been a requirement;;spring cloud;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;20;Australia
1cf4760f2c8bbc2c43f24b6d3f097b3e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;.;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);10-19;10;Portugal
d030b5a35dd5a79277f55ec4e918b43e;Eclipse IDE;;;eclipse is free;7;;;Java 8 (or newer);;It was an experiment;;8;;;Spring ;;;spring boot - quicker developement;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Developer friendliness;;9;;;We don't even have ops;Stable operating environment;;We don't care;Performance has never been a requirement;;docker, jenkins, chef, aws;It feels unproductive, but the project is easy to maintain in production;IDE;Operations;;Enterprise Company (I work in a cubicle or large open plan office);100+;3;Ireland
c132fdc50c9022cbb0c50554e96611d7;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;;looking for new horizons;6;;;;firebird;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;nothing special so far;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);1-2;20;Uruguay
23ab6f4b6f743b8dc5df04243692bf6d;IntelliJ IDEA;;;more effective;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;;legacy choice;4;The price of the migration is enormous;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;RabbitMQ;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;9;France
d68855690fd48eb6a406e386d9722fc7;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Vue;We're good, it feels productive, and we know how to move forward;IDE;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Sweden
f9b78cd1c8fd9fa0e65b310352d4c923;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;4;We're tied to specific tooling for the platform;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We don't care;Performance has never been a requirement;;Payara;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;South Africa
29ea2c76113c627b42ed79cf3532fa3b;Eclipse IDE;;Company policy;;7;;;Groovy;;It was an experiment;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;"Grails;Atom";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Hungary
94956d6992e2742c9840084ef76fac34;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java EE 8;MicroProfile";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;8;Korea, Republic of (South Korea)
9c79b6146ba1a3f693d97fa1d8a9ef74;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Company policy: all projects use it;;8;;;MySQL;;Budget;;7;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;"Kotlin;Java 9";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;France
5ec7ac8132580dd7e01dad6dc3dbb690;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Canada
6b2f959175259d8f07c173ab3439c177;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;MongoDB;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;7;
b02b460198beef67b57f198ca331c960;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;;security;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"spark;solr;vue.js";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;8;France
dbd98eb64fe8e3c7f6da6d1c9e9ea782;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Java EE 8;HTTP2";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;
80d7ade64d18db1eab74d6f34573c25a;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;The tools are fine, the project is just too old;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Canada
a368154c56a6e009e08853651a2ee64f;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;"Docker;kubernetes";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);1-2;15;Sweden
d3e00d244dd4a06a7366060f14f14a2f;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Company policy: all projects use it;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"RxJava;Docker";The tools are fine, the project is just too old;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);3-9;15;
dcabfdfdcfcd0a5ddf08e199b98f12ec;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;"WildFly Swarm;MicroProfile;Docker";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Brazil
970e25b0360057470ab4b336f0e6fd8e;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Canada
676060eaa61753da2eb667de3dc1385b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Nimbus OAuth 2.0 SDK with OpenID Connect extensions;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;8;Croatia
175d227dac25514fc398cd8c00b7809d;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;"Java EE 8;MicroProfile";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Ukraine
dd091d8f1bb004ca755e0b6581fe0756;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Budget;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;"Java EE 8;Java 9";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);10-19;8;Mozambique
b0ee36b7f0927b66d067cc89c27655c1;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"Java 8;Docker;AWS";The tools are fine, the project is just too old;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;France
40045896e2270ed3424eaa578a6eb354;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Budget;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Canada
435d87425e91e036266034583afe9b5d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We don't care;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;3;
ca58fbfd928a08ffb72019b743d776fa;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;;DB2;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 9;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;France
e97eb3b25b6b566fc795dda4260bb58c;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Java 8;Java 9";The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;8;Canada
b6ce65f855891b17eff29d52fbedd42b;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;10;;;Postgres;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Java EE 8;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;3;United States of America (USA)
fea7596824e8ebf6a9b5652e9f7c9a53;NetBeans IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;rxjava;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;3;Ivory Coast (Cote d'Ivoire)
424939c1bf26a4c65a7b5b8e32b2613c;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Java 9;Spark";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;14;
3899e1579e4abcc94131afe4d558ddcf;Eclipse IDE;;Functionality: it's superior;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;;Sybase ase;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Java 9;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Ecuador
8a413d2795de5a53a45d4395e289b38e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Brazil
770ba0606791db351289baed9e9e1f56;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Servlerless;AWS;Kafka";I wish we've chosen a different set of technologies;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Korea, Republic of (South Korea)
4df972628245324e224116e4f5ca24ed;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Java 8;React";The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;10;
e3bbdfa33d96754ae48bc54379b6bf24;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Java EE 8;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;12;
b45d2b806d8145457464b22ae0e5ad12;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;;Spring & Custom In-House;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;IBM DB2;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Java Batch;The tools are fine, the project is just too old;Database;Consultant;;Small company (I work in a shared office space or small office);10-19;24;Australia
18710d856341610a0e6973ee536c1ef6;Eclipse IDE;;Company policy;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;6;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;4;The price of the migration is enormous;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Yourkit;The tools are fine, the project is just too old;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);10-19;17;France
4748652795e184f4d9e9bd6eb6159b61;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Apache TomEE ;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;Germany
43ffa48016c0be73186451929f4a4192;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;It's functionally superior;;10;;;SOA;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;10;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;kafka, akka;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Turkey
5667b39a8f0939c99a8b3ad12906db72;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;20;Sweden
501c6dee26d21cf243a77a818612b2f0;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;Wildlfy Swarm;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Spain
224e74b43d05c804ae42ff9d5cb98ffd;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;Not interested, we like the wall where it is;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Apache DeltaSpike;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Austria
6cf53894623a10c1b467eac43bacdc05;IntelliJ IDEA;;Functionality: it's superior;;8;;;JavaScript;;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Happier team;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Angular 2 / 4;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Belgium
72ca1330fddc1a8cfb73d8bd073640ea;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Cassandra;;Familiarity: we know it the best;;7;;;Not interested, we like the wall where it is;Happier team;;We react to the user complains;Performance tooling / experts are expensive;;NetBeans;We're good, it feels productive, and we know how to move forward;Database;Management (People/Project);;Contractor / Freelance (I work when, where and for whom I want!);100+;20;United States of America (USA)
d357e93e9935a82c741241f5aa3416a2;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;8;;;Postgres;;Ops friendliness;;9;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;"Webcomponents; Polymer; Docker; Maven";I wish we've chosen a different set of technologies;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;14;Germany
ed713df2a7c80811b3826b726723e004;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;We have a DevOps engineer;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Node;It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;12;India
11bd6695e4d95d6da6f9a716e5a530ec;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;java 9;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;30;Germany
63faf67b91eb18596fefe121d453cdad;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;;DB2;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Neo4J;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Operations;;Midsized company (I work in an open plan office);3-9;2;
9d425c79b37763352df4e384a587c869;IntelliJ IDEA;;Company policy;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Company policy: all projects use it;;10;;;Oracle DB;;It's strongly encouraged by our application stack choice;;10;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"asp.net core; docker swarm; rancher";We're good, it feels productive, and we know how to move forward;We need to care about performance more;;Technical Lead;Midsized company (I work in an open plan office);100+;12;Romania
bf96176af610f3bdd5acdffe98cf306f;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Gatling;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);50-100;21;Brazil
1517020ae11ee99cdfb791138e923e03;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Vuejs;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;15;Brazil
64e237dabd6f2af2d62fd56a32127d67;NetBeans IDE;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Vertx;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;1;Estonia
088093e23c8d37766adaf265db52491e;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;;old stuff;1;;we are moving, we integrated Spring, Jersey, but the core is still there;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;We have professional perf engineers in the team;Performance directly affects our bottom line;;websockets, tyrus, spring REST, ;The tools are fine, the project is just too old;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;10;Romania
4fb7f82602370ead87a8b37a1fff33e9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Angular 2; Saiku;";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);10-19;12;Romania
39793f0a6cfea93d018a23694d52e809;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Kotlin; Java9";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;18;Luxembourg
958fb57bf5f0d17964fa134a1ea4d198;Eclipse IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Contractor / Freelance (I work when, where and for whom I want!);10-19;14;Brazil
613d87016f324c5522929dc08154f0a4;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Redis;;Familiarity: we know it the best;;8;;;Not interested, we like the wall where it is;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;angular;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Brazil
cbc5a4074e9d7c03c7181001848d6330;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Company policy: we have licenses already;;6;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance has never been a requirement;;rxJava;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;5;Czech Republic
58f6f3c9e31af9f5e1d4191ad0e43ae4;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Company policy: all projects use it;;7;;;;DB2;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Java 8;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;
45de3b85f5d6e59887c5cc1b4d699aaa;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Hazelcast;couchbase ";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;1;Czech Republic
7081cc30002267cb20803b8c08cfa46f;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Company policy: all projects use it;;8;;;MySQL;;Budget;;8;;;We have a DevOps engineer;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Docker;Java EE 8";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;
58533365da3c88a664f8aa4d88a70fb6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;12;Canada
833b072b38eb03405028b43a0412716f;NetBeans IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Functional superiority;;10;;;Java EE;;;It is the standard, and is developed through the JCP.  No other stack or quasi or defacto standard measures up to that.  Also, the competition just doesn't work without relying on Java EE.;10;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE, JBoss EAP, JBoss/RH-SSO;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);20-49;23;United States of America (USA)
1723223930ebd0d39f35c381c23b365d;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;8;;;Postgres;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;4;
eddf55f76312da633168b128ce647218;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;SOA;;Company policy: all projects use it;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;;MariaDB;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Rust-lang;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Belgium
75fb0b8274bc9ee6c485eddd7a75dc40;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MS SQL;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;JBoss EAP 7;The tools are fine, the project is just too old;Project architecture;Operations;;Enterprise Company (I work in a cubicle or large open plan office);20-49;7;Nicaragua
ccdba6fadf9b09b51c15ff2f1aa5282c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Developer friendliness;;9;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;CUBA Platform;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Russian Federation
81b819aa0b852da93e66b96c7c7a0d74;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Java 9;Java EE 8";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;12;Mexico
ec51f610496b894404b3028eeca50659;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;;Performance Test and then fix;IntelliJ, Java9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;25;United States of America (USA)
2fcb2fe5f7e2ce05a3d8bdf86aa5209c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;AWS;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);1-2;11;Romania
644586ace29d8dd8dcc6de40dc833c70;NetBeans IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Happier team;;We don't care;Performance has never been a requirement;;"Java EE 8;Angular 4";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;4;Brazil
2fb2b500ac20b9ae604ad9c6054340ff;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MS SQL;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java 8;Anguler 4";The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;24;Azerbaijan
3d61b07b611f4aa160831a509d713585;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Java EE 8;MicroProfile";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Thailand
e307169fb2ef4236f21c5479bbc00019;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Happier team;;We don't care;Performance has never been a requirement;;"Java EE 8; HTTP/2";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;
126460c02800f07da21db99daa092015;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);3-9;20;Pakistan
5f8696049556b477606b27e003c32b5f;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9;RxJava";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;7;
79eae3ad05a465780484627fb3ba74a1;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);1-2;10;
c800bc7cbf773abd5775e995fbaab68d;NetBeans IDE;;Budget;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);50-100;10;Brazil
7548edd308361fb50c54368451a57949;NetBeans IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;6;;;Library or framework;;Company policy: all projects use it;;7;;;Cassandra;;Budget;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Apache NetBeans;We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);50-100;3;Germany
0f47fd0f7deb9ea880f6109b75f97af2;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;boot;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;9;Russian Federation
128f87a4c324452c9e6d45538cac6eb8;NetBeans IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Language server;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;12;Germany
e8bd554fb5d5ebdd3217c16fb2933189;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Desktop app;;Hype: it was a modern approach;;8;;;Oracle DB;;Developer friendliness;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;Couchbase;We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);100+;6;France
d756cde43a2d0d82c7de5087e2953ff3;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;It's functionally superior;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;;JDBC;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;;No adoption;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"frege; Nashorn";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Small company (I work in a shared office space or small office);50-100;15;United States of America (USA)
2a146430c5cf1d6346079de114a5a804;Eclipse IDE;;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Company policy: all projects use it;;3;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Docker;It's the worst, we barely move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;3;Germany
a67a5e7435dabf50694959d364dc475d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Hype: it was a modern approach;;8;;;;DB2;Company policy: we have licenses already;;7;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Microservices;We're good, it feels productive, and we know how to move forward;Virtualization tools;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Greece
f62116eaa7aabc3377f37fd33354ed9f;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Developer friendliness;;10;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Microservices;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;7;Turkey
2111876c9283688b0cbf03c0985704e2;NetBeans IDE;;;The world needs more than one IDE;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;;We don't operate the product;We react to the user complains;;We don't have performance problems;RxJava;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;Germany
85ab65409138ebaa2573d567f392b2e2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;;Legacy;5;The price of the migration is enormous;;We are the DevOps ;;Small team, everyone does everything;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;14;Germany
5efa7423b9d865199f9c86357926a615;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;Not interested, we like the wall where it is;Better internal communication;;We don't care;Performance tooling / experts are expensive;;Java EE 8;The tools are fine, the project is just too old;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;25;Japan
d5a9ac94aa6aae24fe2078f0c2a1afab;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;We're tied to specific tooling for the language;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The team is large and inflexible;;;DB2;Company policy: we have licenses already;;6;;;Not interested, we like the wall where it is;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Kotlin;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;4;Netherlands
c98c025e7452ec21997b43569542fe24;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;8;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;9;Bulgaria
163115cf386e639d63a96e036312ee46;;android studio;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;;Android;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;SQLite;It's strongly encouraged by our application stack choice;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Poland
ef7674582e191a8000d83b85d31eb3de;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"git;Jenkins";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;27;Austria
55346bd486f1719c51b5acf1fa05cc5d;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"JavaFX; Gluon; NetBeans; FXyz3D";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;17;United States of America (USA)
27e3ddb641119419d84c8b97b766ce9f;Eclipse IDE;;Budget;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;"Spring Boot; Gwt Jsinterop; Web sockets; Spring 5; reactive programming;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);3-9;17;South Africa
d2012c62ffe58c9844c5e6169a6c31a8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;7;;;Library or framework;;Our application stack encourages it;;8;;;Postgres;;Developer friendliness;;7;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Kubernetes;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);3-9;10;Germany
0c3b7c064cee56ca43606a69c374a9a9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We don't care;We don't know how to properly address performance issues;;"Lombok;MapStruct;";The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);20-49;8;Czech Republic
9d332c8e128920e31fed4c2cbbffec53;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Hype: it was a modern approach;;5;The project kinda works, don't touch what's not completely broken;;Neo4J;;;hype;2;It's a fixed project / company requirement;;We have a DevOps engineer;;we have to support microservice architecture;We react to the user complains;Performance has never been a requirement;;react;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Russian Federation
f310bbecc9fad5cf0893ebd6376d499e;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We don't care;Performance has never been a requirement;;Java 8;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;8;
b605a335fa02cb9e7db20857e0d864e6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Ops friendliness;;10;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Nigeria
4562ae8fd1b95bc27fc844f2688772e9;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;NewRelic;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;15;Great Britain
5b3891b08cc894e3878bade15f0d1fd3;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Java 9; Java EE 8";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;
c64b7cb6a65f459c1e14a2bff75c9adb;Eclipse IDE;;Familiarity: it's what I know;;5;Not enough money in the budget;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring;We're good, it feels productive, and we know how to move forward;Database;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;United States of America (USA)
b8ca5163757e60325da015fb4e1b2675;NetBeans IDE;;Functionality: it's superior;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Custom in-house monstrocity;;Familiarity: we know it the best;;4;The team is large and inflexible;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;;Derby;Developer friendliness;;6;;;We don't even have ops;;We don't have DevOps;We react to the user complains;Performance has never been a requirement;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;7;United States of America (USA)
125d25f4c5cbed61db4ab88d7cdebbda;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;-;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Hungary
a2bbe4ed296d0b9f6c558cdba42fd586;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Developer friendliness;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;docker;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Startup (I work in a small cupboard at home);10-19;8;Belarus
9ec218dc3198d9b6b0625c67e0225a76;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Happier team;;We react to the user complains;;As a school we first focus on logic, performance is less of an issue.;Java EE 8, Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;;Computer Science Professor;Small company (I work in a shared office space or small office);20-49;37;Canada
99740fa9e4ada5ea4de0d1058cd448e1;NetBeans IDE;;;"Power and simple; out-of-the-box Maven integration";10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;;none;;;;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;;...;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Contractor / Freelance (I work when, where and for whom I want!);1-2;30;Italy
09336795cbc48fa75d477f7847463b55;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;JIGSAW;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;Germany
a1ba4e48d1b809a293e510295b69f7d1;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance has never been a requirement;;Gluon Framework for Mobil App Development using NetBeans/Gradle;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);1-2;25;United States of America (USA)
8417addd5ddae448be85a3a0928f5b58;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);3-9;20;Sweden
9dfa0fc667f1531f4f56a6ffdfcfc231;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"ECS;Docker";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Director/VP/C-Level;;Startup (I work in a small cupboard at home);3-9;24;Brazil
5e7fe187fd04370bc06a84af80f9cd82;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;;Contractor decision;8;;;No stack, i.e. plain old Java;;;standalone application;8;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;speedment;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Belgium
6199e47c69009dd64fa45b6707a5a5b4;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;10;;;;(none);Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;18;Austria
9ee64b0a1e88c162ac5fecde7c675daf;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Familiarity: we know it the best;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Kotlin;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Portugal
065d6b5f403fdc4dd0541a2aadaa3ff4;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Happier team;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;scala;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);1-2;15;Serbia
c7ac9ea8b89bfe3a6b2dbce8ba8b0fa4;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9; Java EE 8";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;25;Great Britain
407ef93add85289994c01e1009bb898f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance directly affects our bottom line;;"Java 8;Hadoop;Spark";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Canada
700efeafbb62dd69ba529e526b31fa1a;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;5;The project kinda works, don't touch what's not completely broken;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"spark;kafka";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;8;United States of America (USA)
a38527981c29fafb01b96e8db9d4cc1f;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;SpringBoot and Angular JS;;"Easy to use, clean programming model, works well, based on Spring, and Angular has worked well; we investigated various tools including Dropwizard and other SPA frameworks.";8;;;;Microservices and micro UIs;;It allows a lot of flexibility in adding new services and features, applications, and doesn't lock us in when replacing services and UI components and sections. It also allows us to breakup and decouple the whole much better. The cloud is cheaper than all the other bloat and lockin.;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;;Not a great question really. It matters. We address it where and when it matters.;"Containers; SpringBoot; Node JS; Java 8; AWS";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;United States of America (USA)
b5eeca445075632550170c90b408d47e;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;9;;;;Glassfish;Familiarity: we know it the best;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;30;United States of America (USA)
a9e64e862ea2738b176dce702386cffc;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;;Developing expertise;Neo4j;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;United States of America (USA)
bcf5d1e8b27c35ffc063b2ac32fa40fa;IntelliJ IDEA;;;Most project member use it so problems with setting up different configurations are supported better;8;;;Clojure;;Team skills: it was what we knew the best;;9;;;;Ring/compojure, AWS services;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Amazon RDS;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;;It is the most efficient thing to do;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Kotlin, AWS Aurora, Elixir, Phoenix;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Small company (I work in a shared office space or small office);10-19;10;Finland
f7f104f01e59506aa74c31e26e617c43;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;"""Primefaces"", ""Vue.js"", ""Java EE 8""";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);50-100;20;China
13c2facf81fe184a4fb0ab0c87d97170;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;Most mature, supported JDK;6;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Idea;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
9a9ddebc7490997d4300b1f618d759ab;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;8;;;Desktop app;;Our application stack encourages it;;10;;;Oracle DB;;Company policy: we have licenses already;;9;;;Not interested, we like the wall where it is;;None;We have professional perf engineers in the team;Performance directly affects our bottom line;;gradle;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Czech Republic
68bc620d2986c4060f16e84af301cb31;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;-;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;13;Belgium
87e027b5eea622ac43c7c79b1b07694d;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;Postgres;;Ops friendliness;;10;;;We don't even have ops;Faster resolution of problems;;We don't care;Performance has never been a requirement;;jeddict;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;2;
7bdf16a7e6c08f23b32b62069c6a5fda;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;VisualVM;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);50-100;17;Czech Republic
d50f8d0fbd7fbedf25e82c13f97eb106;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"AWS Lambda; Google Container Builder; Kubernetes; Spring Cloud; RxJava; Apache Spark";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;5;Nigeria
da44eab3187b70d6761c0143abd92d08;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;;H2;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We don't care;Performance has never been a requirement;;Spring;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;3;Ukraine
8e2f085ff896eabbc2a2485c2694c499;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;MicroServices;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Great Britain
161678ac8b8a3f8670e048de493c5294;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Familiarity: we know it the best;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;11;Bulgaria
6417057c8399b86ee52823f7efe6b1fe;IntelliJ IDEA;;Project requires it;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Java 9, Project Reactor;It's the worst, we barely move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;8;Germany
05a13a50e4a1dd8dd75ef914338b4f1b;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Budget;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Angular;It's the worst, we barely move forward;Application stack ;Consultant;;Small company (I work in a shared office space or small office);10-19;30;Denmark
a74f4dddf4fecf0b97b953e6d1c5562c;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;none;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;14;Brazil
cd600a44097715ef84dddf151c8a47d8;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;RxJava;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;9;France
10177b0edc2219dd424a5bd913e546bd;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;Hybris (spring based);Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;MySQL;;Ops friendliness;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Linux;open source;sonarqube;";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Austria
b00461806dc5ca775a81597c8db04f7e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;We are moving, but it takes time;MS SQL;;;Don't know ;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Java 8;jUnit 5;Hibernate 5;Docker/Open shift";The tools are fine, the project is just too old;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;17;Norway
23c91b3065fc14075df30ba2eaca646b;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;zipkin;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;30;Sweden
10c2904516102996345f28817c30cb00;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;wiremock;It feels unproductive, but the project is easy to maintain in production;Project architecture;;Tech Lead;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;Switzerland
cbdcc4bc84e0fe16a82e0de2742d043b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;;Complete flexibility,  easier to get raw performance without framework overhead, lean, minimal dependencies;8;;;;Varies - multiple loosely coupled server components;Suitability: it fits our requirements most effectively;;7;;;;We deploy on Oracle, SQL Server and PostgreSQL;;Depends on what requirements and licenses our customers have;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;30;Great Britain
462fc896131a7b08105f35b06728cf0e;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance has never been a requirement;;spring-boot;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;7;Luxembourg
bd9f41989ff9bc3ebdb4b950b578e16e;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Maven;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;20;Lithuania
af61acfda2eeaae5c69cd9943f9218c6;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Our application stack encourages it;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Ukraine
fa135b7c3fbf469c8ff8a85db178bc0e;Eclipse IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java EE8; Angular, Android";We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;20;Argentina
f9c84db9b2b5672786e24c54fc037af2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Kotlin;It's the worst, we barely move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;17;Brazil
071ca2cc28c01ce7b54f2cfa1a807604;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We don't care;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;United States of America (USA)
25f47d40e173b0c77bac807a06042de1;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);10-19;12;
d673dd77200e9f0f27df65f046bab352;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Kubernetes;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);20-49;12;Paraguay
26699904d0772f10ba3b36ac6f3a14a4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;7;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Java EE 8;Kotlin";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;5;
44cf9417001a39e485ee259a714b48d6;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;DB2;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Docker;Kubernetes";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;5;
943bc3f2f5724127c2ed2a2ee2d8d620;Eclipse IDE;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;8;;;SOA;;Our application stack encourages it;;7;;;Oracle DB;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;?;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;40;United States of America (USA)
f4fab1cad46c2f74896ff434b560b2d3;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Scala;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;4;India
ff18285fbbcc56a4af8aa2f4b259bdbd;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;docker;It's the worst, we barely move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Denmark
8c23497548727b810a82dd8b97efb96b;Eclipse IDE;;Company policy;;5;It's a fixed project / company requirement;;Java 8 (or newer);;Functional superiority;;8;;;;Osgi;;Modularity needs;5;It's a fixed project / company requirement;;SOA;;Our application stack encourages it;;7;;;MS SQL;;Familiarity: we know it the best;;5;The price of the migration is enormous;;Not interested, we like the wall where it is;;?;We don't care;We don't know how to properly address performance issues;; intellij idea;I wish we've chosen a different set of technologies;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Turkey
36e17da0a91de9744d94eebd9994564d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;"Spring 5;Cassandra";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;10;Great Britain
41f31173fd03533caa0ea4f5d4f442d5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Budget;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Kotlin;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Ireland
956832a47ad7973801dfe2ad79fe7604;IntelliJ IDEA;;;Only IDE on which you can do Java SE/EE/Android.;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;4;The team is large and inflexible;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Multi OS Engine;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Netherlands
1af8ab6ae99b2e5f018574b23a50164d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;legacy maintenance;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Budget;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Angular;Spring boot;docker";The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);1-2;17;France
d0f439729507b7335f81c777ab934cbc;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Jenkins; Docker; Kubernetes; Spring Boot; Prometheus; ELK";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);10-19;4;Romania
0d46063a07f26423d85acf740a2e52df;Eclipse IDE;;Budget;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;docker;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);10-19;12;Austria
7ad829afd60ece5c3f69dbbe55546ff8;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;9;;;Oracle DB;;Familiarity: we know it the best;;8;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Small company (I work in a shared office space or small office);10-19;20;Italy
db23f2baae8206006f0ac189b315b906;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Kotlin;JSON-B;Websocket";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;12;Netherlands
3251154c14c8a9aeb4e8616d41f52d5e;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;rest love the framework;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;7;India
3ff88222623a43f073768f03c9484fb4;Eclipse IDE;;Project requires it;;6;;;Java 7 (or older);;;MacOS X 10.6 does not support Java 7+;3;;MacOS X 10.6 does not support Java 7+;;Eclipse RCP;Project requirements: it was the best fit for this particular project;;5;We're tied to specific tooling for the platform;;Desktop app;;Suitability: it fits our requirements most effectively;;5;It's a fixed project / company requirement;;;H2;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 8;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Russian Federation
d09cb151c22801d622922658a8ba1277;Eclipse IDE;;Company policy;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;10;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Apache camel ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Spain
43ddac22c5822957fd3f0844b911e012;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Angular;lodash";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);50-100;25;Austria
e181ee74d251aeca1cade436abe13cac;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"kotlin; spring cloud data flow; cloud foundry";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;15;United States of America (USA)
de8fc3693b0a9cf0b490673f0ad96a10;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Our application stack encourages it;;8;;;MySQL;;Developer friendliness;;9;;;We don't even have ops;Faster resolution of problems;;We have professional perf engineers in the team;Performance has never been a requirement;;Must be idea and java8 ,Spring.sure;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;China
c3a971c130721de92f05a7f3d9c79f9f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java,Python,Oracle DB, Little bit we technology;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;3;India
8087421044f7df2a18ac4965e0ad857a;IntelliJ IDEA;;Functionality: it's superior;;6;;;;Python;;Writing an addon for a python based closed source product;6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
bf27b2db9c69cc3c8e9fb5e0c46d5dd5;Eclipse IDE;;Familiarity: it's what I know;;4;;Migration pathos not mature enough;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"OpenLayers3;Olingo;OpenUI5";We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);10-19;12;Germany
7032342fb67d7eef4baabb51d8e76506;Eclipse IDE;;Budget;;6;;;Java 8 (or newer);;Functional superiority;;6;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;REST;I wish we've chosen a different set of technologies;I need more tools not changing the existing;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;35;Brazil
6ea338cb76ea296ce01a4ef8f7d154e2;NetBeans IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;11;Mexico
08b73dead572c0f6bffab6905900efc3;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Framework;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;15;Brazil
76c34685aac749e30413ba893c1317d1;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2 400;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"MongoDB;SonarQube";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);3-9;15;Spain
c45925e815c7c59eddf7ac0d25a8f97e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;swift;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);3-9;11;France
09d70e5c32a82049d9ed59374ba33aba;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;;It is what our customers wanted;7;;;At least we talk to the Ops people;;Company policy;We react to the user complains;We don't know how to properly address performance issues;;Pendo;The tools are fine, the project is just too old;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;22;United States of America (USA)
0bea2249fa52faf0f17053f5c34a728e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;IntelliJ Idea, Spring Boot, Java 8;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United States of America (USA)
c1f28d6efdcb37a63722f1ab903bd78f;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Familiarity: we know it the best;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;nashorn (dynamic jvm languages adoption);I wish we've chosen a different set of technologies;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Hungary
b01443bb800b21fdc1c8e34acec37f47;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Spring ;;Hype: they told us it's the next big thing;;6;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;BDD;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;16;Canada
3ee98ab8dca8401fc0d1af9e99f11786;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Springboot;react";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;16;Brazil
81a9c4aaee655679bfcf51c470cad457;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Java 9; Java EE 8; Docker";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;6;
0bab0b7e36593ba6319bb338bab76d85;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 9;The tools are fine, the project is just too old;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Egypt
603645a64ed7c38336f1d586f79a324d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;7;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java 9;Spring 5;Angular";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;6;Great Britain
149d907cf9d3e47a136f2d984215ca0c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java 9;AWS";The tools are fine, the project is just too old;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;22;Canada
38b5d920627721d0e6e46fa0df85e62f;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Java 9;Kotlin";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);10-19;24;United States of America (USA)
f51b58b6ba6e4c07fbed694e18d6e3d3;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;MySQL;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular 4;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Brazil
ece4861f2be7a767cc066b531f7a9e1b;;JDeveloper;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;5;United States of America (USA)
3256ab91d5140e56648e77d6e4a38a92;IntelliJ IDEA;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;;IBM DB2;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Vue.js;The tools are fine, the project is just too old;We need to care about performance more;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Switzerland
9f2d88008d4d83e3a963ebe9df1cc889;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;n/a;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);50-100;15;Germany
a2d87b3de468ddf5ee29b7e5c6b1cc1e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Russian Federation
43c81688ba7952bc98e224f7029353a2;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;;Legacy;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 8; Spring 5; Angular";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;1;United States of America (USA)
b01bf4010980d0479bcfdb04c0e75dba;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;3;Not enough time to migrate though I know it'll be better;;Custom in-house monstrocity;;;Legacy reasons;1;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;;Not enough money/time/bravery in the company;MySQL;;Ops friendliness;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;React;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Poland
01f8bed258ce30115f19ff67eb33c3b3;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;;Mixed environment of both Microservices and Single-WAR;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;;Limited Resources;Developers are equipped with profilers to monitor performance;;Want apps to perform well so users have a good experience;Java EE 8 (Specifically JSON-B), Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;;Developer and Database Administrator;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
0886c5311fa2ff6b13b5b9c2909ddb99;Eclipse IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java 9; JavaFX; Eclipse Oxygen; SceneBuilder; JFoenix; MySQL/Workbench, Oracle Database; Modelio (UML); DBeaver; JUnit 5; JSF; Tomcat; GlassFish; HTML5; CSS3; Docker;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;I'm actually out of work (How insensitive of you!);100+;2;Morocco
8c76b7817766ee797351cd8026db738f;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Srping Boot;The tools are fine, the project is just too old;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Germany
8bd435017d33d9440ce6d31548b42963;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Hazelcasr;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;4;Saudi Arabia
d011b90a27c25f4c5644f31ebe73880b;Eclipse IDE;;Company policy;;2;Not enough money in the budget;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Angular;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Great Britain
d1d3038759b5c6197dd0fcde0c1d3f0a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Ops friendliness;;9;;;We don't even have ops;Stable operating environment;;We don't care;Performance has never been a requirement;;vue;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);3-9;7;China
667f8f8f4b39102fb68cb193b8d07266;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin, Java EE 8;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Armenia
d751bdc2e312d694a38a0adf9f97722f;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance tooling / experts are expensive;;"Spring 4;MVC;JPA 2.0";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;14;Germany
93f137bd65f83d71acf66b133d43bde0;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;apache derby;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Akka;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Belgium
43ded6ae428d1b375b67ca5c4568013b;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9; Java EE 8";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Brazil
3078934d035b745d8210d37d6e224e16;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Hype: it was a modern approach;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 9;The tools are fine, the project is just too old;I need more tools not changing the existing;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;Germany
d21d5db7be402a0f803ca14b9d3074b4;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;
517ad406a2c77b2c75a8dde47bab7af0;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"WildFly Swarm;MicroProfile;Java EE 8";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;14;United States of America (USA)
60b19805dc780e864885c42730d12e2e;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Colombia
a68f0de9f13621e792080db62c89ce84;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Java EE 8;Spring 5";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Canada
d8bfe952101ba1dbc48957fca70b217b;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;MySQL;;Budget;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Angular 4; Docker; Kubernetes";It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;12;
16dc8a82e627b05c183fb2ab5834ab53;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Docker; Java EE 8";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);3-9;15;Argentina
2361ecffc091beb996625571d26ce3b3;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Czech Republic
b011f53cc3c1737e898002d343a945dd;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Angular 4;Java SE 9;Java EE 8";The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;17;
21b5c1fa6dbf77df71bbb953175b65c9;;Atom;;Only piece of software that doesn't look like it was made in 1982 with termcaps. Plus, there's a lot of plugins.;9;;;JavaScript;;Ecosystem: community, tools, libraries;;8;;;;React, Node, *SQL or mongodb depending on the project;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;PostCSS;We're good, it feels productive, and we know how to move forward;We need to become DevOps;;Software Engineer;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;France
1941a5fbe900702014f6e075d86b6d22;IntelliJ IDEA;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;;No database;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Vue JS;The tools are fine, the project is just too old;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;6;Lithuania
418534f5d0c37f93de09ffa5ab8ad919;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;5;France
64c3f24b72e948d05d30670673b3f597;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;;none;;;;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;;mostly performance is not an issue but sometimes we need to address;eclipse neon DSL;We're good, it feels productive, and we know how to move forward;Application stack ;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;35;United States of America (USA)
f30bc08375835bf56a7869233d5ba7d8;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;;DB2;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 8;Angular";The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;
3c96d97fc5abb1f24c2ee940c21bcb6b;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Java 9;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;
3df378e95785b3d63bd2724cdc8a13a5;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9; Java EE 8";It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;
541ba2c2092f70b03c1cf21670f73dc2;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;Couchbase;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"RxJava;JAX-RS 2.0;";I wish we've chosen a different set of technologies;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Serbia
c60087c1c7d72a4e85abdb3a4e38b776;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JavaEE8;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;14;Germany
507b0bce169e3618f7f4f2f3a0fde914;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java EE 8; MicroProfile; WildFly Swarm";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;United States of America (USA)
36a0a34dac0464fd14cac4f5841613b5;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;8;;;Microservices;;Hype: it was a modern approach;;7;;;MySQL;;Budget;;9;;;We are the DevOps ;Faster delivery of features;;We don't care;Performance has never been a requirement;;"Java 9; Angular 4";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;7;United States of America (USA)
2b47b7d400376bdce69e29ccd47fe75b;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;Java 8;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;United States of America (USA)
07db90e731c33697c531851e85e73618;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;"pyhon;ml";The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);100+;15;Slovak Republic (Slovakia)
143a9339a3bd65f2e7f7d910ad54cece;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Budget;;8;;;We are the DevOps ;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Mesos;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Germany
a4ea736bc52c198abae859f2f30854c3;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;SOA;;Familiarity: we have the skills and know we can make it work;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster delivery of features;;We don't care;Performance has never been a requirement;;vert.x;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;8;France
17663bf386bdae7c6506ac95b529f92b;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;DB/2;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Angular;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;16;Germany
30db56757587092eae50f6aef9105178;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Xrebel, Angular;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Canada
13adf15e3be0c99e7443f7eb2890c314;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;3;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Clojure;Vert.X;FP";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Switzerland
502677358f76ef39cd1248222b2cf1f7;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Amazon RDS;;Ops friendliness;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;AWS;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;Great Britain
c40269853a8cac90ccaae09db87d0b0f;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Java EE 8; MicroProfile; WildFly Swarm";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;7;France
dff5ef3578b4013c26431b1c1898b818;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We don't care;Performance has never been a requirement;;Java 8;The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;
a6a487c2d9e2f41da8df29ddee8ee1b9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9; Java EE 8; Spring 5; Angular 4";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);3-9;15;United States of America (USA)
38e4ca432d475f164e04ba69bcd23232;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Java 8; Angular 4; Java EE 7";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;10;
d4ef473ffe9b8cfba4a826c0e39f4245;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;SOA;;Company policy: all projects use it;;7;;;Postgres;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;We don't care;Performance has never been a requirement;;"Java 9;Kotlin";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Brazil
48fab5e80c4d2844adaa15ece8876493;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Happier team;;We don't care;Performance has never been a requirement;;"Java 9; Java EE 8";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;4;
605f7fbd5fd224071b0819c2c33f8625;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Familiarity: we have the skills and know we can make it work;;4;The team is large and inflexible;;Postgres;;Developer friendliness;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Faster resolution of problems;;We don't care;Performance has never been a requirement;;"vertx;hazelcast";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;6;France
cca293915ce208ff0a3cc0cc68e8bef3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;5;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;Familiarity: we know it the best;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;";";Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;6;France
8b434a8968752a5761bf924603202fb5;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Company policy: all projects use it;;6;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Netherlands
dec69cc4631719ab2a6128d8361862c6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Familiarity: we know it the best;;7;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;;It's a desire but there are conflicting priorities;"java8;sprintboot;docker;kubernetes";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;United States of America (USA)
ed4f63f6181570da789a0c5a3a198e09;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Containers; Cloud";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Canada
005e18d0c478e16a727d694608236930;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none;I wish we've chosen a different set of technologies;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;Belgium
efc28f43845898705acacfcc714bbff5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Spring 5;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);20-49;5;Sri Lanka
276f2a88031356204a92dbfcf88ba0ad;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Hype: they told us it's the next big thing;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;6;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;-;The tools are fine, the project is just too old;Project architecture;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;17;Germany
da44d7d640e6cd677834b22a88c8daa8;NetBeans IDE;;Project requires it;;3;Not enough time to migrate though I know it'll be better;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;MS SQL;;Familiarity: we know it the best;;8;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;HTML5;It feels unproductive, but the project is easy to maintain in production;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Mexico
e1494d1c2d30c0dc77f987cabcf00b02;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MS SQL;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;ReactJS;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;30;United States of America (USA)
1517919247421385ce2c510256055c14;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;3;We're tied to specific tooling for the language;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;DB2;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Reactive;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;6;United States of America (USA)
39e902c1f9d2411b02c5543eee53f8f3;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;10;;;;Akka;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Kubernetes, React.js;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Poland
b9a7755beef2684cb7461174fa4dc401;Eclipse IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;;we have to support older systems too;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;N/A;;No need for a DB;10;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Kafka; Spring 5; scala";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Romania
9b1327988522573680dc5c00801fda35;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Team skills: it was what we knew the best;;5;Not enough time to learn the new language;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Developer friendliness;;4;The price of the migration is enormous;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Spring boot, Vaadin designer;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Oman
fe7f0ea603b643fc591a86fb2860bf0b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;blockchain;Typically, it's a lot of firefighting and bugfixing. Not much development.;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);10-19;17;Czech Republic
647850e6df0d9a967a3206b205ff0a44;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java EE 8; Java SE 9; MicroProfile; WildFly Swarm";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;
0889c867594c6cf50b51cccdcaf12ad5;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Jsf;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Spain
fd4bae1f8d20de8295af7af14f7bf552;IntelliJ IDEA;;Project requires it;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;7;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Vaadin;We're good, it feels productive, and we know how to move forward;We need to care about performance more;;Student;I'm actually out of work (How insensitive of you!);3-9;0;Russian Federation
c8af7065dac9060940d779ee50aab1bb;;IBM Rational® Application Developer for WebSphere® Software;Company policy;;2;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;1;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;9;;;Not interested, we like the wall where it is;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;none, hopefully our solution architects will decide to enter the 20th century;It's the worst, we barely move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Belgium
e470eb7434c2a0b8055265e53b23580b;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Company policy: we have other projects using the same stack;;9;;;Monolith;;Company policy: all projects use it;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Happier team;;We react to the user complains;Performance tooling / experts are expensive;;Spring;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;1;Russian Federation
d820d4a68623f97e82c19e4fecc29a69;Eclipse IDE;;Company policy;;5;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Desktop app;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;DB2;Budget;;2;The price of the migration is enormous;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Nothing;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
eebed3f454d976d180332e8a0d480525;;IBM RAD;Company policy;;5;;It Is very heavy;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;;EJB 3.0;Company policy: we have other projects using the same stack;;3;We're tied to specific tooling for the platform;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;Spring;It's the worst, we barely move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);10-19;5;India
022dd78ce428dcfb62696b665bd00bf5;;rational application developer;Company policy;;5;Not enough time to migrate though I know it'll be better;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;We're tied to specific tooling for the platform;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;angular;It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Belgium
16b087053a3449675af339538987b564;;RAD (Eclipse based);Company policy;;1;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Library or framework;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;;DB2, apparently this is not in the top 10 common db's :);Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;;Not everybody is well trained in the used tech stack, and timing is strong on current projects;Moving from RTC/RAM/RAD tools to industry standards: Eclipse/Netbeans, git, gradle, jenkins, ... Big changes coming;It's the worst, we barely move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;8;Belgium
4925bcc0b574bd98d8cd68c2339d9b80;;RAD;Company policy;;2;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;6;;;We don't even have ops;;Non;We don't care;We don't know how to properly address performance issues;;webstorm, angular, spring, hibernate;It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;Belgium
5b6f472724514dc1091e287f8fa13744;;Rational Application Developer (RAD);Company policy;;2;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;6;;;We don't even have ops;;None;We react to the user complains;We don't know how to properly address performance issues;;"Webstorm;Angular;Spring;Hibernate;IntelliJ IDEA";It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;Belgium
169e8044747e371a4fa11747c0f58680;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Angular4;cucumber";I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;France
9f48462be2158f77aa1b0261d7bae5d7;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;4;It's a fixed project / company requirement;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Developer friendliness;;8;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"AngularJs;Nodejs";The tools are fine, the project is just too old;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;India
93e1690faca9ce3d8e88291c09c210af;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;Our framework is db agnostic;Developer friendliness;;10;;;We don't even have ops;;We create a framework -> we don't do any ops of our own;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Web components ;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;11;Finland
eb7f755070ff0c52bd6f4217eca52725;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Neo4J;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Kubernetes; Helm; Spinnaker; Golang";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Canada
bac9f586382479b50498da0dba420e0a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Developer friendliness;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Go;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);10-19;16;United States of America (USA)
eba7de9c9afb2214f7da6a2669619fe2;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;2;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;NetBeans;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;United States of America (USA)
40e3edb9c32a6c928b328ed2a892e734;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Georgia
68b6eb2136b77ec67cea57970bae5fa9;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;3;It's a fixed project / company requirement;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;;We don't adopt DevOps.;We react to the user complains;Performance has never been a requirement;;Angular;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Midsized company (I work in an open plan office);3-9;30;Germany
7999b3d4771738afc0eaa020caac2fd9;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Familiarity: we know it the best;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Jeddict.github.io;We're good, it feels productive, and we know how to move forward;IDE;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;5;Netherlands
4f03a6735c20c5547d976fc5454bd5bf;NetBeans IDE;;;Productivity;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"Maven;Docker";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Brazil
c5cb835bcb9b0750a78dec452ab5f8b3;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Working in the JEE environment with the needed results.;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);50-100;15;South Africa
dc5b7131118938c07aefb15d3538f2bf;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;;legacy systems;8;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;MySQL;;Familiarity: we know it the best;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;JEE7;The tools are fine, the project is just too old;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;15;France
03d6f775047377e431b3b405788b27de;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;;JAX-RS;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Reactive Programming, Microservices, ;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);3-9;6;Iran
fb357e00b6a5fdba375d664ede4d719e;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Wildly swarm ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Italy
f5074916643159e8e6be8d3bb1ad224f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Functional superiority;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Gluon Mobile;We're good, it feels productive, and we know how to move forward;Database;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;30;United States of America (USA)
5282b83b8b2ed169a7e5622fe248ff7a;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;;System restrictions;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Wildfly swarm;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;9;Brazil
e76c9fc83856e4af210fc4899cc67b9e;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Company policy: all projects use it;;7;;;Postgres;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Happier team;;We react to the user complains;Performance has never been a requirement;;"Spring boot;rabbitmq;elasticsearc;angularjs;";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Brazil
cef075a165731521251ad4c736cb9b4b;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Amazon RDS;;Budget;;3;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;T;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;United States of America (USA)
e59aeb1b33e2612b70a102d705492970;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;IoT;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;17;Brazil
cbbe1b9ee4bc6b3a908bdad470529fc7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Angular;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Small company (I work in a shared office space or small office);1-2;20;Brazil
aa08bb3dbd278dc76fbd2b5e36f79b0a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;MS SQL;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Happier team;;We have professional perf engineers in the team;Performance has never been a requirement;;Esb;It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;United States of America (USA)
eb9e32e97e24496e1c35ff44b1d8e251;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8, Java 9, Spring 5;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;United States of America (USA)
3a9a19cc3232a42f1ed984eda6fd634d;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MS SQL;;Familiarity: we know it the best;;5;The price of the migration is enormous;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"JavaEE;CDI;JAX-RS;WebSockets;JSON;AWS";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Canada
c79ac19f74a02470510226a0e6ce1ac1;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Java EE 8;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;12;United States of America (USA)
5dc495443c0a276569b1b0f38a8a6959;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Elk;appdynamics;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Startup (I work in a small cupboard at home);3-9;5;Brazil
e65791bb800c31fef28d429944777106;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Vaadin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Austria
0ee697f21e7f528ef6141cfa64a8b41e;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Jee8,IntelliJ,payara,Spring boot;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;25;Sweden
fe5584a77fd086f21907ceb9452db1ea;;IBM Rational Application Developer;Company policy;;1;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;2;It's a fixed project / company requirement;;Java EE;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;SOA;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;ReactJS;It's the worst, we barely move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Belgium
54654189a26e3327a062c788eedb0a44;NetBeans IDE;;Functionality: it's superior;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Developer friendliness;;7;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Chrome headless;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Small company (I work in a shared office space or small office);10-19;11;Spain
f6ee6077923f0f550207cb54aebf9754;;RAD;Company policy;;5;;Company policy;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;;JSF;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;5;It's a fixed project / company requirement;;;IDMS/DB2;;Legacy MF applications also rely on that data;5;The price of the migration is enormous;;Not interested, we like the wall where it is;;What is DevOps?!;We react to the user complains;;Works fine;None;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Belgium
005cccdf7057ed199957a0cd2dd6006b;;RAD;Company policy;;2;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;;IDMS;;Legacy system;3;The data is too large to migrate;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;none;It's the worst, we barely move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;Belgium
8edcc1af98df863e6095cef1ef6b4a14;;RAD;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Angular;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;10;Belgium
67e679f56538d27f5c90eb9fd3899e23;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;;DB2;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Cucumber;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;Switzerland
8c206cbe65cffc18a18439ab9e94bab7;NetBeans IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;5;;Infrastructure for other setup not yet available.;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Payara server;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Midsized company (I work in an open plan office);3-9;15;Sweden
1de933f04619147466f3b59fde41cb32;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Couchbase;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"couchbase;spring5;kubernetes-charts";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);50-100;12;Spain
307fa279491bdedd1df46c6217317ffd;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;gRPC;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Small company (I work in a shared office space or small office);1-2;6;Italy
4ec2cea5246154060eae932158fd54ca;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MySQL;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Spring Boot, ReactJS;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;4;Poland
0dbb30cbe69b3d83d7e3b95f42ebabd9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;spring boot;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Startup (I work in a small cupboard at home);3-9;10;Austria
b3fa8d661f1da140b90d743e36027689;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;ElasticSearch;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"fabric8 maven docker plugin; elasticsearch; infinispan; wildfly";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Startup (I work in a small cupboard at home);1-2;15;Italy
73cc3fd525ada3aaf56520b7dbe82141;IntelliJ IDEA;;Functionality: it's superior;;6;;;Scala;;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;scala;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Poland
e998d6cb4cc85a0c8f721d9435e2f51c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Familiarity: we know it the best;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Spring 5;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Startup (I work in a small cupboard at home);3-9;3;Poland
1db98af0484553befa8f67327be78848;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Budget;;4;The price of the migration is enormous;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Poland
8aa4d110e6c89661855c0f1939d031ab;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;5;;Audits are aleady done;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring Cloud Contract;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Contractor / Freelance (I work when, where and for whom I want!);50-100;7;Poland
c3992a33ed91d1e164695fa9a0f47b53;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Company policy: we're a $LANG shop;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Hype: they told us it's the next big thing;;5;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The project kinda works, don't touch what's not completely broken;;MongoDB;;Familiarity: we know it the best;;2;The price of the migration is enormous;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;GraphQL;The tools are fine, the project is just too old;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);10-19;20;United States of America (USA)
76ac54ab7b6249f9f455bf28aa7013f4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Ecosystem: community, tools, libraries;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"akka;clickhouse;cassandra";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Startup (I work in a small cupboard at home);3-9;10;Russian Federation
62bddbe88c47d45d215f947f0e8664f7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;elasticsearch;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;6;China
9b14790924ea21bd0429e814fe4170a6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Doing boot ;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Great Britain
9480b3583388054e36e9e02094a19366;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;;Android;4;;Need to support old Android devices;;Android SDK;Project requirements: it was the best fit for this particular project;;5;;Cannot move away from it;;Mobile app;Company policy: all projects use it;;4;The team is large and inflexible;;;SQLite;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 8 with desugar in android gradle plugin;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Poland
6e2083c1d4de93b7da6fa2e2e1167cd8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"spring 5; junit 5; spring boot 2;";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);10-19;6;Poland
4ab7bfa7fb98064c34299d1da237fe67;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Diorite;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Redis;;Developer friendliness;;10;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Diorite;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Startup (I work in a small cupboard at home);1-2;1;Poland
9c3acaf493f817530cfc33663bc4927e;Eclipse IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Happier team;;We don't care;Performance has never been a requirement;;Diorite;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Startup (I work in a small cupboard at home);10-19;4;Poland
ce897c4d0c06e030fd344acbb31b41f0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Our application stack encourages it;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;groovy;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;3;Poland
4ea372fa1c558377c4308d3db681e144;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Groovy;Diorite";The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;3;Poland
527cf5e9329c742cd4dfc7d8d6b85ecb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Groovy;Spring";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);1-2;2;Poland
71463bf944a8dfeb33f7dc6d03ddc9ad;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Familiarity: we know it the best;;7;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Poland
5588a58272f826c61763167278dc3044;IntelliJ IDEA;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Gradle;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);50-100;15;Russian Federation
692785b1f2f3c343d2b270248b41de26;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;It's strongly encouraged by our application stack choice;;7;;;We have a DevOps engineer;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;Undertow;The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);50-100;12;India
d89c8911b5171790637fdff8c4c16e4c;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Apache Meecrowave;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Contractor / Freelance (I work when, where and for whom I want!);50-100;30;Austria
5a2e2e2e602ee88e116474dbd4f10b80;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;;Datomic;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Datomic; Kotlin; GraphQL";We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Startup (I work in a small cupboard at home);1-2;17;Switzerland
470106da1e16e98a016770eff9d0d660;NetBeans IDE;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;java.time api;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Germany
29894bfe75cc4a6a67167fc60d5a59c3;Eclipse IDE;;Budget;;4;Not enough money in the budget;;Java 7 (or older);;;Older project, predates Java 8;1;It's a fixed project / company requirement;;Java EE;;Project requirements: it was the best fit for this particular project;;1;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Hype: it was a modern approach;;1;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;It's strongly encouraged by our application stack choice;;10;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Functional programming;Clojure;Vert.x";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;12;India
60f012aa67301c0dbdf49a91bd87c888;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;4;;Nothing, currently moving away.;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring 5.0;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Netherlands
bfdfcaf3b4e186cc4913f22455d5ccb5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;5;It's a fixed project / company requirement;;Java EE;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The team is large and inflexible;;Oracle DB;;Familiarity: we know it the best;;4;It's a fixed project / company requirement;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Kotlin;";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Germany
9e53fa7deaf9b72b0c1db770b8d0a6c9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JavaEE 8;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Germany
041785ad4e5f05a41b8094db028d34e4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker and orchestration tool;It feels unproductive, but the project is easy to maintain in production;Project architecture;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;20;Brazil
cb1bfe33a115df8fcc71da27dec440cc;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;swagger;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);10-19;10;Portugal
a4b0ebb0c2c5876100c709a9549f2749;IntelliJ IDEA;;Company policy;;6;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Hype: it was a modern approach;;4;The team is large and inflexible;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kafka;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;14;Belarus
78fe89d3f896153876dbf66e8f99f9d3;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;It's a fixed project / company requirement;;Spring ;;Familiarity: we know it the best;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We don't care;Performance has never been a requirement;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;Russian Federation
3397a8401351f9a487aff655de605de1;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;;performance is extremely important to us, not sure why the possible answers are negative?;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;22;Belgium
e60cefbe01e9a73cb02f767a1b6a4124;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MySQL;;Developer friendliness;;5;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;JAVA EE;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;India
7fbd89fc9c34087846d95e33ecfcd2c6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;30;United States of America (USA)
0379d55d4866d22a2f19772a85b43d48;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Hype: it was a modern approach;;8;;;MongoDB;;Developer friendliness;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Vs code ;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Germany
bd8fcfa2ad562ccdc34cb6714e97db48;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Our application stack encourages it;;10;;;MySQL;;Familiarity: we know it the best;;9;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Scala; JavaEE; RabbitMQ; PostgreSQL";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Small company (I work in a shared office space or small office);20-49;5;Ukraine
4f189c24bcbf484455de00e5f544257f;Eclipse IDE;;Company policy;;6;;;Java 8 (or newer);;;Client wants to latest versions for implement;10;;;Spring ;;It's functionally superior;;10;;;;Sap hybris which includes java EE,spring,jstl etc;Company policy: all projects use it;;10;;;MS SQL;;It's strongly encouraged by our application stack choice;;10;;;We don't even have ops;Better internal communication;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Jdk9 java EE 8 spring frame work 5 saphybris 6.4;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;4;India
001c2bdf92d9aa3d3cd9f9ed675535d8;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Payara micro;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
dbebb0d7e64cf1ea888d1f08b8c97015;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;;Play 1;Hype: they told us it's the next big thing;;1;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"selenide;docker;testcontainers;spring boot;appium;java 9";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;15;Estonia
0a3087188d7c2c27aa28d09ea03720ae;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Poland
65d0cf71c618df44f6cc61259f9b41e9;NetBeans IDE;;Budget;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;8;;;Monolith;;Our application stack encourages it;;10;;;;Cockroachdb;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;;No perf issues;Errai/GWT/J2CL;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;20;United States of America (USA)
d5dec52d0beb83119cb084a339bc9d65;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Ops friendliness;;6;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;kotlin;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;5;Russian Federation
e2692e50130e312a5b7346fe0e05af8b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Panama
32dae635c106948fec53ae75ca0d0dca;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;;DynamoDB;Ops friendliness;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;swagger;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Ukraine
a4916b8c31998ef485660a5f4628964c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Company policy: all projects use it;;6;;;Postgres;;Budget;;7;;;We are the DevOps ;Stable operating environment;;We don't care;Performance directly affects our bottom line;;kubernetes;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Peru
bb5711eb09302c4ef224cb2c7693a4bc;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;None;;;;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Aws;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Small company (I work in a shared office space or small office);10-19;20;Great Britain
d499a3c517f9f13d1a8016be769301c1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;;customer' wants;3;The team is large and inflexible;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MS SQL;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster delivery of features;;We don't care;Performance has never been a requirement;;Spring 5, Java 9, Vue.js;It's the worst, we barely move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Ukraine
c37fe307d64a2e2d272c9b3a1ed6bb81;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;jhipster;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;13;Ireland
327100afc37ba5a1370a7a5ca9257a58;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"scala; kotlin";The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;15;Poland
0429d3bba47487b61f8868f7f1a9efe4;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;It's functionally superior;;10;;;Desktop app;;Our application stack encourages it;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;jcef;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Startup (I work in a small cupboard at home);3-9;4;Poland
67a210a35978b524ef071e3876163f7a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;9;;;Microservices;;Our application stack encourages it;;9;;;MongoDB;;Developer friendliness;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spark and docker;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;14;France
2072bc27544866042b934f7b32a3d08b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;grails, springboot;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Small company (I work in a shared office space or small office);3-9;12;Dominican Republic
86dec82592aa350bb28d0d1aae3a4a7e;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Budget;;8;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Jeddict;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;9;
b8c00b677945279279a2fed78f8dc0d6;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;jrebel;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);100+;6;France
ee109574ac8b161fb5b32eb2cbf81b6e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;;Simplicity;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;;Developers spot/fix issues as they arise ;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Great Britain
82e7c7278efa7f02f2cf71c98e6a06b6;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Hype: it was a modern approach;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Chef; Docker; Kubernetes;Nashorn";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Startup (I work in a small cupboard at home);1-2;11;United States of America (USA)
92367715bf6f01e025fd4dc24384a351;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Budget;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Angular2 and JEE7;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Startup (I work in a small cupboard at home);1-2;10;Colombia
42094874d5899117d61595f600ded784;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;db2;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"java 9; java ee 8; grpc";We're good, it feels productive, and we know how to move forward;Database;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;17;South Africa
d6f33f91cd7c915c6e9e27ccf15937cb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Company policy: all projects use it;;8;;;Postgres;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;"Angularjs;golang; Scala";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);10-19;13;Nepal
a8a3477df64cf49619a4cc70bd3a3325;Eclipse IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;Performance is 100% Is between acceptable boundary;"wildfly swarm; containers; microservices; ";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;12;Dominican Republic
6088d50154c42ba796680c44b378845d;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;SOA;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;;no ops;We react to the user complains;We don't know how to properly address performance issues;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Italy
3e7f8effbad17ae78f20684b54217675;;IBM Rational Application Developer IDE;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;We're tied to specific tooling for the language;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;SOA ;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;4;India
bdefc41941ac25fe9b10094bd74861f6;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Library or framework;;Our application stack encourages it;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;payara;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Great Britain
11fd9d23288bb61584f8dbc65b0b56c8;NetBeans IDE;;Company policy;;6;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Sprint Boot;Kotlin;JAX-RS;CDI";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Small company (I work in a shared office space or small office);20-49;6;Iran
5573f84e57964aaad282c30b3052bc02;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;JavaScript;;Company policy: we're a $LANG shop;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;redux;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);100+;8;Belarus
df2c2f9fbc5a259e3975ac55451ae312;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;spring boot;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Spain
ef1a935959629b03091e8f3ea49aae83;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;AWS Lambda;I wish we've chosen a different set of technologies;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Denmark
a380345317408ed9654a470b32796923;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;;Legacy;10;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Docker, Java EE Microprofile;I wish we've chosen a different set of technologies;We need to become DevOps;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Ecuador
b02585d4f98c9ef7ad4bf219d66fcb4c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;It's functionally superior;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Postgres;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;XRebel;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);10-19;11;Estonia
697cb291772601512bd10c11ee711799;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Apache camel;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;20;Denmark
2bd79fc65378f975d5db06ace4489900;IntelliJ IDEA;;Company policy;;6;;;Scala;;Ecosystem: community, tools, libraries;;7;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;6;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;Cassandra;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;akka;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Ireland
c3863eb184163074d56c4655a2e4811f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;It was an experiment;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;MongoDB;;Developer friendliness;;9;;;We don't even have ops;Faster resolution of problems;;We don't care;Performance has never been a requirement;;"Thymeleaf;ES6 w/out Babel;Rollup;MongoDB";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;10;New Zealand
aab8565ca6fe1c94405a80be2dc4b4dd;NetBeans IDE;;;I love it;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Prometheus timeseries db;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;Greece
4495f5f829f0bcd1e58b3a8871b40d21;;rad;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Library or framework;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Angularjs, Spring Boot, AWS, Spring Rest, OAuth, Distributed Cache, NoSql;It's the worst, we barely move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);10-19;10;India
0471a4b4e38bfd6540e8a68434c6594c;;Spacemacs;Functionality: it's superior;;10;;;Clojure;;Functional superiority;;10;;;;immutant, yesql, etc;Project requirements: it was the best fit for this particular project;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;timbre;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);50-100;12;Russian Federation
9654312b45bb37992c7ba369e1ef4256;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;;plugins four our company product;Our application stack encourages it;;7;;;;Custom database;;it is our company product;6;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;spring boot;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;13;Spain
12e7e7c229d855aac147ec52b29ac8d6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;None;;;;;;Not interested, we like the wall where it is;;No adoption;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring WebFlux;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);100+;17;Spain
b2099e9d7aef548f8e17b45de74f94fe;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;Derby;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;No much excitement, sorry.;It's the worst, we barely move forward;We need to become DevOps;;Analist;Midsized company (I work in an open plan office);20-49;6;Spain
6590a52633c175221ba2040665fca1d8;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;8;;;We don't even have ops;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;jcef;It feels unproductive, but the project is easy to maintain in production;Project architecture;;Computer Science Student;I'm actually out of work (How insensitive of you!);1-2;6;United States of America (USA)
f63c6d5e6f37a45942dffa062c0c2f0b;IntelliJ IDEA;;Functionality: it's superior;;7;;;;Go;It was an experiment;;9;;;;Go;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;In memory key-value storage;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Go, AWS Lambda;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;;Test Engineer;Enterprise Company (I work in a cubicle or large open plan office);100+;7;Germany
bfeb7e3f65ed83f367153d6d34e8e8cb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;;Grails;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Happier team;;We react to the user complains;Performance directly affects our bottom line;;"angular 2;reactjs;rxjava";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;18;Denmark
10ea70de5516e05b26a2c3f87a7d7162;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Big Data;I wish we've chosen a different set of technologies;Database;Consultant;;I'm actually out of work (How insensitive of you!);1-2;20;United States of America (USA)
bb4043701245e945ddfbd156c8d18856;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Amazon RDS;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Jigsaw;Typically, it's a lot of firefighting and bugfixing. Not much development.;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;10;United States of America (USA)
a99075e52bb4d90588f9c6bf9d05dab7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;;None;;;;;;Not interested, we like the wall where it is;;We're not adopting DevOps;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;38;United States of America (USA)
cc2935a659053337e1237816adc44a11;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Microservices;;Our application stack encourages it;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"payara micro;jeddict;docker";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);10-19;3;
490c01b077e9de0b586c22f84b7b6e9d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance has never been a requirement;;"Java9; Spring5; JUnit5";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;1;Romania
1bb6034a96a0beba4c80c33d7367854d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Hype: they told us it's the next big thing;;6;;;Microservices;;Company policy: all projects use it;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;;Contract;"junit5; ansible; jenkins2";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Great Britain
6edec2fb3a61c10697d7c7ac81ae57a5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Spring ;;It's functionally superior;;9;;;Microservices;;Hype: it was a modern approach;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;21;United States of America (USA)
e824b19145b21f187e4f48197341a040;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;7;;;Microservices;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Rx Java; Kotlin; AWS; Akka";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;10;Great Britain
1f092d9bfac4a26470635e4279d42830;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;;None;;;;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Java8;The tools are fine, the project is just too old;Application stack ;Software Developer;;Midsized company (I work in an open plan office);20-49;8;Sweden
a2dffc375cf3f7812e7712b429e56655;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Hype: they told us it's the next big thing;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Familiarity: we know it the best;;7;;;We are the DevOps ;Better internal communication;;We benchmark or have performance tests to catch regressions;;It's as important as good architecture, clean code, tests etc.;Latest IntelliJ IDEA. But I work for JetBrains....;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);3-9;17;Spain
b025d8151e3d42b0a6bb3688726bc594;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Ops friendliness;;9;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"kotlin;elixir";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;16;Netherlands
34f793ef7c5fd524c49501efb344343e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"CQRS; Docker; JOOQ";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);10-19;10;Germany
a2e4cd84b16068da27d98501e89b3d30;Eclipse IDE;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;MariaDB;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;;Haven't had any performance issues yet;Docker;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;12;Finland
0ea629a58b374ed8fa0264e3fc1021d9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;RxJava;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Poland
e744d11dc620e9d40a428b2831258a31;IntelliJ IDEA;;Familiarity: it's what I know;;2;;The other IDEs are even worse.;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;;Best of breed open source.;10;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;OpenShift;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;19;United States of America (USA)
0db3417cda5ce0970b7edd3dfbae4d02;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Hype: it was a modern approach;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kafka;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;France
3db1ead3c70698d7f886c2a4846d6c98;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;React Native;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;18;India
cbdb6f8dfb854901614d1c828720128c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;MS SQL;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"microservices;angular2;";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;United States of America (USA)
71fb08f553572ef0d70c2431ba071873;IntelliJ IDEA;;Functionality: it's superior;;7;;;Groovy;;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;;Service Based Architecture;Suitability: it fits our requirements most effectively;;9;;;;MariaDB;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"MariaDB4j; Flyway";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;19;United States of America (USA)
3ec77db473230be1b18ca8d27c7f2b6c;Eclipse IDE;;;Just to know where it stands when comparing to IDEA. Red Hat tooling is another reason for some projects.;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Microservices; Kafka; Openshift; Polyglot(Node,Jascript,Java,Scala)";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);10-19;20;Finland
eaafea44baedcbcccb5b675717923e1a;IntelliJ IDEA;;Company policy;;9;;;JavaScript;;Ecosystem: community, tools, libraries;;6;;;Java EE;;Familiarity: we know it the best;;8;;;Microservices;;Our application stack encourages it;;7;;;MongoDB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;2;Estonia
8f9e25b6cbcc22b8a35eaa13bf508b7b;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"MicroProfile;Jeddict";The tools are fine, the project is just too old;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);3-9;7;
a02a8ca72844b117e6fdb224dcd431bf;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;3;We're tied to specific tooling for the language;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;MongoDB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Ethereum;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Germany
3b53ec48f919d8d29817f29f24b9e284;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;;Mix Spring with in-house monstrocity;Company policy: we have other projects using the same stack;;1;;Low skill level within the team;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;;Low skilled team both on the dev and ops side;;Postgres, Memcache, ArangoDB, Elasticsearch;;Bad architecture;1;;No backing from management;At least we talk to the Ops people;;Old organisation structure and not willing to change and improve;We react to the user complains;;The philosophy is put everything that needs to be performant in Memcache (CTO's philosophy/decision);Nothing, for some reason the development, ops and management thinks all is ok with the bad (untested legacy codebase);Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);20-49;12;Italy
3a4b442dae596ba64ed0b998be76c058;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;JPRO;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);1-2;15;Germany
13cddae6612d2a8cd786f98f545ecf0a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;;Java EE application server;;It's the project I work on;8;;;;None;;;;;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Java 9 + JPMS;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;;Software Engineer;Midsized company (I work in an open plan office);10-19;1;Great Britain
57ae1ea1692557abb9fc3c55d3d7e0a7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Happier team;;We react to the user complains;Performance has never been a requirement;;IntelliJ WebStorm is a great tool for Angular development. It has great auto completion and great support.;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Slovenia
df6256edc697fe4105f157cde0b3dc1a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Hazelcast Jet;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;14;Singapore
e692083b472f448e97cdcc3a3f19d787;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Company policy: all projects use it;;4;The team is large and inflexible;;MySQL;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Spring Boot 2;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;United States of America (USA)
230c13072928eafd7368a511b89dfb40;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;9;;;Microservices;;Our application stack encourages it;;8;;;MySQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"spring 5;reative streams";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Romania
7863eb802095d79352d711fe6fc7b6c0;;Atom;Functionality: it's superior;;7;;;Clojure;;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;5;;No specific reason;We are the DevOps ;;We discovered it was what we were doing already!;We have APMs and monitor health of the deployments;Performance has never been a requirement;;*shrug*;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Great Britain
1c8e946b6418e0ef26428e4c6ac0bf7c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;;Pulsar (www.dse.se);It's functionally superior;;10;;;Library or framework;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Pulsar Flex;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;25;Sweden
1bf9be0cee345637ea58cadd3ca5bada;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;It's functionally superior;;9;;;Microservices;;Hype: it was a modern approach;;6;;;MySQL;;Familiarity: we know it the best;;6;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Spring Cloud;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;9;Ireland
6f9f67d0a9fb72c48c665edd7793a820;;Emacs;Functionality: it's superior;;9;;;Clojure;;Functional superiority;;10;;;;Clojure libraries as required;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Datomic;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Onyx for data streaming;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);20-49;29;Great Britain
a2a8a9a4d4e8ab1cd9c6b6a5a7fdcdc6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Serverless;;Suitability: it fits our requirements most effectively;;10;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;Eclipse CHE;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;35;United States of America (USA)
6efa8e939ac1bb27cf07cd8a9cc124ec;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;;none;;;;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"InfluxDB; Grafana";Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);10-19;15;Canada
018843b893d404ba53f17fe50f669cf7;IntelliJ IDEA;;;Not company policy but most people in the company use it;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;Hive/HBase;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Looking forward to java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);1-2;4;Great Britain
c6616af8588e076834272b3167d32215;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;"vert.x;rxjava";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Startup (I work in a small cupboard at home);3-9;7;Germany
769cad38a47e4d301c28230302a702da;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;8;;;;Grails;Familiarity: we know it the best;;6;;;Monolith;;Company policy: all projects use it;;4;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;5;The price of the migration is enormous;;Not interested, we like the wall where it is;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Italy
3d628921ff135230398c3b79792aa4e4;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Our application stack encourages it;;9;;;;ElasticSearch;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Postman;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Startup (I work in a small cupboard at home);3-9;1;United States of America (USA)
efa573936ba8f848f62e8cb79c2d89b1;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;docker;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Great Britain
46193305f735ebbb3ccd9f1ba7ac2eec;Eclipse IDE;;;maintaining a minimum functional environment that others can use without added cost;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;project supports all jdbc driven databases;;we provide tools for other companies and need to support them;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Heimdall Data, to offload database caching to the application server tier without code changes.;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Startup (I work in a small cupboard at home);3-9;10;United States of America (USA)
62090808b1816f806e9cc3d9e24bf722;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;5;Bangladesh
dcd89a4ef3aa85b518a4b2e0fc1f3a76;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Custom in-house monstrocity;;Hype: they told us it's the next big thing;;7;;;Microservices;;Hype: it was a modern approach;;9;;;Postgres;;Familiarity: we know it the best;;7;;;We don't even have ops;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;Kafka ;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Contractor / Freelance (I work when, where and for whom I want!);1-2;6;Great Britain
7d5238237e2ba9a46feef9461c7605f7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Budget;;6;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;;It is necessary;"Spring Boot; AWS";We're good, it feels productive, and we know how to move forward;Database;Consultant;;Midsized company (I work in an open plan office);20-49;21;United States of America (USA)
14b7996750f5048752820c9ac1da925b;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Reactive stack java features;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);20-49;12;India
bcf11e5f5e4caa3a4b10abe09c65915d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Ecosystem: community, tools, libraries;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;8;;;Microservices;;Our application stack encourages it;;7;;;Cassandra;;;Don't know;5;It's a fixed project / company requirement;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;10;United States of America (USA)
088ed8261d0f7985d24d20aa0ff076c5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Vertx;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Hungary
a9e67ecf6fcd06e2868b5263057c8f7e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Budget;;6;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Google cloud platform;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Indonesia
8e3b7e9d4eb9ec9a9ac91284b54c669c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;It was an experiment;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;5;Not enough time to learn the new application stack;;Desktop app;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Familiarity: we know it the best;;7;;;We are the DevOps ;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"javafx;AndroidSDK;java9";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);1-2;16;Great Britain
9714981d08e7ce49c3e024aa40d4ce51;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"CQRS;Axon;Kafka";The tools are fine, the project is just too old;Project architecture;Consultant;;Midsized company (I work in an open plan office);10-19;19;Germany
ff0472e0edd17ca198dea96046edb8f8;Eclipse IDE;;Project requires it;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;7;;;;DB2;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Angular;I wish we've chosen a different set of technologies;Application stack ;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);100+;10;Spain
79cf9016098561564ea81671c370f977;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;AngularJS 2, react;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;11;India
95cdcfce68fe8a416be2d2599cc6d594;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Hype: it was a modern approach;;8;;;;DB2;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Boot;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Ireland
38f9e75706e97006d41d73aa8398ff95;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;;Legacy app;10;;;;WebObjects (sic);;Wrong decision by another company;1;;We are about to kill it - slow and painful;;Piece of shit;;The original developers had no clue of coding what so ever.;1;;We are moving away to a more flexible, (micro) service oriented architecture with a proper JavaScript frontend;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;;We need to kill the legacy crap first which automatically brings more performance.;"Spring Boot; ELK; Angular 2 / 4; Docker";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);3-9;12;Great Britain
ef8bbf71cbb0e057e404635e9a37696f;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Angular;We're good, it feels productive, and we know how to move forward;IDE;Team Lead;;Midsized company (I work in an open plan office);10-19;4;Lithuania
bf33b02f3c1ee6ae4d40c9f006eedf25;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;4;;Don't have the time.;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Ratpack;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Germany
4ef88a39ac6fcc6c8b8c7cde3c31bdbd;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Familiarity: we know it the best;;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;.;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;France
73526c17b0271238cbd6277de69fdce5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Ops friendliness;;10;;;We have a DevOps engineer;Faster resolution of problems;;We don't care;Performance has never been a requirement;;React;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);10-19;4;Poland
9988ee8376a8402dd9ed508402fa1aa0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;25;Great Britain
19889bd824561d6db0ec4c9cfdddb4cb;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;jenkins;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);1-2;35;Great Britain
bd5a09397972d2a31c1cb0357f92aeec;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Custom in-house monstrocity;;;Legacy system;4;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MongoDB;;;Legacy DB;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"Microservices; Docker; Spring; Google Datastore";I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;4;Great Britain
103946b901fa44d2935fdca3cb055337;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Angular 2, Docker Swarm;I wish we've chosen a different set of technologies;Programming language;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);3-9;24;Estonia
8c4b3ef5eba3b9ae4e4c20e4bf9f3a7e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;;MemSQL;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Elixir;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Germany
da0879cbaefcaadd911d5bc9c2e506ae;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;United States of America (USA)
b3af957a812b26647e9bd2b905ce0291;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;Trying to move away but the project is large and it is a slow process;;DB2 on the Mainframe;Company policy: we have licenses already;;3;The data is too large to migrate;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;AngularJS;It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
c416bf5ed716faaa1678f22528e41223;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;Project;7;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Spring;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);1-2;2;Ireland
4b06df498efed1964417e67b9213363d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Golang;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Germany
8807fdcaccc19aa638e195f0061343ef;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;;osgi based split architecture;Company policy: all projects use it;;4;It's a fixed project / company requirement;;Postgres;;;no idea;7;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;i hope to use jrebel again :);I wish we've chosen a different set of technologies;Application stack ;;software developer for this project / dev+arch at other projects(external);Midsized company (I work in an open plan office);10-19;18;Belgium
89fb9f52debe7b665208325a197f2cdf;Eclipse IDE;;Project requires it;;7;;;;COBOL;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;1;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;;COBOL Data Files;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;We don't even have ops;;We do not have DevOps;We react to the user complains;We don't know how to properly address performance issues;;java;Typically, it's a lot of firefighting and bugfixing. Not much development.;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Colombia
10f661a17382d0eb0bb8613ef4986550;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;It's strongly encouraged by our application stack choice;;6;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Camel;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;15;Belgium
170692138cb6eeab60ff7abc55436b10;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Familiarity: we know it the best;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;;N/A;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"ceylon;spring boot;kotlin";We're good, it feels productive, and we know how to move forward;Programming language;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;14;Mexico
668ad374cdb8f2a4befc6606cb061c49;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;We moved all products from Java7 to Java8;10;;;Custom in-house monstrocity;;;It was decided before I came;3;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;Oracle DB;;;I do not know why they chose it.;10;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;-;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;4;Ukraine
da5abeac76b6feb0f7891ebbcf69c82a;IntelliJ IDEA;;;Performance;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Our application stack encourages it;;9;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Spring Boot;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
11dffb13b0c2dd102f68890bd6ac2ecc;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;;Software Engineer;Small company (I work in a shared office space or small office);3-9;22;United States of America (USA)
f096c68d6ffe3e6edc7a8a3a83f984e1;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Company policy: all projects use it;;8;;;;DB2;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Scala;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Netherlands
64f5f73e492f4d2052d09c899fbd77a6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;rabbitmq;We're good, it feels productive, and we know how to move forward;Database;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;France
d78a2ef09ff79824cad7fea8980b3d10;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Developer friendliness;;10;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"git;maven;tomee7";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Brazil
f2ba1d84fd4d1e62f85b9d2f83826a0b;NetBeans IDE;;Company policy;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"node.js; docker; java 9;";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Germany
a208c2605098ecabeec5ec0faa07ea2a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;docker;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;16;Spain
c0acf0ddf1a1a37596a36e50edfd6566;Eclipse IDE;;Budget;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;;company directive;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Vaadin, JPA, Java 8;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;31;United States of America (USA)
8d152edcae0f3f83c11c450fdbd5e5b0;IntelliJ IDEA;;;I am tryin it;7;;;Java 8 (or newer);;;We have to move on, that's how it goes. Otherwise I would still do ASM...;8;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;;We always had this approach. Seeing everything as a whole. Plus infrastructure and application architecture goes together;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Nope;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Contractor / Freelance (I work when, where and for whom I want!);1-2;17;France
a97c4d864caafe395c01bb1552210dc4;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;;Used an old tool as base for the new one, the choice sort of already made by others...;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;"java8;";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);20-49;20;Finland
51a616b47cdbbf63cd0a24bb6f06d5ba;NetBeans IDE;;Budget;;7;;;Java 8 (or newer);;Functional superiority;;6;;;No stack, i.e. plain old Java;;;Programming Learning process, better to get to know the Java language first before moving forward to any stack;6;;;Desktop app;;;Programming Learning process purposes;6;;;;SQLite;Budget;;4;;Needed lightweight DB system;We don't even have ops;;Not contemplating adopting DevOps for the moment;We react to the user complains;We don't know how to properly address performance issues;;none planned for the moment;It's the worst, we barely move forward;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);1-2;0;Spain
188c52b9d7eb75b3cf1e3ffe9970138f;Eclipse IDE;;Familiarity: it's what I know;;8;;;;ColdFusion 2016;Functional superiority;;10;;;;Coldfusion 2016 running on Tomcat with Oracle Backend;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Grails 3;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Canada
6f378fe7b9fc31b69d52f4e35755da98;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Scala;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;18;Great Britain
cf49526bb6e00578a2cb13bf4f4f7738;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;;big data;Suitability: it fits our requirements most effectively;;10;;;;Hive;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;akka reactive streams;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;Great Britain
1cb4ef783e29c15ffd0027491580d9aa;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;9;;;Redis;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Vertx; openshift;";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Spain
a59c68fb7f63fcbf4108da528240de09;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;8;;;Library or framework;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;India
91209474cef16ae38cf3d23a024fe963;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Familiarity: we know it the best;;7;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;Usually fast enough. Fix it when it isnt. ;Kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);10-19;8;United States of America (USA)
96ad352b5f3ccb577f61180efa362669;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Teradata;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Spring Boot;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Czech Republic
d8b1b78ac4a0ce2ebb3365112b19b1ef;IntelliJ IDEA;;Project requires it;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Method-R Profiler;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;Norway
aa4e4ac7591c43772f16c7ffed2fd740;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Neo4J;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;XRebel, JRebel;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;11;United States of America (USA)
4cd37ed9cb82b6db5f6dc34f34772a77;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;;Grails;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Better internal communication;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Ratpack;Typescript;Java 9";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);3-9;25;Canada
8c380b43ac42a74ab90ffc74f0489fd8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Team skills: it was what we knew the best;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Developer friendliness;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Node; Clojure; Kotlin";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);100+;17;Brazil
730518ac686750662a0c59e11c088239;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;Slack, hybris;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;11;Germany
5b6f069394c7376f0f247dbefd67f6e2;IntelliJ IDEA;;Project requires it;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;;IoT Firmware;Suitability: it fits our requirements most effectively;;9;;;;None;;;;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;;Policy;Java 8;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;27;Great Britain
b7edfc3224b26033e0c4ce159990c986;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;;karaf;Project requirements: it was the best fit for this particular project;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Gradle, Hibernate Validator;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;38;United States of America (USA)
9aa67998b49be4360862440dd2c714e7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"docker; javascript, react; jswiremock;";The tools are fine, the project is just too old;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;6;United States of America (USA)
f05dfdf1eff5f080fefe4f88e2fc837c;Eclipse IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;;Eclipse RCP;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;;Modular Desktop app;Suitability: it fits our requirements most effectively;;9;;;;no database;;no need;10;;;At least we talk to the Ops people;;hype;We react to the user complains;Performance directly affects our bottom line;;fuse tooling;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;9;France
ec19230ff5d7c08e1455939ff73a7dcd;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;"IDEA;Java;JavaScript;Swagger;Java 9";It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Canada
4e078a77186ccf81a56bb5e76c9efcce;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;It's strongly encouraged by our application stack choice;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;spring 5;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Startup (I work in a small cupboard at home);3-9;18;United States of America (USA)
c68654abee388067c65f8ef5d2d711a9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Hype: it was a modern approach;;6;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Wildfly 10;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Midsized company (I work in an open plan office);10-19;8;Latvia
2bc1809d289282afb7445ca8c6203d2f;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Familiarity: we know it the best;;7;;;Desktop app;;Our application stack encourages it;;10;;;Oracle DB;;Familiarity: we know it the best;;7;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JavaFX;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Small company (I work in a shared office space or small office);10-19;20;Austria
086ee3e7fee8b549580a6a15903c02a4;Eclipse IDE;;Familiarity: it's what I know;;7;;;JavaScript;;Ecosystem: community, tools, libraries;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Pouchdb;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);100+;25;Great Britain
b34b3aa41d7e1f2a2b8eb1a0231c7558;Eclipse IDE;;Project requires it;;7;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Ops friendliness;;10;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"G1GC;jvisualvm;java.time;lambda;sparkjava";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;India
b08659b67d9fd966b5db0dd6079c2605;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;Library or framework;;Company policy: all projects use it;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"Gradle;Maven;Jenkins;Sonarqube";The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);10-19;17;Germany
eee5bca1fd9a18050ce206d123d47fbe;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;Not interested, we like the wall where it is;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;java 9;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);100+;12;Belgium
62e0a329bfeb4a1ea7c8d512b4a730b9;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Angular 4;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
d1aad0a02bf43b9da5d5eaab657fcbc9;Eclipse IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"elm;nixos ";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);20-49;17;United States of America (USA)
7b112b9025ea49cf88e121c1545ddff9;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Familiarity: we have the skills and know we can make it work;;1;The project kinda works, don't touch what's not completely broken;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;";";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Great Britain
990405b01f3e495680184271919b197a;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;;haven't adopted DevOps;We react to the user complains;We don't know how to properly address performance issues;;jax-rs;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;14;United States of America (USA)
3cd147fc05581eec7d31e677f63e069d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"grpc;docker;aws";It feels unproductive, but the project is easy to maintain in production;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;United States of America (USA)
780a7afd87e143073e9a1a70640dfc3c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Budget;;6;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"spring clound config server; hashicorp vault";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;17;Netherlands
d81c0f176370b64873658f9238ca0ae2;IntelliJ IDEA;;Functionality: it's superior;;5;;Eclipse is lack of intellisense;Scala;;It was an experiment;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Gson;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;5;United States of America (USA)
33b4b77691ad65034ea6530542bc14b7;;IBM RAD;Company policy;;3;It's a fixed project / company requirement;;Java 7 (or older);;;Websphere Dependency;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Company policy: all projects use it;;3;It's a fixed project / company requirement;;;DB2;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;;Less Performance Critical Application;EE7 WAS Liberty spring4 Angular2;I wish we've chosen a different set of technologies;Application stack ;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);100+;11;Belgium
3955f31ffd71939817dac3c3d0432c2b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Team skills: it was what we knew the best;;7;;;;Grails;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Redisson;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);10-19;18;United States of America (USA)
3ef5e0110a7c382388176f70c2f10ebe;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;M;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;12;Great Britain
a779265291ce3533a61f7d271f4cc38d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;6;;;MongoDB;;Developer friendliness;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;"Kotlin;groovy";I wish we've chosen a different set of technologies;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;8;Germany
7c9dc7335dc383fe6041cb5ec174e9ea;;vim;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Spring ;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We have a DevOps engineer;Better internal communication;;We react to the user complains;Performance has never been a requirement;;cucumberjvm;It's the worst, we barely move forward;Project architecture;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);3-9;12;Mexico
aa59870307d635fbeadd0386f9d3c73e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;3;United States of America (USA)
39eabbadc01b803d10af50fbf34903b0;NetBeans IDE;;Budget;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Custom in-house monstrocity;;;Frameworks didn't exist when it was originally written. Consultants were brought in to get the job done. Various consultants at various times resulting in a varied set of conventions and approaches.;2;;Small team, no budget, large bug list. We're just keeping our heads above water.;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;Approval Tests, Mockito, Junit, IntelliJ;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);1-2;31;United States of America (USA)
35d4ad090c2a80b6c6f06e1a1de5939a;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;7;;;;Netty;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Redis;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kafka;We're good, it feels productive, and we know how to move forward;We need to become DevOps;;QA Automation Engineer;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Poland
76cd435de84e283a72fab27110873c0c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"chatbot; NLP";It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Italy
91aa263ead113b5b5c166ab5031b8692;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;;s;We react to the user complains;Performance has never been a requirement;;s;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Belgium
a5a69bb8649905a87b180b5a9cb1ccad;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;java 8;We're good, it feels productive, and we know how to move forward;Application stack ;Director/VP/C-Level;;Contractor / Freelance (I work when, where and for whom I want!);3-9;30;Ireland
d7d7ef58c52857ee7d920366cb2dade7;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;Amazon RDS;;It's strongly encouraged by our application stack choice;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Lombok;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Canada
4552ffc6ba1b7745cf16bc7567617a0c;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Familiarity: we know it the best;;8;;;SOA;;Company policy: all projects use it;;7;;;MySQL;;Familiarity: we know it the best;;10;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Docker;Kubernetes;Java9";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Spain
71b6300970ae76395a2544e8f71cb7b0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;No stack, i.e. plain old Java;;Hype: they told us it's the next big thing;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;"Cloud;Microservices;Azure;Java 9";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;17;Great Britain
2ee41e553cc101d1cc3fa55aabb38139;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Neo4J;;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Stable operating environment;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;elasticsearch;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Startup (I work in a small cupboard at home);3-9;1;Russian Federation
4fe02893754a16a8ab529e4aec3586b5;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MySQL;;Budget;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Spain
d3c822fea01eabc15eea147e58469b0d;Eclipse IDE;;Budget;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Jenkins;Gradle";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);20-49;10;Germany
72ed2f7208ed7f18aebf50eb11b1d731;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Heimdall Data (heimdalldata.com) provides a Java JDBC driver for caching, load-balancing, and fail-over.;We're good, it feels productive, and we know how to move forward;Database;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;20;United States of America (USA)
35593b875ed73c01bde2a621481efb25;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;akka stack, deep learning;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Consultant;;Small company (I work in a shared office space or small office);10-19;20;United States of America (USA)
801c18c04ee055a1c529cb27ecef86a5;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Thymeleaf;It feels unproductive, but the project is easy to maintain in production;Application stack ;Team Lead;;Midsized company (I work in an open plan office);10-19;4;India
8f08616709c6cd7999fc2fb6bd657511;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Hype: it was a modern approach;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;Machine learning;I wish we've chosen a different set of technologies;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;5;Canada
d06ebf37386c08b433f4f9882a4513b1;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;Gitlab;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;United States of America (USA)
fa09542cd98705e76b69c7a332a58633;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;;Custom persistence layer;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;;We don't;We react to the user complains;;The project is not a a stage where performance is critical, so we just worry about what comes up.;Kotlin/Native;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;United States of America (USA)
e162342062230ec117f989b345706b25;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;RxJava;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Slovak Republic (Slovakia)
ad8c7644d70808367e2fa0f88ff73eb2;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;NA;It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
c928f3d189d15650f418be064d59e8ba;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Scylla;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;18;United States of America (USA)
bd22824035acb389769fcdd1cc8a3556;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;na;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;United States of America (USA)
ef140cd968e43e7d01bcedba4da02554;IntelliJ IDEA;;;I won a license;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;6;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;"ElasticStack;Neo4J";The tools are fine, the project is just too old;Virtualization tools;Management (People/Project);;Midsized company (I work in an open plan office);3-9;15;Germany
4a6d832ff3bf5f02b39901195674ff02;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;8;;;Microservices;;Our application stack encourages it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Happier team;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;esddd;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);10-19;13;Poland
6adabccb68040b949c498bad0e13766b;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;old system, never upgraded;10;;;Java EE;;Familiarity: we know it the best;;10;;;;a web app;Hype: it was a modern approach;;10;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Dropwizard; OAuth";The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);10-19;19;United States of America (USA)
3e8f40064dc6a62aa941ba18044bc8bb;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Hype: they told us it's the next big thing;;6;;;Desktop app;;;I dont know framwork;6;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;;i have no idea ;We react to the user complains;Performance directly affects our bottom line;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;1;India
d6cfe2a801e2ab57e81068c8db2a9817;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;9;;;We don't even have ops;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;Java swing;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;United States of America (USA)
f88ffa36f84ecfea1aa8d2749e5d0ad5;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Company policy: we have other projects using the same stack;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"microprofile;jeddict;soteria";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;7;
51d82fe772e6136d0e2e0cd743819248;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;;NA;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;N/A;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Russian Federation
b6033d91e697ddc24dc91b110f85ee59;NetBeans IDE;;Company policy;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We don't care;;Company don't provide policy, tools, training or research to improve performance;"selenium;JMeter;JUnit4;Wildfly;Spring;Tomcat7";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;4;Brazil
943fdfa031775bc56801f3be2222d35e;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"JAX-RS; Wildfly Swarm; H2 DB";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;13;Spain
be5184b809ff888af9e8f8eca4e2d1b1;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;It's functionally superior;;9;;;Microservices;;Hype: it was a modern approach;;6;;;MySQL;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Serverless;machine learning;microservices";It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;14;Pakistan
ff22b864ae6a673d3c14b95b3c736a98;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Our application stack encourages it;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;1;Sweden
5b90ac7c71a31da3b070e5242c05de69;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Happier team;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;jprofiler;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;9;Poland
e23cb9439380ecbc38dd89dcd549ff12;Eclipse IDE;;Company policy;;10;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;Not interested, we like the wall where it is;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;docker;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Canada
2e9b32690576acb1410a534c68a2287b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Familiarity: we know it the best;;5;Not enough time to learn the new application stack;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;;we re trying to. it takes time to investigate, break down, and integrate;Postgres;;Ops friendliness;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"kubernetes ;spinnaker;axonframework;kafka";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;3;France
b3ad8bd1283cc6ee1834266e73dfc331;IntelliJ IDEA;;Functionality: it's superior;;8;;;Groovy;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;;MariaDB;;Legacy;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Spock;Groovy";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;United States of America (USA)
b2eac871dbb65b0fcdf007c87bdc8a41;IntelliJ IDEA;;Company policy;;8;;;Groovy;;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"React;Redux";We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Midsized company (I work in an open plan office);3-9;12;United States of America (USA)
4ac3115ea74810fb141d343096ba050c;IntelliJ IDEA;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Microservices;;Our application stack encourages it;;7;;;;AWS DynamoDB;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;GoLang;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
037c86da91c3bba3df5e611cc3795a99;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;vuejs;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Germany
ac8414bb87508c6efbdd52536e24980e;NetBeans IDE;;;Personal preference;8;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;It's 20 years old...;;Homegrown indexing thingy in written C that kinda works like a db;Budget;;3;;It's 20 years old and has features no DB/NoSQL has;We don't even have ops;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"Docker;MQTT;Vert.x";The tools are fine, the project is just too old;Database;Consultant;;Small company (I work in a shared office space or small office);3-9;20;Netherlands
034878d3af956ec8c9b0a2a0df63e8f1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"Microservices; Kotlin; Event Sourcing; SMACK; Fast data";We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Poland
f1145e555efd74c8127f1bcea1ad259c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;;Vaadin;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Vaadin 8.1;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Canada
c3e9f08f1c66e2877033fc69121fcf74;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;The team is large and inflexible;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;;I don't know;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;2;Poland
a9ce92a2925f8b33e054006fb5776a9a;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;;Db2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"Camel; spring security";The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;India
1d694fb768a739ad080e18c290ed8a9b;Eclipse IDE;;Project requires it;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Polymer;Web Components;Java 9;Java EE 8;JSF 2.3";The tools are fine, the project is just too old;IDE;Architect;;Contractor / Freelance (I work when, where and for whom I want!);20-49;19;United States of America (USA)
5cfc174c3c23b6b7c260afaa89811454;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;It was an experiment;;9;;;Spring ;;Hype: they told us it's the next big thing;;10;;;Microservices;;Hype: it was a modern approach;;9;;;Redis;;It's strongly encouraged by our application stack choice;;9;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;"Microservice;nosql;reactive;rest;api";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);10-19;1;Luxembourg
ca82f041d8098c2984269f0c1cb3558d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;;Although, we do optimize our code we have not give that much importance to performance as the project as not reached a critical mass of users yet.;"java 9;Wildfly Swarm; Jigsaw; jsonp 1.1; Docker";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Startup (I work in a small cupboard at home);3-9;7;United States of America (USA)
187ca545e818e352d4108193fce83c5b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance has never been a requirement;;"Reactive; Microservices; Kotlin";The tools are fine, the project is just too old;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Poland
a11b1cbcd698dadf4bc2182d4ba69a7f;Eclipse IDE;;Budget;;8;;;JavaScript;;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Developer friendliness;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Neo4j;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;25;Switzerland
3fe82dd46b60b7460c359c235288552d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Company policy: we have other projects using the same stack;;4;We're tied to specific tooling for the platform;;;integration;Hype: it was a modern approach;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;Mulesoft DataWeave;The tools are fine, the project is just too old;Programming language;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;27;United States of America (USA)
06d6ba6892ac64333e1db05baf649109;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;It was an experiment;;10;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MySQL;;Budget;;7;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;Czech Republic
bf94cb1c721e94f64fe26a8335864daf;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;JavaFX;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);10-19;30;Germany
1fc41e4f7143831f268efea257663379;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;It was an experiment;;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;9;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Developer friendliness;;8;;;We don't even have ops;Faster resolution of problems;;We don't care;Performance has never been a requirement;;Bootstrap;The tools are fine, the project is just too old;We need to care about performance more;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);3-9;2;United States of America (USA)
2349b607be3d35df796634f0142377d8;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;Technical debt;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Budget;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;none;The tools are fine, the project is just too old;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);3-9;15;Belgium
1b2c5bcfd523ff539d813cf57eb76754;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;;Maximum control;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;;No devops;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Hungary
c217acdb11ce350c669accdf23648545;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;JSON-B in Java EE 8;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;I'm actually out of work (How insensitive of you!);1-2;0;Greece
f01bfaf24aab8da98c529a66128d6707;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;In-house;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Off-heap;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;France
1f7cd367a9b9b8399ddd4ff175c80001;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;4;Not enough time / money to migrate the project though I know it'll be better;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;AWS Athena;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Midsized company (I work in an open plan office);10-19;11;Poland
fa83ba91405137c4ad57e49a33ca5ad2;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Ops friendliness;;6;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Spring boot;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Denmark
e55371160387354ba95a84cc8437cec9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;;Legacy Application;1;The price of the migration is enormous;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"golang;kotlin;Webflux;Reactor;Kubernetes";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;;DevOps Engineer;Midsized company (I work in an open plan office);3-9;2;Germany
fcff317be5c4525b3226a82c226e7765;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;TensorFlow;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;Sweden
0861386fc475e98def19e873b6214178;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;10;;;Library or framework;;Our application stack encourages it;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Hypermedia APIs;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;15;Germany
2f5aae811feed2b38f2264deb8f09fa3;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Java EE;;Company policy: we have other projects using the same stack;;5;We're tied to specific tooling for the platform;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance has never been a requirement;;docker;It's the worst, we barely move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;8;Czech Republic
22e7055842e6521b1ffe63a8a14b7398;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;We are moving to microservices;;Elasticsearch;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Node.js;Google Cloud Platform";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);50-100;15;Great Britain
a1da21734abca24d95ca49af3dd0bfd5;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;5;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;;none!;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Reactive/Async;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;29;United States of America (USA)
cbd699270c674dbb05285cc2fda80221;NetBeans IDE;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;It's a fixed project / company requirement;;MS SQL;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;Apache NetBeans;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;22;United States of America (USA)
741aba70027a5463bee7b171f86f43ae;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Developer friendliness;;8;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Microservices;It feels unproductive, but the project is easy to maintain in production;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;19;United States of America (USA)
00b5bbf8de2ce061bfc34b6c7b5e284f;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Custom in-house monstrocity;;Hype: they told us it's the next big thing;;8;;;Library or framework;;Company policy: all projects use it;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Angular;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Tunisia
c3d6530386bff591dbc4685f56c0feec;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Angular ;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Great Britain
ce5a0cfc48388c7e57697eb355007e0e;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MySQL;;Ops friendliness;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Spiring boot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;18;Denmark
35242dc8973f5c29146e30fd168a4c9c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Amazon RDS;;Ops friendliness;;8;;;We are the DevOps ;Better internal communication;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"JUnit 5; Docker; AssertJ; Arquillian; Apache Camel";We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);10-19;13;Great Britain
29f0364c57cb98b9eb8d2c334f934330;NetBeans IDE;;Familiarity: it's what I know;;5;It's a fixed project / company requirement;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Rx-Java;The tools are fine, the project is just too old;IDE;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;6;Peru
70920dc62c574d1b2185266f97eeae1e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Australia
30bc0162adb1be7c076aee72f7b4162a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Custom in-house monstrocity;;It's functionally superior;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Custom high speed actor system;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Italy
717e50c9cb890c4fe7200c6e84457139;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Better internal communication;;We react to the user complains;Performance has never been a requirement;;"Jenkins2;OpenShift;ElasticStack;Prometheus;";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;15;Netherlands
afb18a53da88c82fda71e7e69afba7dc;IntelliJ IDEA;;;Stability, functionality and performance;10;;;Java 7 (or older);;;Constraint by the environment;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;;performance as long as is good enough, is secondary;docker, JEE 7, message queues;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;18;United States of America (USA)
54d88a25a738fbf437c213202e473b65;NetBeans IDE;;Company policy;;7;;;Java 7 (or older);;Functional superiority;;8;;;Java EE;;;I dont know;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;;I don't know;9;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;10;
6b933892f8d65a31492dc433d3c84e96;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Company policy: all projects use it;;10;;;Postgres;;Developer friendliness;;10;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kubernetes;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;United States of America (USA)
f9e33cb18fdb74280439ff245ccdf8d9;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Familiarity: we know it the best;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;vert.x;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;22;Netherlands
c6c8bd630c10cd63e563d31b343d9412;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;Nothing;;Our own;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;13;Poland
99193fe82d3ab0c36194b88d2bf8d047;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;4;Not enough time to migrate though I know it'll be better;;Custom in-house monstrocity;;Familiarity: we know it the best;;3;Not enough time to learn the new application stack;;Monolith;;Familiarity: we have the skills and know we can make it work;;4;The project kinda works, don't touch what's not completely broken;;;IBM db2;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Vaadin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;United States of America (USA)
ee7a9366c4075fee3a7a20ec356d347e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Vaadin,SignalR,PrimeFaces;It feels unproductive, but the project is easy to maintain in production;Project architecture;Consultant;;Small company (I work in a shared office space or small office);1-2;35;United States of America (USA)
7a8f6de5bc8555bb197f7ce1734798d1;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Kotlin;reactor;spring 5";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Argentina
fb4d08b7faf536d8c9c8ffb773de5564;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;It was an experiment;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;MySQL;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;30;Australia
10402e84f2ce5164b11d76287f8135c2;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;Not interested, we like the wall where it is;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Java 9; Java EE 8; Spring 5";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;United States of America (USA)
0a2454baa0abd018b88160dcad697a56;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;breaking up the monolith by moving the configuration data into a database;The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;2;United States of America (USA)
fe9dfab4f2da292cac0833312c867fd8;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;20;Brazil
bf8d6c46af77db079d8848ca79c71016;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Faster delivery of features;;We have professional perf engineers in the team;Performance tooling / experts are expensive;;Hadoop Spark ;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;5;India
6b73cb32634ee1350080844cfb092391;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;2;Not enough time to migrate though I know it'll be better;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;;no time;docker;It's the worst, we barely move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;3;Belgium
b1197b9fafbf03f4c00fe0c774bc86fa;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Spring tool suite;spark ml";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;9;India
a3b9f09edf0b09c8c62fa2becd0e9137;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"JUnit 5;Kotlin";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;8;Russian Federation
c0bd74bc038aaa9406835704568ff3b7;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;;Database agnostic, ms sql, oracle and db2;9;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Saml;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);10-19;28;United States of America (USA)
e1baa85739e8ec3ea2534f2c5b1d3560;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;;;;;;;;;;;;;;;;;;;;;
4f2a27a1ba09f68404a23349f750cbb5;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Familiarity: we know it the best;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Kotlin; JavaEE 8; Java 9";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);1-2;12;Germany
a6cab956b7faef3ab92322de092ded62;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Dynatrace;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;India
6ccd1e7a6475b17059d1c777703bf685;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;It's strongly encouraged by our application stack choice;;7;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;java8, dropwizard, docker, spock, gradle;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;5;Sweden
3ffa4023174489b9c2c3c19cbbca753d;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Java 9;The tools are fine, the project is just too old;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Poland
7ac9178f2883dca35dc146f3605f20cd;Eclipse IDE;;Functionality: it's superior;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Company policy: we have other projects using the same stack;;4;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;5;The price of the migration is enormous;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Var.io;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Sweden
5dd4a7baa4e22e50173732a12588ef13;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;12;India
86da920aef16b7cc971c150f884939c8;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Jooq;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Startup (I work in a small cupboard at home);1-2;17;Great Britain
379c345d95719e3c9a6b29de8831c630;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"Hadoop; Spark";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;India
652dacf03f0a851836659e3a171162e4;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Docker, Lombok;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Startup (I work in a small cupboard at home);3-9;20;Israel and the Occupied Territories
b8095d5ac1eb6bb7863a42274ca59927;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;HP Diagnostics;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);50-100;12;India
ddf523e1d478e640484f219c18919d90;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;new project, latest api;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Desktop app;;Company policy: all projects use it;;2;It's a fixed project / company requirement;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;"spring;rest";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Spain
992d5c1ed9b12f83e54afaaf64da7c90;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;10;;;Java EE;;Familiarity: we know it the best;;10;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Jenkins;The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Great Britain
0433ac5eb81117988f990220bf8a1d51;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Apache Spark;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;8;France
d77898dc116ec01c2108051d6e61790c;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;;Legacy application;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;MS SQL;;Suitability: it fits our architechture / requirements;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;"""Gradle;Liberty & PCF""";It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;India
cc31ef2ae791174b3fc4aa6e73acbb4e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Microservices;;Company policy: all projects use it;;6;;;;DynamoDB;Company policy: we have licenses already;;7;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Java 9;Kubernetes;gRPC;Testcontainers";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Great Britain
b1b54aef15b4b893e8199064810b7b46;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Sybase ASE;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Microservices and OpenShift;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Norway
3673818b06c9c7ae9bf91f41895c1778;IntelliJ IDEA;;Project requires it;;6;;;Scala;;Team skills: it was what we knew the best;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Our application stack encourages it;;8;;;;Dynamo;Developer friendliness;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;we are fine;Kotlin;We're good, it feels productive, and we know how to move forward;IDE;Team Lead;;Midsized company (I work in an open plan office);3-9;8;Bulgaria
5d53bad10e96fda9a4ea148f83c5f70b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;reactive spring;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Belgium
3dea497154605292bae75f6a8271c935;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;MySQL;;Budget;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Angular4, Reactive programming (spring reactor);We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;9;Norway
06919d8c6d33389a05c1b3274cba7572;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kubernetes;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;South Africa
1bf3ece080a25cf779a8f93da13c65f0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;DB2;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;The Dev team and the Ops team work together;;Haven't really adopted it, just always had a culture of dev and ops working closely together;We react to the user complains;Performance has never been a requirement;;Angular;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Australia
b4d82983f23ba5ce5d9820ec8b203052;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;;support;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Romania
9ea51506b50183a884962ddf57835906;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Jira;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Switzerland
d2c5e883d9f7fdf315073a34c87dcb93;IntelliJ IDEA;;Project requires it;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;;It was all we required;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Serbia
62bf7bf89ce4b8cc58eefc78aa3a68bb;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Testing tools;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Hungary
3c96ff66d39c8bf5437850dee15367b7;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;"machine learning; big data; data mining;";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Startup (I work in a small cupboard at home);10-19;12;Ukraine
2c4e2adbf65a2b14212f3b4dde784f28;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Functional superiority;;6;;;;Legacy Spring monilith ....vertx and python microservices;Project requirements: it was the best fit for this particular project;;7;;;;monilith with frontend / backend + microservices;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Familiarity: we know it the best;;6;;;We don't even have ops;;bla;We react to the user complains;Performance has never been a requirement;;tensorflow;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Ireland
080977be868c3abfe906067dcfbacf15;IntelliJ IDEA;;Functionality: it's superior;;9;;;Clojure;;Functional superiority;;9;;;No stack, i.e. plain old Java;;;Simple, clean, flexible;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Developer friendliness;;9;;;We don't even have ops;;no devops;We react to the user complains;;Early stage development: The app is in constant flux.;JavaFX;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);1-2;12;Norway
01a75ada25a6167ff4e8a09c7817c59d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;-;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Germany
5dad12428d06a692e22715f52a10795d;IntelliJ IDEA;;Functionality: it's superior;;8;;;;Python;Company policy: we're a $LANG shop;;7;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Company policy: we have other projects using the same stack;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;;Legacy choice that's hard to move off;3;;Risky migration for minimal business value;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Apache Flink;Apache Kafka ";We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Small company (I work in a shared office space or small office);3-9;11;Great Britain
c5c48ffba9c7b94689726ba1ad1bded2;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;5;The team is large and inflexible;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MS SQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;;We try to enhance performance when it is needed;DynaTrace, ELK, TestRail, Java 8;I wish we've chosen a different set of technologies;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);10-19;6;France
2758b54d3d4d3b4463c7b3eae8fff2cc;Eclipse IDE;;Budget;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;SOA;;Suitability: it fits our requirements most effectively;;7;;;;DB2;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;"camel;activemq;";We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Midsized company (I work in an open plan office);1-2;15;Portugal
a345da53b7c0d7b0175ff7b2f51e06c9;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);50-100;15;Germany
5c4dc7590c5a8a55e5f32cf0d4ad0373;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Functional superiority;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2;;Compatibility with legacy software;5;It's a fixed project / company requirement;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Java 8/9;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;2;Portugal
fe660bc8a24d6231f2eafefa319ab219;Eclipse IDE;;Project requires it;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;;IBM DB2;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Cloud;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Poland
97d2e016df8053a04c25a48d2881801d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Croatia
89e9afb4dc9245385f9307df97687339;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;India
dfd244da82837ba7aaef3d8522e3221e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;6;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;6;;;Microservices;;Hype: it was a modern approach;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Spark;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);100+;7;Ukraine
8337f333e06e97dbe018f54549a7e5f9;Eclipse IDE;;Familiarity: it's what I know;;2;Not enough time to migrate though I know it'll be better;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;4;It's a fixed project / company requirement;;Spring ;;Familiarity: we know it the best;;2;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Typescript;Snabbdom;Flyd";I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;10;Germany
452d0df2b465d9fc308332da6a080218;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;;history;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;;We do when building new parts, the whole thing is too big;;DB2;Company policy: we have licenses already;;8;;;We are the DevOps ;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;;Performance is less important;Wildfly swarm, Springboot, Flyway, Git;The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;26;Germany
45741945b8d1823f460c0ca253b57762;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;It's functionally superior;;8;;;Desktop app;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Familiarity: we know it the best;;9;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Netbeans Platform;We're good, it feels productive, and we know how to move forward;Programming language;Consultant;;Small company (I work in a shared office space or small office);1-2;7;Bolivia
44a3145ba4e87247e409a634f90588bc;IntelliJ IDEA;;Company policy;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;17;Iceland
880821adbd7749b7397145058d60ed5e;IntelliJ IDEA;;Functionality: it's superior;;4;;Support for Groovy;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Company policy: all projects use it;;8;;;Couchbase;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Vert.x; RxJava; Spock;";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Great Britain
bd0155f1b0367790ee285b452e05149c;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Angular2;The tools are fine, the project is just too old;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;India
b0bb90fb01c658c5ba20d09ced17f78e;IntelliJ IDEA;;Project requires it;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;H2;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;;Requirement for delivery;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;Nothing;The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);3-9;20;United States of America (USA)
d0cb7302a0663a832739901da10e4c33;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Developer friendliness;;7;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Netflix hollow;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;7;United States of America (USA)
1ba85806245b4f23b4a57376364598e7;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;";";The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Brazil
096c81685e3250e405a67973aa5e2059;IntelliJ IDEA;;;Performance;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;5;We're tied to specific tooling for the platform;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Familiarity: we know it the best;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;A@b.ch;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Switzerland
229e1803943ed9ac9f945f99d5e30e9f;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Vert.x;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;4;Tunisia
b413941252aac194c4600e141b09b132;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Familiarity: we know it the best;;10;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Spring Reactive ;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);10-19;3;Ukraine
0cf6f1d2c1c3574e94acdb89bbd062a7;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;react;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;India
9c155250eb5723288465ae300ad4e72d;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;;We don't;We react to the user complains;Performance has never been a requirement;;Spring 5;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Spain
e459f3df86a2a405fe1a6fbb5bb63d75;Eclipse IDE;;Project requires it;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"JavaFX; docker";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);3-9;10;Germany
79f2f093431cf3af48533fbfc4cc6624;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java9;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;United States of America (USA)
661cd691d53651656bf1877f77f21782;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"Java8;Docker;";Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Myanmar/Burma
be02eefc9b831befc7a52d08cf517ebe;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java9;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;6;Italy
02b58e9aebf9f0d6507f0c5f8638e786;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;;Best productivity;9;;;;Grails;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;;All of the above + security;We benchmark or have performance tests to catch regressions;;We do enough to have decent results and will work more closely later;"docker;aws;circleci;angular";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;20;Belgium
a35b3c380a266cc1b7af537fdc6c6e75;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;It was an experiment;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Reactive streams; Scala; Kafka streams; streams";We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Midsized company (I work in an open plan office);20-49;14;United States of America (USA)
af7c7e7bb1e33ae70ee2fb43d416256b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kafka Streams;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;11;United States of America (USA)
600154148eaf8a46610a8f9254c0fc31;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Ecosystem: community, tools, libraries;;9;;;;Ratpack;;Experiment and it is not Spring;8;;;;Distributed monolith;Legacy reasons: it was picked ages ago, must have made sense then;;3;;Company bureaucracy;Cassandra;;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Gradle;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;6;United States of America (USA)
cea9a0cc62e7e272adcd891730397055;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Ops friendliness;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kafka streams;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);100+;15;United States of America (USA)
a44174f2350a6fb09fa1bd69a8b63645;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;JavaEE, AngularJS;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Startup (I work in a small cupboard at home);1-2;30;Hungary
d472c552a44e2a546ebeef8f44c92cbf;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;8;;;Microservices;;Company policy: all projects use it;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Parboild, Apache POI;It feels unproductive, but the project is easy to maintain in production;Programming language;Consultant;;Small company (I work in a shared office space or small office);3-9;9;Bulgaria
bd4555c4e7ac0f93d42c72b66cec3f03;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;7;;;;git;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"jgit;gerrit;spark;kafka;kubernetes";We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;25;Germany
d793519f13aa7105170f4294d57f99c0;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java EE 8;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Sweden
fc03c969bdab104aa5ebd4fd4ca1121a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Elastic search;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Bulgaria
08433d09af7fc80607759756935cfafb;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Scala;;Ecosystem: community, tools, libraries;;5;;It works well enough.;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;;It was there;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;;We must make it work before we can make it fast;n/a;It's the worst, we barely move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);10-19;6;
2d43ef84767e2db1a5d7c121145788c5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;Company policy: we have other projects using the same stack;;5;The team is large and inflexible;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Kafka;ELK";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Russian Federation
4637617cfde4ccd2c5de327a8c8bfa86;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;It's strongly encouraged by our application stack choice;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;"Liquibase;";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;11;Russian Federation
eb2d2fc15ddfbebd2e3e562076c3c07b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Spring Cloud;VueJS;Tableau;Kafka";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;United States of America (USA)
82df28aa9efb570e3d57d32dd9bd300a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Developer friendliness;;10;;;We don't even have ops;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"CQRS;Kubernetes;Container Orchestration Frameworks;Istio;Prometheus";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;8;Germany
323d4419ee89a112ddf4b566913cbd88;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;;VPD capabilities;9;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Python/BASH - scripting languages have helped both to fulfill company needs as well as personal performance enhancement;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;United States of America (USA)
e5bb1a642f19b4a9531e7af2c8b519e5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Immutables (https://immutables.github.io/); VAVR; Elm";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;4;Germany
9a02c051449ad635c2e82bee580e8f34;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance tooling / experts are expensive;;"java 9;angular;rest";The tools are fine, the project is just too old;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);10-19;9;Brazil
e2092dc0133a7c810b1fe53ffb02a6d6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;7;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Mongodb;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;12;United States of America (USA)
fce23e5771e6d3838dd9d4f9f3018f75;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kafka,Drop wizard, Scala,Java8, Ansible, Vault, Cassandra;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Midsized company (I work in an open plan office);10-19;14;Canada
f677c081c7c95edc378954e20a2d0aa9;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;MS SQL;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;PCF;It feels unproductive, but the project is easy to maintain in production;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;
6429222f35c2426b22584bfc6eff9e75;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;Functional superiority;;10;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Russian Federation
dae6cb22b378891ff443b1810fc55db9;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;4;The team is large and inflexible;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Hype: it was a modern approach;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 8;I wish we've chosen a different set of technologies;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;13;United States of America (USA)
5a83a297c9b972048220a431bb54e7e1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Project Reactor;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Poland
ef763a26f8f7c83b1e6787489e784db6;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;;....just trying to stay current;8;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;;great reputation, high performance;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;using jstack to find performance problems;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;24;United States of America (USA)
2c8f72f8decbc7a5494ca749527eb57a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;Not enough time to learn the new language;;;Spring, EE, in-house, no stack;Ecosystem: tooling, libraries, plenty of users, and support;;5;Not enough time to learn the new application stack;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;;Hard to replace partitioning, data encryption, scheduler and others;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);100+;15;Russian Federation
66627949bb527fa48cafc9f8f7eb7746;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;lamba;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);10-19;5;South Africa
9c93edb28b511409d55bccd88dcd11c3;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;;Vertica ;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular 2;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Israel and the Occupied Territories
0d788fa896953acfd4047be793efbc6a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Microservices;;Company policy: all projects use it;;7;;;MySQL;;Developer friendliness;;7;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;.;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Israel and the Occupied Territories
c58f6478977a72444dba53a7f69f8105;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Hype: it was a modern approach;;8;;;Postgres;;Developer friendliness;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;docker;It feels unproductive, but the project is easy to maintain in production;IDE;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Iran
fe94dd876505a43fe3b3c033d8bc0223;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);100+;5;India
1e9acdb83facc573de4645debcbd3a3d;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Cassandra;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;none;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Greece
57c05f316c378e97d2ae4952cf5bfdb9;Eclipse IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spark;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);3-9;13;Germany
3b5732d003d63954bcb8124aec4f369f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;;Haven't adopted DevOps;We react to the user complains;We don't know how to properly address performance issues;;MongoDB;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Startup (I work in a small cupboard at home);1-2;4;Kenya
cc8fc506d34caffca47b1b85ebcf915d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;;Customer does not pay for more;None;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);10-19;15;Germany
85ef1ef9d1db0da57ce6f3cb4bcde701;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Spring Boot;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;India
dd0da318eb0098ed6872744623d077a7;Eclipse IDE;;Budget;;8;;;Java 7 (or older);;It was an experiment;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Budget;;7;;;We don't even have ops;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;any;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Consultant;;Midsized company (I work in an open plan office);3-9;5;United Arab Emirates
29eb90ed3da6173a0466f18b7738421a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;vert.x;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);50-100;25;Brazil
55c0ff4911f465cd545bef21a93ed330;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;spring-cloud;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);50-100;5;France
7467b057d66d933aae549b8675e08af0;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"vertx;akka streams";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Small company (I work in a shared office space or small office);10-19;10;Spain
48f7b7b31f09d9c643312776d1d383b7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Clojure;;;Simple, Thread safe by default, Productive;9;;;;Clojure + libraries;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Amazon DynamoDB; Amazon SQS; Clojure ecosystem";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Brazil
b11f59095ba733b3febc67d145ef9b29;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Groovy;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Ukraine
db4a5a2a2487265b10140ee68694ea33;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;SAP Adaptive Server Enterprise;Company policy: we have licenses already;;9;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"Functional Programming;Continuous Integration";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;12;Colombia
ca5fd694c35e1b5f5246260e9060dc91;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;;H2;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Amazon web services enablement;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);10-19;32;United States of America (USA)
12f8e751c9cc03457b73ea5e7fee0584;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;;JHipster;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Budget;;9;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;JHipster;We're good, it feels productive, and we know how to move forward;Database;Architect;;Small company (I work in a shared office space or small office);20-49;20;France
1f785e58987321543fe2bc4411702480;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;2;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Microservices;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;13;Spain
04ed1c7c364f6f157fe4271e7486d06b;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;5;It's a fixed project / company requirement;;Spring ;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We don't care;We don't know how to properly address performance issues;;NativeScript;It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Spain
163ea859a1287785bf9812faf1c04bd6;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;;Agent architecture;Suitability: it fits our requirements most effectively;;9;;;;Properitary file based;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;United States of America (USA)
a440833dcd4789d958d42965aa514a12;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;;More concise code, plus wanted to determine suitability over Scala;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Midsized company (I work in an open plan office);50-100;28;United States of America (USA)
b4c8d07ffc3a477f1739aede3c9bd9d2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Hype: they told us it's the next big thing;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;Not interested, we like the wall where it is;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;spark;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Switzerland
4cb1589eb7a7837994e7b237b5b51377;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;It's functionally superior;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Magic Wormhole;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);10-19;17;Great Britain
aa63974d7631b5d12ef0c23178dd08b0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Spring boot; project reactor";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;11;France
fb58456fde77d192cf345734d99242cf;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Scala;It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;15;Ireland
3f543aee5a2eea4874cab1d6e0ae0516;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spark;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Italy
adc4a62dce705901fe88309a42dda39a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;docker;The tools are fine, the project is just too old;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;30;Great Britain
5a21985ed4c34012cb56cf7906989156;Eclipse IDE;;Functionality: it's superior;;10;;;;6;Ecosystem: community, tools, libraries;;6;;;Custom in-house monstrocity;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;blaze-persistence;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);50-100;8;Finland
1e4c1bff3d2de2df1bde4606ccbaabf0;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Microservices;;Our application stack encourages it;;8;;;MySQL;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;New Relic;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Great Britain
b217a5b76ff19c0a3013531531ab0aa3;Eclipse IDE;;Company policy;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Familiarity: we have the skills and know we can make it work;;3;The team is large and inflexible;;;Documentum;Suitability: it fits our architechture / requirements;;2;The price of the migration is enormous;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Elastic stack;The tools are fine, the project is just too old;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);20-49;15;Croatia
84895a15255d4ad9f306dd2d77bc01d5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Budget;;8;;;At least we talk to the Ops people;;We (the software developers) are the ones that manage the deployment of our applications and applications stacks.;We react to the user complains;Performance has never been a requirement;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;19;United States of America (USA)
0c6b20590f73dd2acec9f5675554a544;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;Oak;It's strongly encouraged by our application stack choice;;7;;;We don't even have ops;;We don't have ops;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin, Rust;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Startup (I work in a small cupboard at home);3-9;6;Russian Federation
c21d65ed19068ffde2a2208742940774;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;;Performance is important but not paramount;Nothing on the radar;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;30;Canada
ead2b391c6bb0487e8555af2cbfe887d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;7;;;We don't even have ops;Happier team;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;20;Russian Federation
3670a0d33db3575693ae9987ad3f64f5;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Custom in-house monstrocity;;Familiarity: we know it the best;;5;It's a fixed project / company requirement;;Monolith;;Familiarity: we have the skills and know we can make it work;;3;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;It's a fixed project / company requirement;;We don't even have ops;;Missing people;We react to the user complains;We don't know how to properly address performance issues;;"Spring boot;maven;gradle;Jenkins;git";It's the worst, we barely move forward;Project architecture;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;10;Germany
1f377410d3f7f3f615339c7b7715695f;IntelliJ IDEA;;Company policy;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Netflix stack;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Midsized company (I work in an open plan office);3-9;20;Sweden
6b1021393ddc2f2026831dfeb49e7197;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;-;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);50-100;11;United States of America (USA)
738283b988495e86fdb36717431edea3;Eclipse IDE;;Project requires it;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;;DB2;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Angular;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;United States of America (USA)
06271c3ffba47c48f6e50da5408a7597;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;;code management;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Dartlang;We're good, it feels productive, and we know how to move forward;Database;Developer Advocate/Technical Evangelist;;Small company (I work in a shared office space or small office);10-19;12;Switzerland
befd60850cc8c3c8131ebbb7828a0cb5;NetBeans IDE;;;Simplicity;9;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Serverless;;Suitability: it fits our requirements most effectively;;8;;;;No database;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;;No adoption;We don't care;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Midsized company (I work in an open plan office);10-19;20;Spain
6997dec82ee950ffab37430a920dfa09;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Familiarity: we know it the best;;9;;;We are the DevOps ;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Angular;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);1-2;30;Great Britain
69b375b86f101d42be151a5d542ba88a;Eclipse IDE;;Budget;;7;;;Groovy;;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Budget;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Grails;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Small company (I work in a shared office space or small office);3-9;20;Canada
deee8ac905d4e9d2fa7b1b032e832008;Eclipse IDE;;Project requires it;;4;;Required plugins only on Eclipse;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;5;;No reason to\;;MariaDB;Suitability: it fits our architechture / requirements;;5;;No reason to;Not interested, we like the wall where it is;;We haven't adopted it. See previous question;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;40;United States of America (USA)
d25aff50b4c67e4bb1b8eab5ab96c6c9;IntelliJ IDEA;;Company policy;;9;;;Java 8 (or newer);;;To seduce other developpers in the market to join the Company ;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;;The company was already using it when i join them;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;;Performance tests should absoultly be made after each release, and Companies can do that without buying expensive tools.;"Node.js;Appdynmics;Jrebel;lambda";The tools are fine, the project is just too old;Project architecture;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;6;Belgium
792fed452eb6bd1146a56149945d1b7d;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Amazon RDS;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;AWS Step;We're good, it feels productive, and we know how to move forward;IDE;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;29;United States of America (USA)
c964c7f1f0bb850be89664d855562b12;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;Germany
3d0ef26571731b76928e6019bfe3a034;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;;client demand;8;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;java primefaces;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);10-19;9;Canada
31c3c4583b745ae81b084025ac93ad5d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spark, kafka;We're good, it feels productive, and we know how to move forward;Programming language;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);10-19;20;United States of America (USA)
03034f28533e95890850021c58120825;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Budget;;6;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;machine learning;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;;Application Designer and Team Lead;Startup (I work in a small cupboard at home);3-9;13;United States of America (USA)
13e6b938d07755ca005e75ec69ba390e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);20-49;15;Costa Rica
80667d1c53710a3db71e260507f7c75b;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Postgres;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"sparkjava;groovy";The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);10-19;9;France
42c950c2a9875352669dd0e161cf2758;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Company policy: all projects use it;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Kotlin;reactor";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Sweden
ade6025266edd1f8fbd0f0cb6a9a8677;NetBeans IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Developer friendliness;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;AppDynamics;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);20-49;10;Mexico
395442367387b5cbf9f039612baabc17;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;9;;;Postgres;;Familiarity: we know it the best;;10;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);10-19;8;Brazil
8fc5a59d6c795fa2062f5b39e7129ad1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;10;;;;Web Application;Suitability: it fits our requirements most effectively;;10;;;;none;;;;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Pipeline Tool;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Midsized company (I work in an open plan office);3-9;15;Switzerland
60496c2d44cfe169bfd22d6f85b02f1f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;;Don't know ;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Cassandra;;;Using titandb over cassandra;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;5;Israel and the Occupied Territories
76858f7039d437bdd3712533d7cdb0ad;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance has never been a requirement;;Bamboo;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Midsized company (I work in an open plan office);3-9;15;New Zealand
fa6bd6048c0235f8cc43d23e2a21ff18;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Akka;Pact;";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Great Britain
537be254baa583e8d4a16cd82335a24d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Stable operating environment;;We react to the user complains;;No performance problems, pure SQL and PL/SQL no ORM;GWT;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;26;United States of America (USA)
6ff20477800d619b902297921d0959f8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;4;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;"gitlab;kotlin;react;go;postgresql ";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;15;France
b0cf1991b793abbd3e373810fa407406;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;machine learning;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;5;Brazil
0ddda45f9bbe7a1ce95d731cfb8bc1a2;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Our application stack encourages it;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spark;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);3-9;8;India
7367d69fabf1ecef22d8c773077338dd;Eclipse IDE;;Company policy;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Familiarity: we know it the best;;9;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;swing;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);20-49;10;Colombia
ad9ef267bcf8ae772222a231d6a8a962;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Serverless;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Vaadin;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;Australia
a7584febe1129c302d8fd8b3eab21a2c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;;None;;;;;;We don't even have ops;;I have to, we have no devops;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Scala;Akka;vavr";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Poland
f8d6d18be5a2f8a341244cf0b82f8d69;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);100+;10;United States of America (USA)
e745a01c9adddcddf16727b2e0df9919;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;I wish we've chosen a different set of technologies;Application stack ;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;France
97ce5b537ddd700838349e4131421408;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Budget;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Reactive Java;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);10-19;3;Bosnia & Herzegovina
6402745f4796dad59fd6168cfe9cc281;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Custom in-house monstrocity;;Familiarity: we know it the best;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;9;;;;Aerospike;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;14;United States of America (USA)
219492e67116226a7f6b6ccf8d8a7f57;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Developer friendliness;;10;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"gRPC;Kubernetes";I wish we've chosen a different set of technologies;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;25;United States of America (USA)
c2610c7a43f9e52ab1d3d2fa6bc8486a;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;7;;;;Resftul & Primefaces;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Ionic; TypeScript; Angular2";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;12;Argentina
fa1ace83780947d394f300d852317a30;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Spring boot;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;12;Finland
41392f17ee2da9c1fff95c1aac9f7caa;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;It's functionally superior;;7;;;SOA;;Suitability: it fits our requirements most effectively;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Better internal communication;;We don't care;Performance has never been a requirement;;Angular2;We're good, it feels productive, and we know how to move forward;IDE;Architect;;Small company (I work in a shared office space or small office);1-2;27;India
eb5acf6f022001202209fbe0ca0e5d51;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MS SQL;;Budget;;7;;;We don't even have ops;Stable operating environment;;We don't care;Performance directly affects our bottom line;;React;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;15;Brazil
82a4d516a6f8f9208c8fa7e4b863ed66;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;Upgraded a legacy Java app to use the latest version of Java;6;;;;Servlets;Ecosystem: tooling, libraries, plenty of users, and support;;4;;I don't like other Java web frameworks, so it's the default;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Familiarity: we know it the best;;9;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;None;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Startup (I work in a small cupboard at home);1-2;8;United States of America (USA)
6fb7fe0475f6cc8c423465c7d7075fed;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;minio;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);3-9;25;Great Britain
45fed1404b3c531facc8efdd2ce9e159;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;react;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Brazil
476b577f489d14995cde0e9ffce72447;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;8;;;Monolith;;Company policy: all projects use it;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;ReactsJS , OpenShift,AWS;The tools are fine, the project is just too old;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;9;Sudan
dda4d23d7828891704b0f9c463230eea;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;;Not adopting devops atm;We react to the user complains;Performance tooling / experts are expensive;;Aws;The tools are fine, the project is just too old;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Belgium
ed7ceaf29295d6b91d2e4b98b26aff76;IntelliJ IDEA;;Functionality: it's superior;;9;;;JavaScript;;Functional superiority;;7;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;;It works for now, and load test results suggest it works for a reasonable time in the future!;ReactJS;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Midsized company (I work in an open plan office);20-49;6;Iran
7f29c43647b0a220e05c136c8625d36f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;;db2;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;spring boot;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Midsized company (I work in an open plan office);3-9;18;Norway
77709c02cafb408d21f783f7f9481ecb;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Better internal communication;;We don't care;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Midsized company (I work in an open plan office);3-9;9;Colombia
183b3cdd3fc313d720e5bb681aa62dfa;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Familiarity: we know it the best;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;;Our apps are usually quite fast without extra effort;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
0eaeb8fd26190cc3e7ef34a34d3b0560;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;3;It's a fixed project / company requirement;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;5;The data is too large to migrate;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;none;The tools are fine, the project is just too old;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);50-100;30;Switzerland
340ecb4d95e252624209f49212f4d5be;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;;Mostly insignificant if architecture is done right;Kotlin, Clojure, Rx;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);3-9;25;Germany
f4e0cd47a12ffe39e0d9d19240c56478;IntelliJ IDEA;;Functionality: it's superior;;7;;;Groovy;;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;6;;;Library or framework;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Geb;I wish we've chosen a different set of technologies;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;15;Russian Federation
fbcffc5668246075b4cbcab8b8053a1d;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;;UDB;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;;basic performance testing only;casasndra;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;32;
b7695aedd592ceadeab1b54ac14780c9;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Familiarity: we know it the best;;3;;planned for next year;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;;limited budget;"hadoop; dynatrace; dell boomi; sap hana";The tools are fine, the project is just too old;We need to become DevOps;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Israel and the Occupied Territories
8b8839dcd6250757da40f179c1acd66f;Eclipse IDE;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;SOA;;Our application stack encourages it;;9;;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Intellij;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);10-19;8;India
dddb861e5199a99e6e51b6c1efe20ff4;NetBeans IDE;;;Good UX & UI, Stable, Good Memory Management/Optimized, Good Amount of Functionality And Features;8;;;Java 8 (or newer);;;Well Structured Apis and Api Docs, Good Ecosystem, Platform Independent;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Developer friendliness;;7;;;We don't even have ops;;Don't have ops yet, but would like to think about it;We benchmark or have performance tests to catch regressions;;Focused on data structures & algorithms used, to care enough for performance;"GWT;Android";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;4;Nepal
ddf3c2cbfe16a746c6b044e5066e6cfa;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;Wildfly Swarm, Docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;9;Austria
bc6005a69e971e1b0316d435acae8410;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The team is large and inflexible;;MySQL;;Familiarity: we know it the best;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"Spring boot; Spring cloud; docker";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;France
f097919905169a2c08b30fe7bdce45ba;NetBeans IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;;Incompatibility with Java 8 for another applications;6;;;;Custom in-house engine based on reflection;It's functionally superior;;9;;;;Web Application via Post-Back on Server;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"Agile;SCRUM;";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;11;Brazil
8687659fa64229232d42581086b4fc4f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Clojure;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Italy
585d4654bb66d1b21f188ae93d53bcc3;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;;Non-traditional app - embedded devices;Project requirements: it was the best fit for this particular project;;5;We're tied to specific tooling for the platform;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;;Proprietary - in-house;It's strongly encouraged by our application stack choice;;4;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;None, trying to move away from Java;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;10;Portugal
7f4b67ff3f4d1c928229399a2664360b;Eclipse IDE;;Company policy;;2;;manager's decision;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;;Struts 2;Familiarity: we know it the best;;1;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Hibernate;Java 8;";I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);10-19;15;Poland
6244ef96613e8f8258b0dd207e0122bc;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;4;Great Britain
22e2b91ff599acadbf92cbbbc1722412;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Angular 2;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Brazil
635473b6ffa947a607beea247c07ab9f;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Familiarity: we know it the best;;9;;;We don't even have ops;;I don't know;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;"Vaadin;Spring;";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Startup (I work in a small cupboard at home);1-2;6;Colombia
3b56d00d4a2d427730fa893af4ef817f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;15;Brazil
eef02f0d57af002d537c333bab9649cb;NetBeans IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Functional superiority;;10;;;Java EE;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;core java;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;20;United States of America (USA)
c07e1d3a005418fc4d55ff7e7500d6ba;Eclipse IDE;;Company policy;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Java 8; jenkins delivery pipeline to WebSphere";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Netherlands
b1669b6c0e0fed3101072bf34cf802c4;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;2;The price of the migration is enormous;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;;Main performance bottleneck is the database;Payara;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Midsized company (I work in an open plan office);10-19;25;United States of America (USA)
16192236b08f2249b55f1abc90345240;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;;I try to use always newest versions;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;;many different types of projects;Our application stack encourages it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;5;Everything else is worse;;We don't even have ops;;we dont have ops;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;java9;I wish we've chosen a different set of technologies;We need to become DevOps;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Czech Republic
b3e73ffad8ab9d94bc66780473efa7e5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;10;;;Microservices;;Our application stack encourages it;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Rxjava;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);10-19;3;Estonia
317a3bedc5dc7a0abca1ffcef1a6310b;Eclipse IDE;;Project requires it;;5;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;5;It's a fixed project / company requirement;;No stack, i.e. plain old Java;;;We are the stack;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;We are a runtime, user provides/uses database with runtime;;Just how it be;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;;Performance is nice to have but not above spec compliance;Gradle;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;2;United States of America (USA)
df7e82edc57c033e7c2dae4d518aa820;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;Company policy: we have other projects using the same stack;;3;It's a fixed project / company requirement;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Docker;I wish we've chosen a different set of technologies;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);20-49;10;Switzerland
e19f4de966bbf28d890b2355ba401811;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Budget;;9;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;TypeScript;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;17;Ireland
9332f4d7757ae880e5abd927e26345fb;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Docker;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;10;Dominican Republic
f231dc0eb0418dfd16e456a8b347630e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;;Redis, HBase;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;gRPC;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Serbia
53ea4a071b3c4d9c5ee5a19e4946a95c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Hype: they told us it's the next big thing;;3;Not enough time / money to migrate the project though I know it'll be better;;Split architecture: frontend / backend;;Hype: it was a modern approach;;2;The team is large and inflexible;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Typescript;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;United States of America (USA)
05b74d3016ae3f7375259fbd173383c8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;;Client requirements ;7;;;Java EE;;;Clients' requirements ;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;;IBM db2;It's strongly encouraged by our application stack choice;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Jenkins 2.0; Ansible; Docker; OpenShift";The tools are fine, the project is just too old;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;Germany
08c015415d815cb481a2a1a0ff812894;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;7;;;Spring ;;It's functionally superior;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;docker;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);3-9;8;United States of America (USA)
6c1b81158c49d77e0237ed8ed807790f;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Developer friendliness;;8;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;Vaadin Framework;We're good, it feels productive, and we know how to move forward;Virtualization tools;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Thailand
503ec25fda5033eb60188713d6e1770a;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"AngularJS;REST;Cl;Jenkins;Evolutionary Dayabase Design;Flyway";It's the worst, we barely move forward;We need to care about performance more;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);20-49;17;Great Britain
20a9d7d25aff9052e0ecbb6cb23fa4ec;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Elixir, Erlang/OTP;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Small company (I work in a shared office space or small office);3-9;15;Brazil
46456f469ff741115fd4dcacbaeab5eb;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;9;;;;SQLite ;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java9;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Contractor / Freelance (I work when, where and for whom I want!);1-2;12;Great Britain
8a19e0bea9d68c3caf469215aa596883;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;We are the DevOps ;;Small team, no room to have separate dev & ops people;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Spring Boot;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;12;United States of America (USA)
4153389f853aa983653e2d6fe489bf45;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;Réactive Streams;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);3-9;15;France
83fc174c53fdd763f8a47548bb6ddc1a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Spock;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Poland
6894e880329200baa5ee25c517a857cc;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Chordiant;Hype: they told us it's the next big thing;;3;It's a fixed project / company requirement;;Microservices;;Hype: it was a modern approach;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;We are the DevOps ;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Pega;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;24;Canada
148e8ce3e655f20510cebe44f798ba9c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Hype: it was a modern approach;;8;;;;Riak;Company policy: we have licenses already;;6;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Casandra;I wish we've chosen a different set of technologies;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;Poland
06b261a1cfc6265540d84afa209326fa;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;7;;;Oracle DB;;Company policy: we have licenses already;;5;;Company stuck in 20th century;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;The clouds! (Azure/AWS/GCP);We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);1-2;12;Great Britain
0e27365b34ab69720ee5b871a65f923f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"html5;css3";The tools are fine, the project is just too old;Project architecture;Director/VP/C-Level;;Small company (I work in a shared office space or small office);20-49;15;United States of America (USA)
3a580b012bd8e5594ecff91e0fc86db7;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;;None;;;;;;We are the DevOps ;Stable operating environment;;We don't care;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;9;Switzerland
a9feeeac8f48282b4c915e7e4fea39da;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Serverless;;Hype: it was a modern approach;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Happier team;;We react to the user complains;Performance directly affects our bottom line;;e-commerce ;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;I'm actually out of work (How insensitive of you!);1-2;0;Belarus
e2374f833612dfa64ed1d97bfa34e250;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Junit5;Golang";We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;5;Russian Federation
b2ff91618758284e96c97f78dd5f0937;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;;Android;Project requirements: it was the best fit for this particular project;;7;;;Serverless;;Our application stack encourages it;;10;;;MySQL;;Developer friendliness;;6;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;None;Typically, it's a lot of firefighting and bugfixing. Not much development.;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;8;Latvia
eb1a26801a125281db697b3b7447715e;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Budget;;10;;;We have a DevOps engineer;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Cucumber;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);100+;3;Somalia
6e1fd77a21787f033d917228607d1ac6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;DynamoDB;It's strongly encouraged by our application stack choice;;6;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;AWS Lambda;I wish we've chosen a different set of technologies;Programming language;Architect;;Midsized company (I work in an open plan office);3-9;30;United States of America (USA)
f93a792dc06bbb51162c6a946d25ae21;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Developer friendliness;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;"Reactjs;elasticsearch";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;12;France
303eb9a8f08b756b1fcdf2bfd9a07ea2;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Company policy: all projects use it;;7;;;;Db2;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Hadoop;Hive";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Germany
63d645728a2228bd18135dc2f1ccce88;IntelliJ IDEA;;;It's a bit more stable than Eclipse;8;;;;Java 8 and Scala;Team skills: it was what we knew the best;;9;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;None;;;;;;We don't even have ops;;I don't know what it is.;We react to the user complains;Performance has never been a requirement;;Akka;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;5;Switzerland
4f5ee40da366911eaf108584d6511cdc;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;7;;;We are the DevOps ;Happier team;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"gradle;gitflow";We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);50-100;12;Brazil
51deff2b6c0aaf121668f7f55763cb39;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;Framework limitation;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;"Wildfly;microservices;EJB;JMS;REST;Java 8;JEE;";Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;15;Brazil
2189de2d712f5276453dd42ae7f2e470;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;;db2;Company policy: we have licenses already;;7;;;We don't even have ops;;no adoption;We don't care;We don't know how to properly address performance issues;;kubernetes, docker, ansible;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Hungary
4819d47b583306b87ec658367b54f45a;NetBeans IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"Docker; Microservices";I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Brazil
b0617270fdf9179b779c738587dd70ed;Eclipse IDE;;Company policy;;3;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Java EE;;Company policy: we have other projects using the same stack;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We have professional perf engineers in the team;;NA;Java;The tools are fine, the project is just too old;Programming language;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Brazil
fe341ee8fcedd68f07426198688bbb1b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;2;;nothing better;Spring ;;Familiarity: we know it the best;;5;;avoid entropy;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Postgres;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;"Maven;Postman";It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;12;Ukraine
6de4db837172ea0ca3b64c1a144c0cb3;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;8;;;We don't even have ops;Happier team;;We react to the user complains;Performance has never been a requirement;;Perl;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;25;United States of America (USA)
e8707d130c7eb975140b3c48b771cd81;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Contractor / Freelance (I work when, where and for whom I want!);3-9;14;
c81fa27f3fbca25d6160f7da113331ac;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;7;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"RX;Akka";We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Midsized company (I work in an open plan office);10-19;20;Germany
90c1a08b1f1b6ddb80f8d137a6fdf8bd;IntelliJ IDEA;;Functionality: it's superior;;9;;;;Typescript;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"typescript; react; redux; react-native; webpack";We're good, it feels productive, and we know how to move forward;Application stack ;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);10-19;17;Poland
c27cde391dde6e3af5a4adf72650a93a;IntelliJ IDEA;;Company policy;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;Not interested, we like the wall where it is;;N/A;We react to the user complains;Performance has never been a requirement;;grpc;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Moldova, Republic of
26935140a485b6941401747b1b33549e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;7;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;;Supports Customer Scalability Needs Best;6;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Not super excited about our tools.;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;30;United States of America (USA)
f5b2512c74e582176436ce1886b72c80;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;1;It's a fixed project / company requirement;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Oracle DB;;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Front end and backend development separated;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Brazil
de02b74e3ab7ab9e4b121d4bcf6444c3;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;6;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Angular;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Ecuador
e2c37a4cf4f51294eda6eafb7779d7d3;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;10;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;;we do not have strong availability requirements;Angular 4;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;Switzerland
52d7decbcf3a2079d8d650494e404c14;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Amazon RDS;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Kotlin;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;6;Romania
15585ecb37cbde6c45acdbddceee5ccc;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Ecosystem: community, tools, libraries;;10;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;;NA;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;kotlin ,vaadin;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Dominican Republic
109b94222d1257027ea03f994951f1cf;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;10;;;SOA;;Familiarity: we have the skills and know we can make it work;;7;;;;Mariadb;Budget;;7;;;We have a DevOps engineer;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Vert.x;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);10-19;15;Switzerland
03403dd0add704d5cdeeed0d170ba69d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Java9;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;11;Costa Rica
12b4dbad53e15ad3a002025f34761e52;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;3;Not enough time / money to migrate the project though I know it'll be better;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;;we don't have them;We react to the user complains;Performance has never been a requirement;;Kotlin;It's the worst, we barely move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;3;Poland
d3776249fde6e92aed14bb880c4e4ed4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;gPRC;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Canada
76fe319a514498b3c166518574a00c7a;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Our application stack encourages it;;3;It's a fixed project / company requirement;;;JCR;It's strongly encouraged by our application stack choice;;6;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;;Customer not willing to pay for performance measures before a problem occurs.;"Docker;Java9";The tools are fine, the project is just too old;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);1-2;23;Germany
15e68804976c82c04cd6d9089619055e;IntelliJ IDEA;;;Heard it was good and most popular so keeping up with the trends;6;;;;Python;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;;Elastic search;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We don't care;Performance has never been a requirement;;None;Typically, it's a lot of firefighting and bugfixing. Not much development.;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Great Britain
c40da5e112324abb71101678e11f54d5;IntelliJ IDEA;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;;Refactoring old stuff;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Vaadin;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;15;Netherlands
72fca60202bdd3623a7c52e83b77f096;Eclipse IDE;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;5;;No need;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Happier team;;We have professional perf engineers in the team;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Ireland
ec97749ad382a062907a2aa76d96e189;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Developer friendliness;;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Docker;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Germany
30c7c36341aada0735c149c34c3ff0b8;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Suitability: it fits our requirements most effectively;;5;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We are the DevOps ;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Scala;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;4;Estonia
6e5b2d8179e825dd2f8fad7a3fe77ff5;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Hibernate and jpa;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);1-2;10;Italy
b174d6b293202d33435d2dc427e1aabb;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;No stack, i.e. plain old Java;;;"Just making a library; not a web app";10;;;Library or framework;;Suitability: it fits our requirements most effectively;;10;;;;None;;;;;;We are the DevOps ;Stable operating environment;;We don't care;Performance has never been a requirement;;Junit5;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;I'm actually out of work (How insensitive of you!);1-2;4;United States of America (USA)
00c009b315f4b8154781f912d0ddb20c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kubernetes;We're good, it feels productive, and we know how to move forward;Project architecture;Consultant;;Midsized company (I work in an open plan office);20-49;16;Great Britain
044d4fac97857a7e86b85ccacff223b7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;It was an experiment;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Belgium
b403186cc9da48e851d8fe0a6f9c7bab;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Our application stack encourages it;;6;;;MongoDB;;Developer friendliness;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Java 8;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;7;Spain
1c3511fcbbe260e1cf17fc9b87ab34a6;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Don't know;We're good, it feels productive, and we know how to move forward;We need to become DevOps;;Software Engineer;Midsized company (I work in an open plan office);10-19;8;Great Britain
5d63e3d937599a8a44060ab8a35db97c;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;;DB2;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
8df46fdd0f72cae512715e047aff814d;Eclipse IDE;;Functionality: it's superior;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;It's functionally superior;;9;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Neo4J;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;java ee 8;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Ireland
983f269e03c05a62f67a52a2b0389be4;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;Nothin except time resourcea and roi business case;Oracle DB;;;Legacy;6;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Aws lambda; aws iot; microsoft code; visual studio for mac";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;30;Australia
40b4d0bc6842483d82a3a97da88b8dde;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;;It's the architecture of the application we're integrating with;6;;;MS SQL;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We have APMs and monitor health of the deployments;;Performance is not a high priority;"Java 8;Spring Boot";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Australia
57678123d3cc73c13e7ac6912ee3f13e;Eclipse IDE;;Familiarity: it's what I know;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;DB2;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;;Company policy;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Microservices;OAuth";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);50-100;22;New Zealand
579ec60ad1b8c2864d01e2910692f1e7;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;SOA;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Ops friendliness;;9;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"kotlin;java 9";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);10-19;16;Netherlands
3d84fef151edfe9cbe71f5bcbe5cb809;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;It's strongly encouraged by our application stack choice;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Git;Java 9;JUnit 5";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;7;Australia
9eed2fbff64da29abc217541ba50bd8d;IntelliJ IDEA;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;6;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;"Flink;Druid;Kafka";Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Team Lead;;Midsized company (I work in an open plan office);10-19;19;United States of America (USA)
02444569004a750717586c1a749eb6d1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Haslell;The tools are fine, the project is just too old;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Australia
477435578e37552620995bef055bd606;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;9;;;Microservices;;Our application stack encourages it;;8;;;;Db2;Ops friendliness;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Apm;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;20;United States of America (USA)
7ec0f74ed110a6f602c65e331e9d647f;Eclipse IDE;;Budget;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Our application stack encourages it;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;vuejs;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;12;Malaysia
bb6a0c7a2f14f0a23b8c63218f3fe142;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Our application stack encourages it;;7;;;Postgres;;Developer friendliness;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Erlang;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Small company (I work in a shared office space or small office);10-19;6;Brazil
498dc0558a907da9ae6fa0bc8975648b;Eclipse IDE;;;Largest market share/free;7;;;Java 8 (or newer);;;Just keeping up with latest version;7;;;;Vaadin;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Familiarity: we know it the best;;9;;;We don't even have ops;;we didn't adopt;We react to the user complains;;after thought, functionality first and foremost;proper use of git to manage all source code;The tools are fine, the project is just too old;Application stack ;Management (People/Project);;Small company (I work in a shared office space or small office);3-9;25;Canada
88421ccc4fcf51bb1d5d09aff9979a6d;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;MS SQL;;Developer friendliness;;8;;;At least we talk to the Ops people;Stable operating environment;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Docker ;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;9;India
78db1eb08ebc3d19abd07a39e32609bb;NetBeans IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;10;;;We don't even have ops;;we haven't use devops;We react to the user complains;We don't know how to properly address performance issues;;"golang;spring";Typically, it's a lot of firefighting and bugfixing. Not much development.;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);10-19;10;China
bd674ccb37980582dfaeb8b4985c55a9;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;6;;;Postgres;;It's strongly encouraged by our application stack choice;;6;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"Spring; Intellij IDEA; PostgreSQL";We're good, it feels productive, and we know how to move forward;Application stack ;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);3-9;21;Malaysia
06e6589b6790cdc0f6027fba4819305a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;Postgres;;Familiarity: we know it the best;;8;;;We are the DevOps ;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;"React;Kafka";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Brazil
8a2b62b5bca69a99429b27dcca8ffbf7;Eclipse IDE;;Company policy;;9;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Serverless;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;Java 8, Guice;We're good, it feels productive, and we know how to move forward;IDE;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
321fc5a5c31f4e88746e22d33adc19a2;Eclipse IDE;;Project requires it;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Netflix Stack;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Germany
794abaa889aa4edec93c75165b180cc2;Eclipse IDE;;Budget;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;MS SQL;;Familiarity: we know it the best;;5;;Too much development required to move away;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;none;The tools are fine, the project is just too old;Database;Architect;;Midsized company (I work in an open plan office);20-49;25;Australia
d05096a075c269322154830a414668e5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Company policy: we're a $LANG shop;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;We are the database;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Rust;Docker;Kubernetes";We're good, it feels productive, and we know how to move forward;Virtualization tools;;Intern;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;United States of America (USA)
9a584df66250b5f233b029dea2dbfb1d;Eclipse IDE;;Budget;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MS SQL;;Developer friendliness;;7;;;We don't even have ops;;We don't have ops;We react to the user complains;Performance has never been a requirement;;Continuous Integration;It's the worst, we barely move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);20-49;8;India
e4e3295f64d312ce038844dd2fad1f8a;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Familiarity: we know it the best;;9;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Vaadin;REST;CI";We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Small company (I work in a shared office space or small office);20-49;25;Germany
6e4c7083c21de286c2bc8309174f6e6c;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;;Decision made in the past, huge effort to change it now;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Vavr;The tools are fine, the project is just too old;Project architecture;Team Lead;;Midsized company (I work in an open plan office);100+;12;Ukraine
6980e33fc770790f0678efc5820586ff;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"JProfiler; Yourkit; Sal Developer; ";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;3;India
c419935f23f81d14010f5bc87418ee7e;IntelliJ IDEA;;Project requires it;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;3;It's a fixed project / company requirement;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;Java 8, Spring;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);10-19;1;Ukraine
c7032df58f793bf8f3bd04efc3d68301;IntelliJ IDEA;;Company policy;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Eclipse Memory Analyzer, Thread Dump Analyzer, ;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;India
2426a104d12466875894753bea893385;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;;OSGi Equinox;;Modularity;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;RxJava, Hazelcast;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;27;Switzerland
df0826be8ca26ae2521bcbb4dfaa9b33;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;;Guice + jOOQ + JAX-RS;;Simplicity;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;;MariaDB;Familiarity: we know it the best;;7;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;CSS flexbox;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;19;Spain
9e6ac95b3eb412627ea1249bf4ce1a38;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;7;;;We don't even have ops;Faster resolution of problems;;We don't care;Performance directly affects our bottom line;;android things;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);1-2;20;Spain
6f4fb02224943fe3e4822a3435946f80;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;2;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Better internal communication;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;JavaFX 8;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;Germany
306e7608836c35d88d061d5ccfbe7bb9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;JProfiler;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);20-49;17;Netherlands
f05efa015f8f7d1129eefe34dc6ccadb;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Ops friendliness;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;";";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Estonia
a416cda1f2b5bed31e685ddf58789f47;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;aws;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;India
e3d55f8ffd3e23b3e97b86712289a491;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;MySQL;;Familiarity: we know it the best;;3;It's a fixed project / company requirement;;We don't even have ops;;We do not have them...;We react to the user complains;Performance has never been a requirement;;"elm;nosql;microservices;gradle;kotlin";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;20;Denmark
56f39d2c79025109b09283cf313dac54;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kubernetes;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Director/VP/C-Level;;Midsized company (I work in an open plan office);10-19;14;Spain
897f361738db143f6fe5bfd9fff4b66e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;;Performance has never been a requirement but we would like to deploy performant applications;"ReactJS;React Native;Kotlin;Functional programming";We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Small company (I work in a shared office space or small office);3-9;22;Hungary
f9391d942d1cdd917362a5dde38f6ea9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;;We are using it to migrate away from a monolith;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Great Britain
b4a6ee042ab6c58deb39a9792b9b7cee;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;"jsf2.2;vaadin;html5";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Turkey
81789a348bafecb199b67bd7617b448d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Postgres;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;no;Typically, it's a lot of firefighting and bugfixing. Not much development.;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Germany
41e87b6a7d7f54c8ea43e1446ae0e2f6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;Docker;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;Romania
60211cffc4db5cd946f01b731d1f4992;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);3-9;18;Netherlands
138156bcfe8d236e586cfc00b259c49d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;7;;;Oracle DB;;Company policy: we have licenses already;;6;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Ansible;We're good, it feels productive, and we know how to move forward;Virtualization tools;;Software Factotum;Enterprise Company (I work in a cubicle or large open plan office);20-49;25;South Africa
5941868393e3d7192755c4d7b1bc6663;Eclipse IDE;;;I use different products which are Eclipse based: Spring Tools Suite, JasperReports Studio, OpenEdge Developer Studio;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;10;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;"Spring 5;React in Java and JS;";We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);3-9;15;Lithuania
1344dafb058a0641980fab50075f57c3;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Developer friendliness;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Jshell;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;2;China
08341f67b1ddbeff498b586e17a24347;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Company policy: all projects use it;;10;;;Oracle DB;;Company policy: we have licenses already;;7;;;We are the DevOps ;;We have Blue Green Deployment which is a machine without any physical devops engineer assigned;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"PiTest;OWASP ZAP; ";We're good, it feels productive, and we know how to move forward;Database;;Quality Manager;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;Estonia
aacb66a5900858f8ed7e44103d9d0577;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;;Don't understand the question;"JProfiler;Cucumber;Kotlin;Ratpack";It feels unproductive, but the project is easy to maintain in production;Database;Team Lead;;Midsized company (I work in an open plan office);3-9;13;Spain
6df15d21b10f24c131e7e596d78f9684;Eclipse IDE;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;8;;;Library or framework;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Grinder;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Midsized company (I work in an open plan office);3-9;6;India
96d2902dcc5662f52dcd8ade6223a14f;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MS SQL;;Company policy: we have licenses already;;2;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;-;The tools are fine, the project is just too old;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Greece
42c28334375a25e31042d83933fbdf07;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Java EE;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Familiarity: we know it the best;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;react native;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Spain
73f747a8e7f435f0c0924fe8a3ba81c0;IntelliJ IDEA;;Project requires it;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Microservices;;Company policy: all projects use it;;7;;;Postgres;;Ops friendliness;;7;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kubernetes;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Germany
c56ac4388da70a1362968829f3f875a5;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;angular2;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Italy
f13530052e9a4df28d3f1a58750a37be;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;4;It's a fixed project / company requirement;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring Boot;The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Great Britain
224b8f5794d75593c03bcc6aef5ae2a3;IntelliJ IDEA;;Functionality: it's superior;;9;;;JavaScript;;Ecosystem: community, tools, libraries;;9;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Library or framework;;Hype: it was a modern approach;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Lowering complexity of the maintenance;;We don't care;Performance has never been a requirement;;"json; xml/xslt; Google DevTools;";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);1-2;20;Russian Federation
c13af48349e020b30cbf165ac9702292;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;rxjs;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;16;Luxembourg
b12582f730b555db2c82ab3383d075be;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MySQL;;Budget;;7;;;We don't even have ops;;we don't use DevOps;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;kotlin;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);100+;4;India
acbdc17080d6d98aa34d64eb2eac7f4f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Reactive Systems;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Greece
a7ae931eff0b4e2cb2aaf2cf81b25ec1;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;9;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"Splunk;AppDynamics;PivtalCloudFoundary,SpringBoot";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;India
fa0270b861efdac18a6e754f7e1730d4;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;OSGI;It's functionally superior;;10;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Familiarity: we know it the best;;9;;;We don't even have ops;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;OSGI;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);20-49;10;Germany
2390332231b90a6a932ea6d950be0390;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;7;;;MySQL;;Developer friendliness;;8;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;spring boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);10-19;15;Hungary
2b190465a02e639fe546937d984cc029;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;It was an experiment;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Our application stack encourages it;;4;It's a fixed project / company requirement;;Postgres;;Budget;;7;;;We don't even have ops;Faster resolution of problems;;We don't care;Performance has never been a requirement;;-;The tools are fine, the project is just too old;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;10;Germany
5aa24a5259a1860327dbf703dac15244;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;;We have a large proportion of our users on Java 7;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;;DB/2;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kubernetes;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;23;Great Britain
073ae2a8c6e733a70bc45f8e83770e3c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Developer friendliness;;8;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"primefaces; java 9; proxava";It feels unproductive, but the project is easy to maintain in production;Application stack ;Management (People/Project);;I'm actually out of work (How insensitive of you!);3-9;12;Netherlands
dd9920cd669b06c91d89feb41e6e05ed;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;spring boot;I wish we've chosen a different set of technologies;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Turkey
0bdce5716710ccb2181c5bf41706bf88;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;None;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);100+;5;Great Britain
d9e75cf2a8ad466e097b0653f760924d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;9;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;;legacy system is the biggest issue concerning performance;"WildFly;IntelliJ";We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Netherlands
1f5aeb496fc06368f41142bd9ae86a58;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Spring 5;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Small company (I work in a shared office space or small office);3-9;7;Estonia
03611b447f0814b1ce8da8111b20eba0;IntelliJ IDEA;;Functionality: it's superior;;9;;;JavaScript;;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Go;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;12;Germany
52ef1e25e00be457e75d5c87f6fc5b82;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Familiarity: we know it the best;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;Nothing, we're moving to microservices;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;We are the DevOps ;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;microservices;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);10-19;20;Sweden
2227f204b81bf4f1fd8dc05377d01388;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;7;;;We are the DevOps ;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Germany
340de372daf1ee8a580268d0fdaae28f;;RAD;Company policy;;4;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Company policy: we have other projects using the same stack;;4;It's a fixed project / company requirement;;SOA;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;Not interested, we like the wall where it is;Better internal communication;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Jenkins, Gradle and Artifactory;It's the worst, we barely move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;7;India
c6e7441a67df1a2380e21c4746c1847a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Groovy;;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Amazon RDS;;Ops friendliness;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ML;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;8;Russian Federation
ac1334cde5b2dceaacfe89237d459e2e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;16;Russian Federation
b9679aaaf8aaff53407fb816e39e828b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;;Solr;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Jenkins;The tools are fine, the project is just too old;We need to become DevOps;Team Lead;;Small company (I work in a shared office space or small office);10-19;11;Greece
5428f968b0937b43daedf680330703e9;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Groovy;;Functional superiority;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Plan to experiment with Kotlin for service development;We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;25;Ireland
5303707fb461b027e1b53e1dc49dd28f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;9;;;Oracle DB;;Budget;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have professional perf engineers in the team;Performance directly affects our bottom line;;spring boot;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);1-2;5;India
2883fee4fe55390b3d192bf307e796a0;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Germany
6e8b32fc3b0b31fc60116a0f64ee578c;IntelliJ IDEA;;Functionality: it's superior;;7;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Company policy: we have other projects using the same stack;;6;;;Microservices;;Hype: it was a modern approach;;8;;;Postgres;;Ops friendliness;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"mesos;marathon";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Team Lead;;Midsized company (I work in an open plan office);3-9;14;Netherlands
450d38b2995a8444a2a34f1f6465ee44;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;It's strongly encouraged by our application stack choice;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Spring; ReST;JAVA;Eclipse;Openstack;VCAC;Jenkins";We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;India
ce7dd88ee810fa37ca589c80dede9273;Eclipse IDE;;Budget;;3;It's a fixed project / company requirement;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;6;;;;;Familiarity: we have the skills and know we can make it work;;;;;;;;;;;;;;;;;;;;;;;;;;
ff7e9c422be04658fcc34fb3d7324bf1;IntelliJ IDEA;;Functionality: it's superior;;8;;;Scala;;Functional superiority;;7;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;8;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;;It's good but not absolutely vital for us;GraphQL;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Small company (I work in a shared office space or small office);20-49;5;Ireland
d0b91572fef18c6a1c4a166e46824d24;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;3;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Docker;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;8;Germany
5229714b57e114c68eac05e1c966f088;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;NA;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;6;Georgia
f19a1cdc3365fb462eef3dab54024f04;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;EClipsse,SOAPUI,SQL Developer,Spring, JEE, MyBatis, Weblogic,Junit;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Management (People/Project);;Small company (I work in a shared office space or small office);100+;13;India
875c441671591422c7eefe00a8f2e015;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;;Framework Requirement;9;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Our application stack encourages it;;3;It's a fixed project / company requirement;;;SAP HANA;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Hybris;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;17;Austria
41eeb5363b66a6d21e5d6afaf8476d2d;IntelliJ IDEA;;Project requires it;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;;Legacy reasons: it was chsen ages ago;7;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Rust;The tools are fine, the project is just too old;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;15;Estonia
fabde5fdd1ab6c9a578eb18899ff8b05;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;9;;;Monolith;;Company policy: all projects use it;;7;;;Oracle DB;;Familiarity: we know it the best;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;kibana;The tools are fine, the project is just too old;Database;Software Developer;;Small company (I work in a shared office space or small office);10-19;2;India
1010d4c1dabbcab59fb6a25bca158d32;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;2;;Long-term service commitments;Java EE;;Company policy: we have other projects using the same stack;;1;;Long-term service commitments;SOA;;Hype: it was a modern approach;;4;;Long-term service commitments;;DB2;;We write it;1;;Long-term service commitments;We are the DevOps ;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"GitHub;Python";We're good, it feels productive, and we know how to move forward;IDE;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Great Britain
58fd19afe132538489bc9adb96939d22;NetBeans IDE;;Company policy;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;5;It's a fixed project / company requirement;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;It's a fixed project / company requirement;;Postgres;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;Spring;It's the worst, we barely move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;3;Portugal
9c3a7f97c7d68947c028fa7be7e515c6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Intersystems Cache;Company policy: we have licenses already;;1;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have professional perf engineers in the team;Performance directly affects our bottom line;;Yourkit;We're good, it feels productive, and we know how to move forward;Database;Architect;;Small company (I work in a shared office space or small office);3-9;20;Germany
b71fabaddf79b7e1e008ef8241e716f9;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Budget;;7;;;We don't even have ops;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;docker;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;8;Brazil
d7455f7017c442651232fb3d5f575e36;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;No stack, i.e. plain old Java;;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;;monolith disguised as microservices;Company policy: all projects use it;;1;It's a fixed project / company requirement;;Cassandra;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Happier team;;We react to the user complains;Performance has never been a requirement;;Java 9;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Portugal
8e25b41cd68f845543b2cebaccf0f2bc;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;Time;MS SQL;;;legacy;8;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;;When a performance issue pops up, we address it;dropwizard metrics feeding an influxDB with grafana;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;14;United States of America (USA)
599cb885da15cb9d59cd5c0f388c7015;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Struts;Familiarity: we know it the best;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;We are moving, but slowly;MySQL;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;Performance has never been a requirement;;"jrebel;meld;vmware workstation;";We're good, it feels productive, and we know how to move forward;Project architecture;;A bit of it all;Small company (I work in a shared office space or small office);3-9;30;Norway
207421c6c45def80cd3f5fc942188831;NetBeans IDE;;Project requires it;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);3-9;20;Italy
76c6d44372d19c93dc7885774b90c8bd;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Our application stack encourages it;;6;;;;Derby;Suitability: it fits our architechture / requirements;;6;;;We don't even have ops;Happier team;;We don't care;Performance has never been a requirement;;Spring Boot;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);100+;10;Republic of Macedonia
66451bb8a653413dbec3ac54c0ebc0a0;IntelliJ IDEA;;Functionality: it's superior;;9;;;Kotlin;;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;SUPER excited about Spring Boot 2 and the related Reactive projects, particularly Spring Data Couchbase.;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Canada
9efac281f3f11d6cef1e136722ee0b77;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Postgres;;Developer friendliness;;9;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;angular;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Brazil
001278d983d73996b8bfc502ae42d055;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;spring ;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;8;Poland
e9afb1a61bae664b868ffcc662c7cca1;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;5;The price of the migration is enormous;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;react;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;28;Great Britain
f7c15ecb9fcbb940042f6779e8da9c77;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;It's functionally superior;;9;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;Kubernetes;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Startup (I work in a small cupboard at home);1-2;18;Spain
524a21b7dd5c845a99885fa1c73d4d89;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Happier team;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spock testing framework;The tools are fine, the project is just too old;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;20;Germany
67c079511d975697f8b59f1ff6cde140;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;9;;;Microservices;;Company policy: all projects use it;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Kubernetes, Spring Boot, Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Russian Federation
73e3be99e34c548f05f7ac9dc28492bc;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;MySQL;;Developer friendliness;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;Angular 2;I wish we've chosen a different set of technologies;Project architecture;Architect;;Midsized company (I work in an open plan office);10-19;18;Czech Republic
d3aaba6e67c8dba90264fa7a19c1e659;;RAD;Company policy;;5;It's a fixed project / company requirement;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Sonarqube;It feels unproductive, but the project is easy to maintain in production;IDE;Management (People/Project);;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;
eddaaeed19ae3c35584b6938fee43ed7;Eclipse IDE;;Project requires it;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"microservices;containers;docker;jenkins";It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);50-100;12;Paraguay
fe7d058c563c86e3a4e117ec78186544;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;JavaFX;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;23;United States of America (USA)
e9f1ef645b045ad897c055702ae6355c;Eclipse IDE;;Company policy;;9;;;Java 7 (or older);;;started with Java 15 years ago, now at 7, 8 coming soon(ish);9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;mariadb+galera;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;;"industry trend, need to ""me-too""... (you asked for driving force... it got rationalized after)";We benchmark or have performance tests to catch regressions;;"we provide a ""capacity planner"" (expected load, num of servers needed) to our customer, we test to verify accuracy";Google Cloud Platform;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);20-49;26;Canada
82cd42455edb3ea88b83bc5fd3182d04;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;10;;;Microservices;;Company policy: all projects use it;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;We have a DevOps engineer;Better internal communication;;We don't care;Performance has never been a requirement;;Angulat;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;1;Latvia
2f05668830a04f2f85467eac7721ff55;Eclipse IDE;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;8;;;;DB2;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;No one;We're good, it feels productive, and we know how to move forward;Project architecture;Director/VP/C-Level;;Small company (I work in a shared office space or small office);10-19;20;Italy
c1243611ee6865bd95c765b509a448f6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;3;;C and D;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;Oracle DB;;;I don't know...;8;;;We are the DevOps ;Stable operating environment;;We don't care;Performance has never been a requirement;;Investigations about Spring Boot as alternate production plattform;I wish we've chosen a different set of technologies;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;15;Germany
58ca93d338c67a1d188a70151f97f935;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;We are the DevOps ;Faster resolution of problems;;We don't care;Performance has never been a requirement;;None;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Switzerland
b08586e8de24cc9e57ace4b6f947f07f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;7;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster delivery of features;;We don't care;Performance tooling / experts are expensive;;Vaadin,Java9,Kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Mexico
0cc16521b86c97bf16ef1c2314d4dc43;NetBeans IDE;;Company policy;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;None;The tools are fine, the project is just too old;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;5;Argentina
230215805291e2c64a2409d9e930846b;Eclipse IDE;;Familiarity: it's what I know;;5;;Actually, I'm planning on switching to IDEA;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;Actually, we are switching step by step;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;;We plan to improve in this field as well, trying out APMs - it's just a time consuming process;IntelliJ IDEA;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Germany
cd109bece28fd95840fbd4bae88b7008;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;"appdynamic;rebelsprofiling";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Director/VP/C-Level;;Small company (I work in a shared office space or small office);3-9;15;France
bed5d7b9bddc53191e9da521342f3d25;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;5;The team is large and inflexible;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;;Elastic Search;Company policy: we have licenses already;;5;The data is too large to migrate;;At least we talk to the Ops people;;Developers doing development not dev ops;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Play;It feels unproductive, but the project is easy to maintain in production;Programming language;Software Developer;;Small company (I work in a shared office space or small office);10-19;20;United States of America (USA)
d774c30be257498b014170c044004684;Eclipse IDE;;Company policy;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;10;;;We are the DevOps ;Faster delivery of features;;We have professional perf engineers in the team;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Team Lead;;Midsized company (I work in an open plan office);3-9;5;Portugal
fb02b4ffae393a642a1ade421c3ca217;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;7;;;Cassandra;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"OrientDB;cqengine;jmh;Chronicle:Wire,Bytes,Queue,Map,Set";The tools are fine, the project is just too old;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;12;Poland
adf98a16ba6c9e96eb1ac12fbe1e074d;;ANDROID STUDIO;Functionality: it's superior;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MySQL;;Budget;;8;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Kubernetes;I wish we've chosen a different set of technologies;Programming language;Team Lead;;Startup (I work in a small cupboard at home);3-9;5;Brazil
51b950a5c57612ee776eb22b80f1a1ff;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;React programming;We're good, it feels productive, and we know how to move forward;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;14;Spain
87937830379bdbec60bf60f693bf6013;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;It was an experiment;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Monolith;;Familiarity: we have the skills and know we can make it work;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;ReactJS;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;United States of America (USA)
5b26ff177d67e2015f50174430e31433;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;;3-layer architecture;Company policy: all projects use it;;7;;;Postgres;;;Customer requirement;7;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;none;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);3-9;17;Germany
2c6acfc1dcd1b8a1c39d725ad5e76412;NetBeans IDE;;Company policy;;4;It's a fixed project / company requirement;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;;I don't know;7;;;;Webapp;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;9;;;We don't even have ops;;Not;We benchmark or have performance tests to catch regressions;;Not sure;I would love if my team used more agile methodologies.;The tools are fine, the project is just too old;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);20-49;4;United States of America (USA)
1273a080f39f44dca6b9056abf275c62;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spinnaker;We're good, it feels productive, and we know how to move forward;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United States of America (USA)
33d9f13c638b708ae91d04015b1359c6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;custom in-house non-monstrocity, mostly;;it was a long time ago and these newer frameworks didn't exist.  Plus, we need more control than most of them give.;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;our customers choose their own data systems, we don't use/prescribe one.;;we sell a platform used for virtually any application type;10;;;We don't even have ops;;we don't.  Well, maybe our marketing/web team does, but I work on product.;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"kotlin; typescript; mobx;";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Midsized company (I work in an open plan office);10-19;7;United States of America (USA)
670e132fdd7a17c4bb277f512a56d6fd;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;9;;;MS SQL;;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;angular 2;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;18;United States of America (USA)
c04cb02175f1304f64c5d126568ff06f;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;4;The project kinda works, don't touch what's not completely broken;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;Java 9;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;5;India
2b3405a86fa1c101f9d9cb5a01106977;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;7;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Unknown;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;India
01de3504cf54c9811b33f2344dcb8dd6;IntelliJ IDEA;;Functionality: it's superior;;10;;;Scala;;Company policy: we're a $LANG shop;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Company policy: we have other projects using the same stack;;4;The team is large and inflexible;;Microservices;;Hype: it was a modern approach;;5;The project kinda works, don't touch what's not completely broken;;;DynamoDB;Ops friendliness;;4;;Time!;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Akka;It feels unproductive, but the project is easy to maintain in production;Database;Software Developer;;Midsized company (I work in an open plan office);3-9;2;Great Britain
33b66d55046d637683c42bdfad39486e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;"mongodb; docker";It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Midsized company (I work in an open plan office);10-19;10;Cambodia
34fd67246f88b99d4aa3519102dc5b49;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;AWS;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;6;United States of America (USA)
a5e06fbddc1ac4376aa1ed58eb8f62b7;IntelliJ IDEA;;Functionality: it's superior;;10;;;JavaScript;;Ecosystem: community, tools, libraries;;9;;;;nodejs;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance tooling / experts are expensive;;angular2;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;17;United States of America (USA)
eaa950dfa6c1729eaed0d01a1344c3fd;IntelliJ IDEA;;Company policy;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Java EE;;It's functionally superior;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Suitability: it fits our architechture / requirements;;9;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Cassandra;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;25;Canada
6ceb1cbb7526400a45b7cd0603c595ae;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;5;;Currently migrating;At least we talk to the Ops people;Stable operating environment;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;SpringBoot;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Consultant;;Small company (I work in a shared office space or small office);20-49;4;United States of America (USA)
dd5abcac62116134d525441af4886349;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Familiarity: we know it the best;;8;;;SOA;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Company policy: we have licenses already;;7;;;We are the DevOps ;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;spring boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;Great Britain
ddb868e2dea7845dd8162bd23f7d04c5;IntelliJ IDEA;;;I was the only one using Eclipse in my company. Switched to IDEA for consistency.;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;MySQL;;Ops friendliness;;7;;;At least we talk to the Ops people;Better internal communication;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"opentracing;kubernetes";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;8;Poland
3c538cf84113676804275b4d6688f61d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;MS SQL;;Familiarity: we know it the best;;8;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 9;We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Small company (I work in a shared office space or small office);3-9;25;South Africa
db761d95248222293141d0c6f52a5583;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;It was an experiment;;6;;;Java EE;;Familiarity: we know it the best;;8;;;Microservices;;Familiarity: we have the skills and know we can make it work;;8;;;MySQL;;Ops friendliness;;9;;;Not interested, we like the wall where it is;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;SolarWinds;We're good, it feels productive, and we know how to move forward;Programming language;Consultant;;Small company (I work in a shared office space or small office);1-2;28;United States of America (USA)
1fc09307833f2b73a2819ac3734e56e9;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;10;;;Serverless;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Developer friendliness;;10;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Architect;;Midsized company (I work in an open plan office);20-49;21;Brazil
7126740786b40b415b7338c1b4f0192a;Eclipse IDE;;Budget;;5;Not enough money in the budget;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;Ionic;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;30;Israel and the Occupied Territories
d264a7a339c0e6dca6daf411241bbb3c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;6;;;No stack, i.e. plain old Java;;Familiarity: we know it the best;;7;;;SOA;;Familiarity: we have the skills and know we can make it work;;9;;;Cassandra;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;performance does matter in some applications while it is irrelevant in others. So our attitude towards performance solely depends on application;" JRebel; Jenkins;Docker";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;4;India
1d44992e9261ac68e489dc8bb3e92c9d;Eclipse IDE;;Budget;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;SOA;;Our application stack encourages it;;8;;;MS SQL;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;java9;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Team Lead;;I'm actually out of work (How insensitive of you!);3-9;10;Greece
e3479cd20722202405ac440768ec6251;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;Developer friendliness;;8;;;We have a DevOps engineer;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Kotlin, Spring 5;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Consultant;;Midsized company (I work in an open plan office);3-9;12;Singapore
aad5e87d22717d30fd544298a81fc7f6;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Flink;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);3-9;11;Estonia
0c38e6db955e8d57e23ee44267ff2c0c;IntelliJ IDEA;;Functionality: it's superior;;9;;;Scala;;Functional superiority;;9;;;;akka-http, akka-streams, akka actors;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;akka-streams;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Poland
2d0326a2ec6dc3d94acdb1796f9bd7dd;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Hype: it was a modern approach;;3;The project kinda works, don't touch what's not completely broken;;MongoDB;;Suitability: it fits our architechture / requirements;;3;;We can't afford the time to move away from it with a small team;We have a DevOps engineer;Stable operating environment;;We react to the user complains;;We overengineered the whole thing and we know it's suboptimal;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);3-9;18;Great Britain
d204c183dde7c14fbbaf778799e917d7;IntelliJ IDEA;;Functionality: it's superior;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;;Supportability ;10;;;Spring ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Amazon RDS;;Suitability: it fits our architechture / requirements;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;MongoDB;The tools are fine, the project is just too old;Database;Architect;;Midsized company (I work in an open plan office);100+;20;New Zealand
138d1dd04e148792d01d91ee3aacd39f;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;;Legacy. Was not part of the decision.;4;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;The project kinda works, don't touch what's not completely broken;;MySQL;;Familiarity: we know it the best;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"Puppet;prometheus;cassandra";The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);20-49;16;Norway
db3aaad0a9fe3acb2baff2d8dd45f411;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Angular2;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);3-9;12;Philippines
e771aae74a04bdd52b80534142938f82;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8, Java SE 9;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;United States of America (USA)
2c4bae7d191baa477176853ba119c576;Eclipse IDE;;Company policy;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MS SQL;;Company policy: we have licenses already;;9;;;We are the DevOps ;;No other choice due to very small team;We react to the user complains;Performance directly affects our bottom line;;Git;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Small company (I work in a shared office space or small office);3-9;2;Switzerland
8c134eb6fd55d449a9f3e1260a120997;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;;just a move to the newer version;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;It's strongly encouraged by our application stack choice;;7;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;gatling;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;10;Poland
9cd35ca9f84162c6b30a371c3b154272;;Rational Application Developer;Company policy;;3;It's a fixed project / company requirement;;Java 7 (or older);;Company policy: we're a $LANG shop;;8;;;;JSF;Hype: they told us it's the next big thing;;1;It's a fixed project / company requirement;;Monolith;;Company policy: all projects use it;;2;It's a fixed project / company requirement;;;DB2 ZOS;Company policy: we have licenses already;;7;;;At least we talk to the Ops people;Happier team;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;"Spring; Git";It's the worst, we barely move forward;Application stack ;Software Developer;;Midsized company (I work in an open plan office);10-19;10;Belgium
34cb1c8cc77ff711612b8038f9921857;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Happier team;;We react to the user complains;We don't know how to properly address performance issues;;"Angular4;Java8";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);20-49;20;Germany
46f49d7b1cc7620f9cad5c44dcbd1c65;Eclipse IDE;;Company policy;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;7;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Spring Framework;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Sudan
bea784e6d9adbaa272f909288b104bb5;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;7;;;Library or framework;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Familiarity: we know it the best;;9;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Microservices;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;Midsized company (I work in an open plan office);20-49;8;India
856bd8d5db72788db4159494f20b3f3f;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;none;It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Midsized company (I work in an open plan office);3-9;19;Netherlands
1bdac97228146d5079796550501b967d;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;;a mix of A + D + E ;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;;moving a away is discussed, now it's a budget decision;;DB2 nad PostgreSql;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;;all above;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;new security scanner;The tools are fine, the project is just too old;Project architecture;;A +B +C +E;Enterprise Company (I work in a cubicle or large open plan office);3-9;18;Germany
53d63680febfb58a69991175daebe918;Eclipse IDE;;Project requires it;;6;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;;Customer's choice;8;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance tooling / experts are expensive;;"Jenkins Pipelines; Docker";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Developer Advocate/Technical Evangelist;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;Germany
3bfca3a34182ffaeec37aebb7e09925a;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The project kinda works, don't touch what's not completely broken;;MS SQL;;Company policy: we have licenses already;;9;;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;;Usually is not a problem;DevOps full scale;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Poland
564b63608a64200c86295a6b1ab5132c;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"&nbsp;";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Small company (I work in a shared office space or small office);1-2;13;Estonia
cf81ea0436933ed61356236a0cd2f8e1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;;IDE plugin stack (Eclipse SWT, IntelliJ Swing);Project requirements: it was the best fit for this particular project;;4;We're tied to specific tooling for the platform;;Desktop app;;Suitability: it fits our requirements most effectively;;5;;Time constraints;;NoDB;It's strongly encouraged by our application stack choice;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;web components;We're good, it feels productive, and we know how to move forward;Project architecture;Management (People/Project);;Midsized company (I work in an open plan office);3-9;9;Finland
101866b6dabb77a2a95940966c9bb94b;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Better internal communication;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;"spring cache; hibernate lucene search; minio; ";We're good, it feels productive, and we know how to move forward;Virtualization tools;Team Lead;;Midsized company (I work in an open plan office);3-9;13;Jordan
13dadd6b8878698cd12b39b804defc03;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;Oracle DB;;;It was a requirement;9;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;spring-boot, bpmn;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;3;Republic of Macedonia
4faf314f6203f426cc6199c79eaf45b1;NetBeans IDE;;Budget;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;7;;;MySQL;;Budget;;9;;;We are the DevOps ;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Reactive streams.;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;I'm actually out of work (How insensitive of you!);1-2;30;Netherlands
ae5fc380c46f33804000a8009f80d378;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;It's functionally superior;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;;once again: we don't even have ops.;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;"websockets; JSF 2.3";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;20;Germany
854412e2ab571113cd43966d06a1899d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Company policy: all projects use it;;8;;;MySQL;;It's strongly encouraged by our application stack choice;;8;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Belarus
c5dd62813d59618c0cb503c524e1a716;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;7;;;MS SQL;;Company policy: we have licenses already;;10;;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Spring;Kotlin;IntelliJ";The tools are fine, the project is just too old;Application stack ;Team Lead;;Midsized company (I work in an open plan office);3-9;8;Brazil
543fa231dae5b1e21d3d1e70cdbcc6e0;Eclipse IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MongoDB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;;We don't have DevOPs;Developers are equipped with profilers to monitor performance;Performance has never been a requirement;;"vertx;cassandra;TypesafeConfig";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Portugal
9578b8f1baf5d3e7dc551d6bb1a662a6;Eclipse IDE;;Budget;;4;Not enough money in the budget;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Postgres;;Company policy: we have licenses already;;6;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Angular 4;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Midsized company (I work in an open plan office);100+;20;France
4fc525a1a92c3cd76e6a86c098f64a20;Eclipse IDE;;Company policy;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Monolith;;Company policy: all projects use it;;4;It's a fixed project / company requirement;;Oracle DB;;Company policy: we have licenses already;;9;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Black Duck;The tools are fine, the project is just too old;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;20;Ireland
18005fdbaad88a837acbb3823e2eef3f;IntelliJ IDEA;;Familiarity: it's what I know;;7;;;Scala;;Functional superiority;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Spark;Akka Streams";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Germany
66ba8b9e9f839760d39e8b998e351af0;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Postgres;;Developer friendliness;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;"idea; spring boot; angular;";The tools are fine, the project is just too old;Project architecture;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;15;Sweden
161092c62ef2bc12985afd724875cb73;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;;historically grown;6;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Familiarity: we know it the best;;8;;;We are the DevOps ;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;"MongoDB;EcmaScript 6";We're good, it feels productive, and we know how to move forward;Application stack ;Team Lead;;Small company (I work in a shared office space or small office);3-9;15;Germany
fdde208c3199380de3ef5470b09ffa32;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Couchbase;;Developer friendliness;;8;;;We don't even have ops;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;JNoSQL;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Startup (I work in a small cupboard at home);10-19;6;Brazil
4d24b2629bd28a0f7d1528a79fe1e081;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;react;The tools are fine, the project is just too old;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;17;Italy
0922587498a4916b167abb53fa246972;;STS;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;;none;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none yet;We're good, it feels productive, and we know how to move forward;Project architecture;Developer Advocate/Technical Evangelist;;Startup (I work in a small cupboard at home);1-2;12;Sweden
86feedfd6e8377f5f04e1b6dff7d248d;IntelliJ IDEA;;Company policy;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Microservices;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;IntelliJ idea, gradle, Spring boot, swagger;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;Australia
3dc174fe19f6225a1a774d1df030f505;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Monolith;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;Spring Boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;19;Argentina
0559a203649827ffce21f9003b18fbc7;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;;Derby;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;ScalaJS;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;30;United States of America (USA)
234081ca6153478958d3e3d899e303b8;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Our application stack encourages it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Ethereum;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Team Lead;;Midsized company (I work in an open plan office);3-9;5;Estonia
e9106a079b6f5fe5f4739b8823211bb4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Cassandra;;It's strongly encouraged by our application stack choice;;8;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;"OpenTracing; Akka; Kafka; Cassandra; Spark ";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Norway
6852865c7dadb85ea31dceae6511e480;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;9;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Cassandra;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;kubernetes;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);10-19;20;
25874f60748304a82e41264aa84f10e2;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;7;;;Oracle DB;;Company policy: we have licenses already;;7;;;We have a DevOps engineer;;don't know;Developers are equipped with profilers to monitor performance;We don't know how to properly address performance issues;;-;The tools are fine, the project is just too old;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Romania
a8f6e5fc52c1cd9babffb0dd439544f4;;Spring Source Tool Suite (STS);Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Our application stack encourages it;;8;;;MongoDB;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Spring Boot;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;30;Germany
26aee9159cd1fafa4cfce3036afeda8b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"React; NodeJS";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Midsized company (I work in an open plan office);10-19;6;Poland
f28d163ddb3c22e89e48b289fac6a76c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;SOA;;Our application stack encourages it;;8;;;;DB2;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We have APMs and monitor health of the deployments;;Ohter;"git;ruby;rails;";The tools are fine, the project is just too old;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;11;Poland
8000f4153c4c44a60d38eca6a3bbbc92;IntelliJ IDEA;;Functionality: it's superior;;8;;;Kotlin;;Ecosystem: community, tools, libraries;;8;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;"Kotlin;Docker";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;5;Estonia
3067d58c2553d49755d6157679a0bf5d;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;We don't even have ops;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;docker;I wish we've chosen a different set of technologies;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);100+;11;Turkey
f82b4e28f1df78bfa7423942dc6bb7c5;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Custom in-house monstrocity;;It's functionally superior;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;We don't know how to properly address performance issues;;Kotlin;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);50-100;20;Australia
d271abb0b2a13ef773dbf448b096076b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;MySQL;;Budget;;9;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"angular;springboot;";It feels unproductive, but the project is easy to maintain in production;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;United States of America (USA)
9c32898835bf9c82a4288788d9f54957;Eclipse IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;No stack, i.e. plain old Java;;It's functionally superior;;8;;;SOA;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;MS SQL;;Developer friendliness;;10;;;We are the DevOps ;Faster resolution of problems;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;R, Java8, Backbone.js, MS SQL Server 2016, Oracle 12c R2;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;India
ca3a9156007c4b13c6bf70a5377ec752;Eclipse IDE;;Company policy;;7;;;Java 7 (or older);;Functional superiority;;6;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;4;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Javascript;I wish we've chosen a different set of technologies;Project architecture;Management (People/Project);;Midsized company (I work in an open plan office);3-9;7;Spain
72a4084482f8eae4b79313e24ce2b88e;IntelliJ IDEA;;;Eclipse Scala-IDE does not work for the project;7;;;Scala;;Functional superiority;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Redis;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;11;Finland
0b812075d8f21590e866dc9b9c1e550e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;6;;;Cassandra;;;Locked in to past design decision;6;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;12;United Arab Emirates
ed22f159b62806f0d45bbb50dfd3a77b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Project requirements: it was the best fit for this particular project;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;spock;The tools are fine, the project is just too old;Project architecture;Management (People/Project);;Small company (I work in a shared office space or small office);10-19;15;Germany
3e975afbe4f18cedc62251a7bc110ef6;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;;DB2;;Legacy;3;The price of the migration is enormous;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Gradle;It's the worst, we barely move forward;I need more tools not changing the existing;Team Lead;;Midsized company (I work in an open plan office);10-19;30;
8a68ca2863a1c0dd172428b6ece91094;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;;working to move away from the Monolith;Oracle DB;;Familiarity: we know it the best;;6;;;At least we talk to the Ops people;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;CloudFoundry;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Contractor / Freelance (I work when, where and for whom I want!);3-9;18;United States of America (USA)
7745554fe4707853e48cf7a958eaf257;Eclipse IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Company policy: we have other projects using the same stack;;6;;;Monolith;;Our application stack encourages it;;3;It's a fixed project / company requirement;;MySQL;;Budget;;7;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"OSGi;Apache Camel; Apache Kafka";It feels unproductive, but the project is easy to maintain in production;Project architecture;Architect;;Midsized company (I work in an open plan office);20-49;25;Germany
658a7d870409dbf72ffe343d0aaf5536;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;Not interested, we like the wall where it is;Stable operating environment;;We don't care;Performance has never been a requirement;;"Java 9; Java EE 8; Spring 5; Angular 4";We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;10;
3aa8c915531c59c8482c5ca4442de68e;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 7 (or older);;Company policy: we're a $LANG shop;;9;;;Spring ;;Company policy: we have other projects using the same stack;;10;;;SOA;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;AsciiDoctor;We're good, it feels productive, and we know how to move forward;Virtualization tools;Director/VP/C-Level;;Enterprise Company (I work in a cubicle or large open plan office);10-19;17;Germany
26c997d5f8e8e33547d51aabbdb468e0;NetBeans IDE;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Java EE;;Project requirements: it was the best fit for this particular project;;6;;;Microservices;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;9;;;We are the DevOps ;Stable operating environment;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Angular;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
6d87cc63629450b1c9a8e89010efbe00;NetBeans IDE;;Familiarity: it's what I know;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Java EE;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;The Dev team and the Ops team work together;Stable operating environment;;We don't care;Performance has never been a requirement;;"Java EE 8; Java 9";We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;20;United States of America (USA)
5e6835c3a68d835c52c4cc2116979738;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;;Vaadin;Project requirements: it was the best fit for this particular project;;10;;;Monolith;;Suitability: it fits our requirements most effectively;;6;;;;MariaDB;It's strongly encouraged by our application stack choice;;9;;;Not interested, we like the wall where it is;Stable operating environment;;We react to the user complains;Performance tooling / experts are expensive;;AngularJs4;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Startup (I work in a small cupboard at home);1-2;14;Spain
1301b65d942952fa7cbc27817beb775e;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Budget;;8;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;gradle;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);10-19;25;Netherlands
35f117775da257723cef10e44c750894;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;5;The team is large and inflexible;;Oracle DB;;Company policy: we have licenses already;;5;It's a fixed project / company requirement;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Vaadin, Apache Cassandra, Kotlin;The tools are fine, the project is just too old;Project architecture;Consultant;;Enterprise Company (I work in a cubicle or large open plan office);100+;10;Poland
17a527aa53c8bf6bb50a6ae0f2707bec;Eclipse IDE;;Budget;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;9;;;Spring ;;It's functionally superior;;9;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;The project kinda works, don't touch what's not completely broken;;MS SQL;;Budget;;4;It's a fixed project / company requirement;;We have a DevOps engineer;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Microservices / Kabana / Spring Boot;The tools are fine, the project is just too old;Project architecture;Director/VP/C-Level;;Midsized company (I work in an open plan office);10-19;15;United States of America (USA)
79626ee6e3567848f80bdaafd3c70e71;Eclipse IDE;;Company policy;;4;;company policy;Java 7 (or older);;Company policy: we're a $LANG shop;;7;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;;webapps (layered);Company policy: all projects use it;;6;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;!;I wish we've chosen a different set of technologies;IDE;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);100+;1;Belgium
d4784649e55ead87bd7827ff30534853;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;Microservices;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Midsized company (I work in an open plan office);20-49;11;Turkey
29979f9063ed89a27716755b23394354;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;Oracle DB;;Company policy: we have licenses already;;5;The price of the migration is enormous;;At least we talk to the Ops people;Better internal communication;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;Kotlin;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;10;Sweden
121ed2aa32340da2f2424fea8d293eef;Eclipse IDE;;Budget;;8;;;Java 7 (or older);;Team skills: it was what we knew the best;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;It's strongly encouraged by our application stack choice;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We react to the user complains;Performance directly affects our bottom line;;QlikView;We're good, it feels productive, and we know how to move forward;Project architecture;Management (People/Project);;Midsized company (I work in an open plan office);20-49;15;Argentina
762846132f7b8c85a4595247b1f21e7a;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;SOA;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Budget;;6;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;Java 9;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;2;Russian Federation
9b11b63d3d9506cac2e6b336d764a244;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;7;;;Spring ;;It's functionally superior;;7;;;Desktop app;;Legacy reasons: it was picked ages ago, must have made sense then;;5;It's a fixed project / company requirement;;MS SQL;;It's strongly encouraged by our application stack choice;;7;;;We are the DevOps ;;small company, small team;We react to the user complains;;No bottom line advantage in improving performance;Kotlin;We're good, it feels productive, and we know how to move forward;Programming language;Team Lead;;Small company (I work in a shared office space or small office);3-9;22;Switzerland
32bfdc5782b2964d36f6d9f4c7d7d4a9;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;9;;;MS SQL;;Familiarity: we know it the best;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Docker;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;18;United States of America (USA)
dc032ea0e6abdd415669f6e145944b19;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Familiarity: we know it the best;;8;;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;Java 9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);1-2;1;Hungary
78dd8a22d322430571cb03052f799db4;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;4;It's a fixed project / company requirement;;;Sybase;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Go;We're good, it feels productive, and we know how to move forward;Project architecture;Architect;;Small company (I work in a shared office space or small office);10-19;17;Netherlands
782be1be22dc976eb5a75f2dd455eae1;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;It's strongly encouraged by our application stack choice;;8;;;At least we talk to the Ops people;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;Java 9;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Latvia
5b26376c5c03df815ed082662ab98900;IntelliJ IDEA;;Functionality: it's superior;;8;;;;Ruby, JavaScript, TypeScript, Java, Scala;Ecosystem: community, tools, libraries;;8;;;Spring ;;Familiarity: we know it the best;;9;;;SOA;;;-;8;;;Postgres;;Familiarity: we know it the best;;10;;;We have a DevOps engineer;Happier team;;We have APMs and monitor health of the deployments;We don't know how to properly address performance issues;;"Apache Spark; Akka";I wish we've chosen a different set of technologies;Programming language;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;12;Ukraine
335fa7cb3c9905e3a96615903c954221;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;It's functionally superior;;6;;;Monolith;;Suitability: it fits our requirements most effectively;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;dart;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);50-100;10;Russian Federation
d068924649c63a719095606780ef31b8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Java EE;;Project requirements: it was the best fit for this particular project;;8;;;SOA;;Company policy: all projects use it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;OpenShift;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;15;Russian Federation
4b1f986b1e6c1c5e36b73cf60838cf15;NetBeans IDE;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Suitability: it fits our requirements most effectively;;8;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;mockito;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Small company (I work in a shared office space or small office);3-9;10;Russian Federation
b52b5fde0ed3f4d97c7518ff2ebbc5c2;;All three major IDEs;;I need to make sure my source code and build scripts are handled properly by all three.;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Company policy: we have other projects using the same stack;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;MongoDB;;Suitability: it fits our architechture / requirements;;7;;;Not interested, we like the wall where it is;;None;We benchmark or have performance tests to catch regressions;Performance tooling / experts are expensive;;Eclipse Collections, Dropwizard Metrics;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Midsized company (I work in an open plan office);20-49;25;Great Britain
bee5af43b4c65613f3e5667f5a555a2e;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Oracle DB;;Company policy: we have licenses already;;7;;;We don't even have ops;Stable operating environment;;We react to the user complains;We don't know how to properly address performance issues;;docker;I wish we've chosen a different set of technologies;Project architecture;Team Lead;;Small company (I work in a shared office space or small office);20-49;10;France
b208d321cf0c2234128709aa3b4efe7d;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Team skills: it was what we knew the best;;6;;;Spring ;;Familiarity: we know it the best;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We don't even have ops;Happier team;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);100+;14;Austria
1d83ff44cd3598a93503e831703d2b4b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;It was an experiment;;10;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;Custom;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Better internal communication;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Small company (I work in a shared office space or small office);20-49;4;Germany
cebdc7440805a3c91569b1424f755b82;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;10;;;MySQL;;Developer friendliness;;10;;;We have a DevOps engineer;Faster resolution of problems;;We have professional perf engineers in the team;Performance tooling / experts are expensive;;"VisualVM;JMC;JMH";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);3-9;7;Belarus
bd394e5a41574fcdbf68dfdbe4d43049;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;9;;;;Marklogic;Company policy: we have licenses already;;7;;;We have a DevOps engineer;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;RxJava;It's the worst, we barely move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);100+;15;United States of America (USA)
017a661fc259a25865d80b01c53df2e8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;It's functionally superior;;9;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Stable operating environment;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"java missing control; async-profiler; nano-cloud; gc-monitor; rolling-metrics; bucket4j; spock; kafka; zookeeper";We're good, it feels productive, and we know how to move forward;Database;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;7;Russian Federation
e53589f9abf643fa6c670111c38f5d22;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;5;It's a fixed project / company requirement;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;5;It's a fixed project / company requirement;;Desktop app;;Suitability: it fits our requirements most effectively;;8;;;Oracle DB;;It's strongly encouraged by our application stack choice;;8;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;scala;I wish we've chosen a different set of technologies;Programming language;Software Developer;;Midsized company (I work in an open plan office);20-49;3;Australia
8060573282061bffda68885c9a74d102;Eclipse IDE;;Company policy;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;4;We're tied to specific tooling for the platform;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;8;;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;We need to meet our SLAs;"Git;BitBucket";The tools are fine, the project is just too old;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;8;Switzerland
3455a971d0ba9449cbcd36ef8bd8742b;IntelliJ IDEA;;Company policy;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;Progress OpenEdge;;Legacy: Our database is shared by other apps that require it;1;The price of the migration is enormous;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"Kotlin; Java 9";The tools are fine, the project is just too old;Database;Software Developer;;Midsized company (I work in an open plan office);10-19;8;United States of America (USA)
c793df846bd7394c1d65855022f24560;IntelliJ IDEA;;Functionality: it's superior;;9;;;Groovy;;Functional superiority;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;9;;;;Custom made (ERP System);;It is our backend application;5;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Ratpack;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);3-9;25;Germany
fab95eaea4cab6c1c067233a8ff38bd0;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"spring boot;lombok;gradle";We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);50-100;3;Ukraine
724b7c216cc7e28861af1f3c9fdccf52;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;MySQL;;It's strongly encouraged by our application stack choice;;5;The price of the migration is enormous;;At least we talk to the Ops people;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Redis;It feels unproductive, but the project is easy to maintain in production;Virtualization tools;Software Developer;;Small company (I work in a shared office space or small office);10-19;7;Russian Federation
e6b581f902f5dbb42bedbcc998ee97b6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We have a DevOps engineer;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;liquibase;We're good, it feels productive, and we know how to move forward;Virtualization tools;Architect;;Midsized company (I work in an open plan office);20-49;20;United States of America (USA)
f20e0d5ebd5c96ce36489a5a08e81b58;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance has never been a requirement;;java 9;It feels unproductive, but the project is easy to maintain in production;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;5;Russian Federation
4cedc89a0a7fd2d62352d859640fb90d;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;10;;;Microservices;;Hype: it was a modern approach;;8;;;Oracle DB;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We react to the user complains;Performance tooling / experts are expensive;;"Spring Boot; Spring Cloud; Kotlin; Cloud Foundry";We're good, it feels productive, and we know how to move forward;Database;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);20-49;20;Germany
7354cfa2eb71614c299b37eccf09a88e;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;8;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;6;;;SOA;;Suitability: it fits our requirements most effectively;;4;;Requirement of application;;None;;;;;;We don't even have ops;;N/A;We react to the user complains;Performance has never been a requirement;;gradle;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;13;United States of America (USA)
ed7e5ea905ae516bef228da184af65e8;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Microservices;;Our application stack encourages it;;7;;;MongoDB;;Suitability: it fits our architechture / requirements;;6;;;We are the DevOps ;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Spring boot;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);3-9;4;Russian Federation
ced2ff7477353c799e69cc4f167d6877;IntelliJ IDEA;;Project requires it;;6;;;JavaScript;;Functional superiority;;8;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;7;;;Serverless;;Company policy: all projects use it;;7;;;Oracle DB;;Suitability: it fits our architechture / requirements;;7;;;We have a DevOps engineer;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;ta;It feels unproductive, but the project is easy to maintain in production;Application stack ;Developer Advocate/Technical Evangelist;;Contractor / Freelance (I work when, where and for whom I want!);100+;10;United States of America (USA)
b02cceff7de7c282d2130fe0f7f94f27;IntelliJ IDEA;;Project requires it;;5;Not enough money in the budget;;Groovy;;Company policy: we're a $LANG shop;;9;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;SOA;;Suitability: it fits our requirements most effectively;;9;;;MySQL;;It's strongly encouraged by our application stack choice;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;ALl;It feels unproductive, but the project is easy to maintain in production;Application stack ;Architect;;Startup (I work in a small cupboard at home);1-2;2;United States of America (USA)
03ae005c212155a82a7c030849615680;IntelliJ IDEA;;Functionality: it's superior;;7;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;5;;Nothing is better;SOA;;Suitability: it fits our requirements most effectively;;5;The project kinda works, don't touch what's not completely broken;;Postgres;;Developer friendliness;;9;;;We are the DevOps ;Faster delivery of features;;We have APMs and monitor health of the deployments;Performance tooling / experts are expensive;;Spring reactor;It feels unproductive, but the project is easy to maintain in production;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);3-9;13;Germany
a59a18ab3773aaae81e966b1402d747c;IntelliJ IDEA;;Functionality: it's superior;;6;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Familiarity: we have the skills and know we can make it work;;4;The project kinda works, don't touch what's not completely broken;;Postgres;;Familiarity: we know it the best;;9;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;We don't know how to properly address performance issues;;Flyway;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);3-9;6;Germany
9d9ab9ade60d177286f30a9f983f9d88;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;9;;;Split architecture: frontend / backend;;Our application stack encourages it;;7;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Lowering complexity of the maintenance;;We benchmark or have performance tests to catch regressions;We don't know how to properly address performance issues;;ReactJS, RxJava, Docker Swarm;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Team Lead;;Small company (I work in a shared office space or small office);3-9;15;Russian Federation
5a6ab5acf58d959e474e72b1a700cc23;Eclipse IDE;;;Everyone else uses it;6;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;;Just an experiment;8;;;Postgres;;Suitability: it fits our architechture / requirements;;9;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;CloudFoundry;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;25;Finland
83b6d82ad1679c9fb12aa0d3e8d54cfb;IntelliJ IDEA;;Functionality: it's superior;;10;;;Kotlin;;Functional superiority;;10;;;No stack, i.e. plain old Java;;Hype: they told us it's the next big thing;;9;;;Desktop app;;Our application stack encourages it;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Lowering complexity of the maintenance;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Chromium Embedded Framework;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Consultant;;Contractor / Freelance (I work when, where and for whom I want!);1-2;5;Austria
f2198bef673aca4d2840e6bed0256c42;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;Familiarity: we know it the best;;8;;;Microservices;;Company policy: all projects use it;;9;;;MySQL;;Company policy: we have licenses already;;7;;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We react to the user complains;Performance directly affects our bottom line;;Java Spark;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Midsized company (I work in an open plan office);10-19;30;United States of America (USA)
81975f27381e4ea63ab01e6ba45eb15d;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;Hibernate 5.2;We're good, it feels productive, and we know how to move forward;I'm the rockstar ninja as is. I'm good.;Software Developer;;Midsized company (I work in an open plan office);10-19;14;Poland
3d318afc0e1f60b05359759df89a0b45;Eclipse IDE;;Budget;;4;Not enough money in the budget;;Java 7 (or older);;Ecosystem: community, tools, libraries;;6;;;Spring ;;It's functionally superior;;6;;;Split architecture: frontend / backend;;Familiarity: we have the skills and know we can make it work;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We don't even have ops;;We don't have devops;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"Spring;hibernate;rest;bootstrap;";We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;6;
9003ef5c8df95e4b3190660d2d3cee58;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;6;;;Desktop app;;Suitability: it fits our requirements most effectively;;7;;;;H2;Suitability: it fits our architechture / requirements;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;Performance has never been a requirement;;java9;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;9;Estonia
e07a3dc0cd50f4d181e044c132308f25;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Company policy: we're a $LANG shop;;8;;;Java EE;;Company policy: we have other projects using the same stack;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;Learning the ropes of a different architecture is too time-consuming / expensive;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Better internal communication;;We react to the user complains;We don't know how to properly address performance issues;;"VueJS;Kotlin;Spring Boot;Gradle";The tools are fine, the project is just too old;Project architecture;Software Developer;;Midsized company (I work in an open plan office);1-2;9;Greece
c366e7ef0029fd98e6ba6c28e0b19d03;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;7;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;4;;It's only one of dozens of software products we have. Resources allocated elsewhere;MySQL;;Developer friendliness;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;"RabbitMQ; Java 9; OSGi; AWS Lambda; JRebel; Liferay DXP; Kotlin; dynamodb; new relic; docker";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);10-19;5;United States of America (USA)
ac354e942b42fe7c60bc1530873696ff;Eclipse IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;At least we talk to the Ops people;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance tooling / experts are expensive;;"Hibernate5; ByteBuddy; Gradle; HotswapAgent";We're good, it feels productive, and we know how to move forward;We need to become DevOps;Architect;;Small company (I work in a shared office space or small office);50-100;12;India
27e2ba893ed63544f0ed29541b3e5a08;IntelliJ IDEA;;Familiarity: it's what I know;;9;;;Java 7 (or older);;Team skills: it was what we knew the best;;5;It's a fixed project / company requirement;;Custom in-house monstrocity;;Familiarity: we know it the best;;2;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;1;Learning the ropes of a different architecture is too time-consuming / expensive;;MySQL;;Familiarity: we know it the best;;7;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;We don't know how to properly address performance issues;;Java 8;Typically, it's a lot of firefighting and bugfixing. Not much development.;Application stack ;Software Developer;;Midsized company (I work in an open plan office);100+;4;United States of America (USA)
29c045f0109557936431f1a00cd96e59;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;8;;;Lightweight frameworks, i.e. Dropwizard, SparkJava, Ratpack, etc ;;Company policy: we have other projects using the same stack;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;;SQLite;Suitability: it fits our architechture / requirements;;7;;;We don't even have ops;Faster delivery of features;;We react to the user complains;Performance directly affects our bottom line;;perf;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Midsized company (I work in an open plan office);20-49;11;Great Britain
abcbbf0cb86cae57407fe72c1edb27e8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Company policy: we have other projects using the same stack;;7;;;SOA;;;Company wanted micro services but didn't know how to design it and ended up doing SOA;1;The project kinda works, don't touch what's not completely broken;;Postgres;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;;We don't have it, there is still isolation from dev and ops;We react to the user complains;We don't know how to properly address performance issues;;Kotlin;Typically, it's a lot of firefighting and bugfixing. Not much development.;We need to become DevOps;Software Developer;;Small company (I work in a shared office space or small office);50-100;16;Spain
e329b6a2010c691e660c51eb253c4ede;Eclipse IDE;;Familiarity: it's what I know;;4;Not enough time to learn the new IDE;;Java 8 (or newer);;Functional superiority;;7;;;Java EE;;It's functionally superior;;7;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MS SQL;;Company policy: we have licenses already;;4;It's a fixed project / company requirement;;At least we talk to the Ops people;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;wildfly-swarm;We're good, it feels productive, and we know how to move forward;We need to become DevOps;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;United States of America (USA)
b0fd1ffba7d417f3812316cd6dca5015;Eclipse IDE;;Familiarity: it's what I know;;7;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Reactive stack, i.e. Play framework, Lagom, Vert.x, etc;;It's functionally superior;;8;;;Microservices;;Company policy: all projects use it;;9;;;Oracle DB;;Company policy: we have licenses already;;8;;;We have a DevOps engineer;Better internal communication;;We don't care;Performance directly affects our bottom line;;akka;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Spain
b413dfbb8ff077b3651d51084fbfde08;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;9;;;Spring ;;Familiarity: we know it the best;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;9;;;MySQL;;Suitability: it fits our architechture / requirements;;10;;;We don't even have ops;Faster resolution of problems;;We react to the user complains;Performance directly affects our bottom line;;"Spring boot; JRebel; MongoDB;";We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Contractor / Freelance (I work when, where and for whom I want!);3-9;7;Brazil
b02ebe51919c568f532b8beb5f34f2e3;Eclipse IDE;;Budget;;7;;;Java 7 (or older);;Company policy: we're a $LANG shop;;10;;;Spring ;;It's functionally superior;;10;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;Postgres;;Budget;;7;;;We have a DevOps engineer;Better internal communication;;We have professional perf engineers in the team;Performance directly affects our bottom line;;"jmeter;ubikloadpack;";We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);3-9;17;France
267a7412f9460f77a144729422db911c;Eclipse IDE;;Familiarity: it's what I know;;6;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Java EE;;Company policy: we have other projects using the same stack;;5;Not enough time to learn the new application stack;;Microservices;;Hype: it was a modern approach;;7;;;Oracle DB;;It's strongly encouraged by our application stack choice;;5;The price of the migration is enormous;;The Dev team and the Ops team work together;Lowering complexity of the maintenance;;We don't care;We don't know how to properly address performance issues;;swagger;I wish we've chosen a different set of technologies;Application stack ;Software Developer;;Midsized company (I work in an open plan office);3-9;6;Poland
1bd3b8b686a2bcab4f6abc042faa2f85;IntelliJ IDEA;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;9;;;Custom in-house monstrocity;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;7;;;MongoDB;;It's strongly encouraged by our application stack choice;;6;;;The Dev team and the Ops team work together;Better internal communication;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Docker;I wish we've chosen a different set of technologies;Virtualization tools;Software Developer;;Midsized company (I work in an open plan office);3-9;9;Australia
8bb60821fb343d94eb44fa8dfd53fda3;Eclipse IDE;;;Lightweight ;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;No stack, i.e. plain old Java;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;10;;;MongoDB;;Suitability: it fits our architechture / requirements;;6;;;Not interested, we like the wall where it is;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Spring boot;We're good, it feels productive, and we know how to move forward;Virtualization tools;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;4;India
5dea2665869493127f495630784f9256;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;8;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;8;;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;5;The team is large and inflexible;;Oracle DB;;It's strongly encouraged by our application stack choice;;6;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;"NoSQL;ignite;kotlin;couchbase";I wish we've chosen a different set of technologies;Database;Architect;;Enterprise Company (I work in a cubicle or large open plan office);50-100;11;United States of America (USA)
6f2484fa443cd1a176d2b2717c41dfc8;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Team skills: it was what we knew the best;;8;;;Spring ;;It's functionally superior;;10;;;Monolith;;Familiarity: we have the skills and know we can make it work;;6;;;Postgres;;Suitability: it fits our architechture / requirements;;8;;;We have a DevOps engineer;Stable operating environment;;We react to the user complains;Performance has never been a requirement;;"spring boot; docker;";We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Startup (I work in a small cupboard at home);3-9;12;Brazil
343b4c00e551c754fe3c02e90c88eb95;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 7 (or older);;Ecosystem: community, tools, libraries;;7;;;Spring ;;Company policy: we have other projects using the same stack;;8;;;Split architecture: frontend / backend;;Suitability: it fits our requirements most effectively;;8;;;;SQL Server;It's strongly encouraged by our application stack choice;;7;;;At least we talk to the Ops people;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance has never been a requirement;;Docker;I wish we've chosen a different set of technologies;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Spain
6122601da95c02b8d8b6eb079a671d2c;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 7 (or older);;Team skills: it was what we knew the best;;8;;;Spring ;;;de facto standard;8;;;Split architecture: frontend / backend;;Our application stack encourages it;;8;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We react to the user complains;Performance has never been a requirement;;Going to migrate to Java 8 and Angular;We're good, it feels productive, and we know how to move forward;Application stack ;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;10;Czech Republic
1fc83a94746bfbb76a46b9e34bc2085b;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Custom in-house monstrocity;;Company policy: we have other projects using the same stack;;5;Not enough time / money to migrate the project though I know it'll be better;;Monolith;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MySQL;;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Faster delivery of features;;Developers are equipped with profilers to monitor performance;Performance directly affects our bottom line;;Java 8;We're good, it feels productive, and we know how to move forward;Project architecture;Software Developer;;Midsized company (I work in an open plan office);10-19;3;France
2277c7c98f89d328b6501d3019499331;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;;JacORB;Project requirements: it was the best fit for this particular project;;3;We're tied to specific tooling for the platform;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;3;The project kinda works, don't touch what's not completely broken;;MySQL;;Budget;;5;It's a fixed project / company requirement;;We don't even have ops;Faster delivery of features;;We react to the user complains;We don't know how to properly address performance issues;;GitHub;We're good, it feels productive, and we know how to move forward;Project architecture;;All-in-One Guy;Small company (I work in a shared office space or small office);1-2;10;Russian Federation
28890ffb5db27183a5cc564fe0c2c5d9;IntelliJ IDEA;;Functionality: it's superior;;8;;;Java 8 (or newer);;Functional superiority;;7;;;Spring ;;Project requirements: it was the best fit for this particular project;;7;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;We are the DevOps ;Faster resolution of problems;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;kotlin;We're good, it feels productive, and we know how to move forward;Application stack ;Consultant;;Small company (I work in a shared office space or small office);3-9;17;Netherlands
26627ee350d76fd2aa4dfc9ea076b614;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;;We're supporting a java based CMS;8;;;;CMS specific stack (Felix / OSGi);;Not much choice, really, except for not supporting the CMS.;7;;;Monolith;;;Based on current CMS architecture.;6;;;MongoDB;;It's strongly encouraged by our application stack choice;;8;;;At least we talk to the Ops people;Better internal communication;;We react to the user complains;Performance directly affects our bottom line;;IntelliJ, java8 's datetime API, also groovy to write some scripts to make life easier.;I wish we've chosen a different set of technologies;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;20;Netherlands
f9b5c4314d9268b1e811ca79d697aa5b;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;7;;;Custom in-house monstrocity;;Project requirements: it was the best fit for this particular project;;8;;;Microservices;;Suitability: it fits our requirements most effectively;;8;;;Redis;;Suitability: it fits our architechture / requirements;;9;;;We don't even have ops;Happier team;;We have APMs and monitor health of the deployments;Performance directly affects our bottom line;;Reactor;It feels unproductive, but the project is easy to maintain in production;Project architecture;Software Developer;;Small company (I work in a shared office space or small office);3-9;12;Indonesia
12e5de3c5ff6edeeea986a999745f880;Eclipse IDE;;Familiarity: it's what I know;;8;;;Java 8 (or newer);;;It's what we had already;8;;;Java EE;;Company policy: we have other projects using the same stack;;6;;;Split architecture: frontend / backend;;Legacy reasons: it was picked ages ago, must have made sense then;;7;;;;DB2;Suitability: it fits our architechture / requirements;;8;;;We are the DevOps ;Better internal communication;;We react to the user complains;Performance has never been a requirement;;.;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);3-9;13;Great Britain
276a24140ecf61cec2616816bfc2575c;IntelliJ IDEA;;Familiarity: it's what I know;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;;Grails;It's functionally superior;;10;;;Monolith;;Our application stack encourages it;;5;;What we have works great and there is no ROI for a rewrite;;Informix;Company policy: we have licenses already;;10;;;The Dev team and the Ops team work together;Faster resolution of problems;;We react to the user complains;;Don't fix what isn't broken;Kotlin;We're good, it feels productive, and we know how to move forward;Project architecture;Team Lead;;Enterprise Company (I work in a cubicle or large open plan office);3-9;15;United States of America (USA)
8268dce43dbab13837bc0c00214ec2aa;Eclipse IDE;;Company policy;;6;;;Java 7 (or older);;Company policy: we're a $LANG shop;;6;;;;Struts 1;Company policy: we have other projects using the same stack;;2;It's a fixed project / company requirement;;Microservices;;Legacy reasons: it was picked ages ago, must have made sense then;;8;;;Oracle DB;;Company policy: we have licenses already;;8;;;At least we talk to the Ops people;Lowering complexity of the maintenance;;We react to the user complains;Performance has never been a requirement;;AngularJS;Typically, it's a lot of firefighting and bugfixing. Not much development.;Project architecture;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);10-19;3;Mexico
901b3eee8800290a6193ae531a730d3c;NetBeans IDE;;Functionality: it's superior;;10;;;Java 8 (or newer);;Functional superiority;;10;;;Java EE;;It's functionally superior;;10;;;Microservices;;Suitability: it fits our requirements most effectively;;10;;;Oracle DB;;Company policy: we have licenses already;;9;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;Java EE 8, Java 9, Spring 5, MicroProfile, Angular 4;We're good, it feels productive, and we know how to move forward;I need more tools not changing the existing;Software Developer;;Midsized company (I work in an open plan office);3-9;7;
bb9e3bfe09592b502aa29ed7e4a75844;Eclipse IDE;;Familiarity: it's what I know;;5;Not enough time to learn the new IDE;;Java 8 (or newer);;Functional superiority;;4;It's a fixed project / company requirement;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;6;;;Microservices;;Our application stack encourages it;;6;;;Oracle DB;;Company policy: we have licenses already;;6;;;The Dev team and the Ops team work together;Faster delivery of features;;We benchmark or have performance tests to catch regressions;;Hard to fit in Perf reqs and testing;Eclipse, Jenklis, SOapUI, Postman, CICD;We're good, it feels productive, and we know how to move forward;Application stack ;Architect;;Enterprise Company (I work in a cubicle or large open plan office);10-19;16;United States of America (USA)
cd59a70a84c937e0dc6f6824f12648d6;IntelliJ IDEA;;Functionality: it's superior;;9;;;Java 8 (or newer);;Functional superiority;;10;;;No stack, i.e. plain old Java;;Project requirements: it was the best fit for this particular project;;9;;;Desktop app;;Suitability: it fits our requirements most effectively;;10;;;MySQL;;Suitability: it fits our architechture / requirements;;9;;;We have a DevOps engineer;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;none;We're good, it feels productive, and we know how to move forward;We need to care about performance more;Software Developer;;Enterprise Company (I work in a cubicle or large open plan office);20-49;10;Sweden
eef7fed95f879524fe32d4cb828a5d7a;IntelliJ IDEA;;Functionality: it's superior;;10;;;Java 8 (or newer);;Ecosystem: community, tools, libraries;;10;;;Spring ;;Ecosystem: tooling, libraries, plenty of users, and support;;10;;;Microservices;;Familiarity: we have the skills and know we can make it work;;10;;;Postgres;;Suitability: it fits our architechture / requirements;;10;;;The Dev team and the Ops team work together;Stable operating environment;;We benchmark or have performance tests to catch regressions;Performance directly affects our bottom line;;jOOQ, Spring Boot;We're good, it feels productive, and we know how to move forward;Programming language;Software Developer;;Midsized company (I work in an open plan office);3-9;5;Netherlands